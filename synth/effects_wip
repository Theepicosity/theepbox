
export class Effect {
    public type: EffectType = EffectType.reverb;
    public outTo: Effect | null;
    public wetDryMix: number = 50;
    public effectCodeLoadPerTick: string = "";
    public effectCodeApplyPerSample: string = "";
    public effectCodeSavePerTick: string = "";

    // valid effect types for now: EffectType.reverb, EffectType.chorus, EffectType.panning, EffectType.distortion, EffectType.bitcrusher, EffectType.eqFilter, EffectType.echo
    // these are what the wiki calls "audio processors" as opposed to the other effects which are "musical data processors."
    // in this mod ive been calling them audio effects and midi effects, which i think is fair naming aswell!
    // this new class is for *audio effects only*, and midi effects will still use the OG effect toggle off/on system :>

    public prepareEffectCode(): void {
        if (this.type == EffectType.reverb) {
            this.effectCodeLoadPerTick = `
            const reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.
            const reverbDelayLine = instrumentState.reverbDelayLine;
            instrumentState.reverbDelayLineDirty = true;
            let reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;

            let reverb = +instrumentState.reverbMult;
            const reverbDelta = +instrumentState.reverbMultDelta;

            const reverbShelfA1 = +instrumentState.reverbShelfA1;
            const reverbShelfB0 = +instrumentState.reverbShelfB0;
            const reverbShelfB1 = +instrumentState.reverbShelfB1;
            let reverbShelfSample0 = +instrumentState.reverbShelfSample0;
            let reverbShelfSample1 = +instrumentState.reverbShelfSample1;
            let reverbShelfSample2 = +instrumentState.reverbShelfSample2;
            let reverbShelfSample3 = +instrumentState.reverbShelfSample3;
            let reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;
            let reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;
            let reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;
            let reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;
            `
            this.effectCodeApplyPerSample = `
            // Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.
            // good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268
            // Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14
            // Buffer offsets: 3041    -> 6426   -> 10907 -> 16384
            const reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;
            const reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;
            const reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;
            const reverbSample0 = (reverbDelayLine[reverbDelayPos]);
            const reverbSample1 = reverbDelayLine[reverbDelayPos1];
            const reverbSample2 = reverbDelayLine[reverbDelayPos2];
            const reverbSample3 = reverbDelayLine[reverbDelayPos3];
            const reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;
            const reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;
            const reverbTemp2 = -reverbSample2 + reverbSample3;
            const reverbTemp3 = -reverbSample2 - reverbSample3;
            const reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;
            const reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;
            const reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;
            const reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;
            reverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;
            reverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;
            reverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;
            reverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;
            reverbShelfPrevInput0 = reverbShelfInput0;
            reverbShelfPrevInput1 = reverbShelfInput1;
            reverbShelfPrevInput2 = reverbShelfInput2;
            reverbShelfPrevInput3 = reverbShelfInput3;
            reverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;
            reverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;
            reverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;
            reverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;
            reverbDelayPos = (reverbDelayPos + 1) & reverbMask;
            sampleL += reverbSample1 + reverbSample2 + reverbSample3;
            sampleR += reverbSample0 + reverbSample2 - reverbSample3;
            reverb += reverbDelta;
            `
            this.effectCodeSavePerTick = `
            Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);
            Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);
            Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);
            Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);
            instrumentState.reverbDelayPos = reverbDelayPos;
            instrumentState.reverbMult = reverb;

            if (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;
            if (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;
            if (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;
            if (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;
            if (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;
            if (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;
            if (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;
            if (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;
            instrumentState.reverbShelfSample0 = reverbShelfSample0;
            instrumentState.reverbShelfSample1 = reverbShelfSample1;
            instrumentState.reverbShelfSample2 = reverbShelfSample2;
            instrumentState.reverbShelfSample3 = reverbShelfSample3;
            instrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;
            instrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;
            instrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;
            instrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;
            `
        }
        else if (this.type == EffectType.chorus) {
            this.effectCodeLoadPerTick = `
            const chorusMask = synth.chorusDelayBufferMask >>> 0;
            const chorusDelayLineL = instrumentState.chorusDelayLineL;
            const chorusDelayLineR = instrumentState.chorusDelayLineR;
            instrumentState.chorusDelayLineDirty = true;
            let chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;

            let chorusVoiceMult = +instrumentState.chorusVoiceMult;
            const chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;
            let chorusCombinedMult = +instrumentState.chorusCombinedMult;
            const chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;

            const chorusDuration = +beepbox.Config.chorusPeriodSeconds;
            const chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);
            const chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;
            const chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;
            const chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;
            const chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;
            const chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;
            const chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;
            const chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;
            let chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);
            let chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);
            let chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);
            let chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);
            let chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);
            let chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);
            let chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);
            chorusPhase += chorusAngle * runLength;
            const chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;
            const chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;
            const chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;
            const chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;
            const chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;
            const chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;
            const chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;
            const chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;
            const chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;
            const chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;
            const chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;
            const chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;
            `
            this.effectCodeApplyPerSample = `
            const chorusTap0Ratio = chorusTap0Index % 1;
            const chorusTap1Ratio = chorusTap1Index % 1;
            const chorusTap2Ratio = chorusTap2Index % 1;
            const chorusTap3Ratio = chorusTap3Index % 1;
            const chorusTap4Ratio = chorusTap4Index % 1;
            const chorusTap5Ratio = chorusTap5Index % 1;
            const chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];
            const chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];
            const chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];
            const chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];
            const chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];
            const chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];
            const chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];
            const chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];
            const chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];
            const chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];
            const chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];
            const chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];
            const chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;
            const chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;
            const chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;
            const chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;
            const chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;
            const chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;
            chorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;
            chorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;
            sampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));
            sampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));
            chorusDelayPos = (chorusDelayPos + 1) & chorusMask;
            chorusTap0Index += chorusTap0Delta;
            chorusTap1Index += chorusTap1Delta;
            chorusTap2Index += chorusTap2Delta;
            chorusTap3Index += chorusTap3Delta;
            chorusTap4Index += chorusTap4Delta;
            chorusTap5Index += chorusTap5Delta;
            chorusVoiceMult += chorusVoiceMultDelta;
            chorusCombinedMult += chorusCombinedMultDelta;
            `
            this.effectCodeSavePerTick = `
            Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);
            Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);
            instrumentState.chorusPhase = chorusPhase;
            instrumentState.chorusDelayPos = chorusDelayPos;
            instrumentState.chorusVoiceMult = chorusVoiceMult;
            instrumentState.chorusCombinedMult = chorusCombinedMult;`
        }
        else if (this.type == EffectType.panning) {
            this.effectCodeLoadPerTick = `
            const panningMask = synth.panningDelayBufferMask >>> 0;
            const panningDelayLine = instrumentState.panningDelayLine;
            let panningDelayPos = instrumentState.panningDelayPos & panningMask;
            let   panningVolumeL      = +instrumentState.panningVolumeL;
            let   panningVolumeR      = +instrumentState.panningVolumeR;
            const panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;
            const panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;
            let   panningOffsetL      = +instrumentState.panningOffsetL;
            let   panningOffsetR      = +instrumentState.panningOffsetR;
            const panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;
            const panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;
            `
            this.effectCodeApplyPerSample = `
            sampleL *= panningVolumeL;
            sampleR *= panningVolumeR;
            panningVolumeL += panningVolumeDeltaL;
            panningVolumeR += panningVolumeDeltaR;
            `
            this.effectCodeSavePerTick = `
            Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);
            instrumentState.panningDelayPos = panningDelayPos;
            instrumentState.panningVolumeL = panningVolumeL;
            instrumentState.panningVolumeR = panningVolumeR;
            instrumentState.panningOffsetL = panningOffsetL;
            instrumentState.panningOffsetR = panningOffsetR;
            `
        }
        else if (this.type == EffectType.distortion) {
            this.effectCodeLoadPerTick = `
            const distortionBaseVolume = +Config.distortionBaseVolume;
            let distortion = instrumentState.distortion;
            const distortionDelta = instrumentState.distortionDelta;
            let distortionDrive = instrumentState.distortionDrive;
            const distortionDriveDelta = instrumentState.distortionDriveDelta;
            const distortionFractionalResolution = 4.0;
            const distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;
            const distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;
            const distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;
            const distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;
            const distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
            const distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
            const distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
            const distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;
            const distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;
            const distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;
            const distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;
            const distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;
            const distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;

            let distortionFractionalInputL1 = +instrumentState.distortionFractionalInputL1;
            let distortionFractionalInputL2 = +instrumentState.distortionFractionalInputL2;
            let distortionFractionalInputL3 = +instrumentState.distortionFractionalInputL3;
            let distortionFractionalInputR1 = +instrumentState.distortionFractionalInputR1;
            let distortionFractionalInputR2 = +instrumentState.distortionFractionalInputR2;
            let distortionFractionalInputR3 = +instrumentState.distortionFractionalInputR3;
            let distortionPrevInputL = +instrumentState.distortionPrevInputL;
            let distortionPrevInputR = +instrumentState.distortionPrevInputR;
            let distortionNextOutputL = +instrumentState.distortionNextOutputL;
            let distortionNextOutputR = +instrumentState.distortionNextOutputR;
            `
            this.effectCodeApplyPerSample = `
            const distortionReverse = 1.0 - distortion;
            const distortionNextInputL = sampleL * distortionDrive;
            const distortionNextInputR = sampleR * distortionDrive;
            sampleL = distortionNextOutputL;
            sampleR = distortionNextOutputR;
            distortionNextOutputL = distortionNextInputL / (distortionReverse * Math.abs(distortionNextInputL) + distortion);
            distortionNextOutputR = distortionNextInputR / (distortionReverse * Math.abs(distortionNextInputR) + distortion);
            distortionFractionalInputL1 = distortionFractionalDelayG1 * distortionNextInputL + distortionPrevInputL - distortionFractionalDelayG1 * distortionFractionalInputL1;
            distortionFractionalInputL2 = distortionFractionalDelayG2 * distortionNextInputL + distortionPrevInputL - distortionFractionalDelayG2 * distortionFractionalInputL2;
            distortionFractionalInputL3 = distortionFractionalDelayG3 * distortionNextInputL + distortionPrevInputL - distortionFractionalDelayG3 * distortionFractionalInputL3;
            distortionFractionalInputR1 = distortionFractionalDelayG1 * distortionNextInputR + distortionPrevInputR - distortionFractionalDelayG1 * distortionFractionalInputR1;
            distortionFractionalInputR2 = distortionFractionalDelayG2 * distortionNextInputR + distortionPrevInputR - distortionFractionalDelayG2 * distortionFractionalInputR2;
            distortionFractionalInputR3 = distortionFractionalDelayG3 * distortionNextInputR + distortionPrevInputR - distortionFractionalDelayG3 * distortionFractionalInputR3;
            const distortionOutputL1 = distortionFractionalInputL1 / (distortionReverse * Math.abs(distortionFractionalInputL1) + distortion);
            const distortionOutputL2 = distortionFractionalInputL2 / (distortionReverse * Math.abs(distortionFractionalInputL2) + distortion);
            const distortionOutputL3 = distortionFractionalInputL3 / (distortionReverse * Math.abs(distortionFractionalInputL3) + distortion);
            const distortionOutputR1 = distortionFractionalInputR1 / (distortionReverse * Math.abs(distortionFractionalInputR1) + distortion);
            const distortionOutputR2 = distortionFractionalInputR2 / (distortionReverse * Math.abs(distortionFractionalInputR2) + distortion);
            const distortionOutputR3 = distortionFractionalInputR3 / (distortionReverse * Math.abs(distortionFractionalInputR3) + distortion);
            distortionNextOutputL += distortionOutputL1 * distortionNextOutputWeight1 + distortionOutputL2 * distortionNextOutputWeight2 + distortionOutputL3 * distortionNextOutputWeight3;
            distortionNextOutputR += distortionOutputR1 * distortionNextOutputWeight1 + distortionOutputR2 * distortionNextOutputWeight2 + distortionOutputR3 * distortionNextOutputWeight3;
            sampleL += distortionOutputL1 * distortionPrevOutputWeight1 + distortionOutputL2 * distortionPrevOutputWeight2 + distortionOutputL3 * distortionPrevOutputWeight3;
            sampleR += distortionOutputR1 * distortionPrevOutputWeight1 + distortionOutputR2 * distortionPrevOutputWeight2 + distortionOutputR3 * distortionPrevOutputWeight3;
            sampleL *= distortionOversampleCompensation;
            sampleR *= distortionOversampleCompensation;
            distortionPrevInputL = distortionNextInputL;
            distortionPrevInputR = distortionNextInputR;
            distortion += distortionDelta;
            distortionDrive += distortionDriveDelta;
            `
            this.effectCodeSavePerTick = `
            instrumentState.distortion = distortion;
            instrumentState.distortionDrive = distortionDrive;

            if (!Number.isFinite(distortionFractionalInputL1) || Math.abs(distortionFractionalInputL1) < epsilon) distortionFractionalInputL1 = 0.0;
            if (!Number.isFinite(distortionFractionalInputL2) || Math.abs(distortionFractionalInputL2) < epsilon) distortionFractionalInputL2 = 0.0;
            if (!Number.isFinite(distortionFractionalInputL3) || Math.abs(distortionFractionalInputL3) < epsilon) distortionFractionalInputL3 = 0.0;
            if (!Number.isFinite(distortionFractionalInputR1) || Math.abs(distortionFractionalInputR1) < epsilon) distortionFractionalInputR1 = 0.0;
            if (!Number.isFinite(distortionFractionalInputR2) || Math.abs(distortionFractionalInputR2) < epsilon) distortionFractionalInputR2 = 0.0;
            if (!Number.isFinite(distortionFractionalInputR3) || Math.abs(distortionFractionalInputR3) < epsilon) distortionFractionalInputR3 = 0.0;
            if (!Number.isFinite(distortionPrevInputL) || Math.abs(distortionPrevInputL) < epsilon) distortionPrevInputL = 0.0;
            if (!Number.isFinite(distortionPrevInputR) || Math.abs(distortionPrevInputR) < epsilon) distortionPrevInputR = 0.0;
            if (!Number.isFinite(distortionNextOutputL) || Math.abs(distortionNextOutputL) < epsilon) distortionNextOutputL = 0.0;
            if (!Number.isFinite(distortionNextOutputR) || Math.abs(distortionNextOutputR) < epsilon) distortionNextOutputR = 0.0;

            instrumentState.distortionFractionalInputL1 = distortionFractionalInputL1;
            instrumentState.distortionFractionalInputL2 = distortionFractionalInputL2;
            instrumentState.distortionFractionalInputL3 = distortionFractionalInputL3;
            instrumentState.distortionFractionalInputR1 = distortionFractionalInputR1;
            instrumentState.distortionFractionalInputR2 = distortionFractionalInputR2;
            instrumentState.distortionFractionalInputR3 = distortionFractionalInputR3;
            instrumentState.distortionPrevInputL = distortionPrevInputL;
            instrumentState.distortionPrevInputR = distortionPrevInputR;
            instrumentState.distortionNextOutputL = distortionNextOutputL;
            instrumentState.distortionNextOutputR = distortionNextOutputR;
            `
        }
        else if (this.type == EffectType.bitcrusher) {
            this.effectCodeLoadPerTick = `
            let bitcrusherPrevInputL = +instrumentState.bitcrusherPrevInputL;
            let bitcrusherPrevInputR = +instrumentState.bitcrusherPrevInputR;
            let bitcrusherCurrentOutputL = +instrumentState.bitcrusherCurrentOutputL;
            let bitcrusherCurrentOutputR = +instrumentState.bitcrusherCurrentOutputR;
            let bitcrusherPhase = +instrumentState.bitcrusherPhase;
            let bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;
            const bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;
            let bitcrusherScale = +instrumentState.bitcrusherScale;
            const bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;
            let bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;
            const bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;
            `

            this.effectCodeApplyPerSample = `
            bitcrusherPhase += bitcrusherPhaseDelta;
            if (bitcrusherPhase < 1.0) {
                bitcrusherPrevInputL = sampleL;
                bitcrusherPrevInputR = sampleR;
                sampleL = bitcrusherCurrentOutputL;
                sampleR = bitcrusherCurrentOutputR;
            } else {
                bitcrusherPhase = bitcrusherPhase % 1.0;
                const ratio = bitcrusherPhase / bitcrusherPhaseDelta;

                const lerpedInputL = sampleL + (bitcrusherPrevInputL - sampleL) * ratio;
                const lerpedInputR = sampleR + (bitcrusherPrevInputR - sampleR) * ratio;
                bitcrusherPrevInputL = sampleL;
                bitcrusherPrevInputR = sampleR;

                const bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;
                const wrappedSampleL = (((lerpedInputL + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;
                const wrappedSampleR = (((lerpedInputR + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;
                const foldedSampleL = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSampleL);
                const foldedSampleR = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSampleR);
                const scaledSampleL = foldedSampleL / bitcrusherScale;
                const scaledSampleR = foldedSampleR / bitcrusherScale;
                const oldValueL = bitcrusherCurrentOutputL;
                const oldValueR = bitcrusherCurrentOutputR;
                const newValueL = (((scaledSampleL > 0 ? scaledSampleL + 1 : scaledSampleL)|0)-.5) * bitcrusherScale;
                const newValueR = (((scaledSampleR > 0 ? scaledSampleR + 1 : scaledSampleR)|0)-.5) * bitcrusherScale;

                sampleL = oldValueL + (newValueL - oldValueL) * ratio;
                sampleR = oldValueR + (newValueR - oldValueR) * ratio;
                bitcrusherCurrentOutputL = newValueL;
                bitcrusherCurrentOutputR = newValueR;
            }
            bitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;
            bitcrusherScale *= bitcrusherScaleScale;
            bitcrusherFoldLevel *= bitcrusherFoldLevelScale;
            `
            this.effectCodeSavePerTick = `
            if (Math.abs(bitcrusherPrevInputL) < epsilon) bitcrusherPrevInputL = 0.0;
            if (Math.abs(bitcrusherPrevInputR) < epsilon) bitcrusherPrevInputR = 0.0;
            if (Math.abs(bitcrusherCurrentOutputL) < epsilon) bitcrusherCurrentOutputL = 0.0;
            if (Math.abs(bitcrusherCurrentOutputR) < epsilon) bitcrusherCurrentOutputR = 0.0;
            instrumentState.bitcrusherPrevInputL = bitcrusherPrevInputL;
            instrumentState.bitcrusherPrevInputR = bitcrusherPrevInputR;
            instrumentState.bitcrusherCurrentOutputL = bitcrusherCurrentOutputL;
            instrumentState.bitcrusherCurrentOutputR = bitcrusherCurrentOutputR;
            instrumentState.bitcrusherPhase = bitcrusherPhase;
            instrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;
            instrumentState.bitcrusherScale = bitcrusherScale;
            instrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;
            `
        }
        else if (this.type == EffectType.eqFilter) {
            this.effectCodeLoadPerTick = `
            let filtersL = instrumentState.eqFiltersL;
            let filtersR = instrumentState.eqFiltersR;
            const filterCount = instrumentState.eqFilterCount|0;
            let initialFilterInputL1 = +instrumentState.initialEqFilterInputL1;
            let initialFilterInputR1 = +instrumentState.initialEqFilterInputR1;
            let initialFilterInputL2 = +instrumentState.initialEqFilterInputL2;
            let initialFilterInputR2 = +instrumentState.initialEqFilterInputR2;
            const applyFilters = Synth.applyFilters;
            `
            this.effectCodeApplyPerSample = `
            const inputSampleL = sampleL;
            const inputSampleR = sampleR;
            sampleL = applyFilters(inputSampleL, initialFilterInputL1, initialFilterInputL2, filterCount, filtersL);
            sampleR = applyFilters(inputSampleR, initialFilterInputR1, initialFilterInputR2, filterCount, filtersR);
            initialFilterInputL2 = initialFilterInputL1;
            initialFilterInputR2 = initialFilterInputR1;
            initialFilterInputL1 = inputSampleL;
            initialFilterInputR1 = inputSampleR;
            `
            this.effectCodeSavePerTick = `
            synth.sanitizeFilters(filtersL);
            synth.sanitizeFilters(filtersR);
            // The filter input here is downstream from another filter so we
            // better make sure it's safe too.
            if (!(initialFilterInputL1 < 100) || !(initialFilterInputL2 < 100) || !(initialFilterInputR1 < 100) || !(initialFilterInputR2 < 100)) {
                initialFilterInputL1 = 0.0;
                initialFilterInputR2 = 0.0;
                initialFilterInputL1 = 0.0;
                initialFilterInputR2 = 0.0;
            }
            if (Math.abs(initialFilterInputL1) < epsilon) initialFilterInputL1 = 0.0;
            if (Math.abs(initialFilterInputL2) < epsilon) initialFilterInputL2 = 0.0;
            if (Math.abs(initialFilterInputR1) < epsilon) initialFilterInputR1 = 0.0;
            if (Math.abs(initialFilterInputR2) < epsilon) initialFilterInputR2 = 0.0;
            instrumentState.initialEqFilterInputL1 = initialFilterInputL1;
            instrumentState.initialEqFilterInputL2 = initialFilterInputL2;
            instrumentState.initialEqFilterInputR1 = initialFilterInputR1;
            instrumentState.initialEqFilterInputR2 = initialFilterInputR2;`
        }
        else if (this.type == EffectType.echo) {
            this.effectCodeLoadPerTick = `

            let echoMult = +instrumentState.echoMult;
            const echoMultDelta = +instrumentState.echoMultDelta;

            const echoDelayLineL = instrumentState.echoDelayLineL;
            const echoDelayLineR = instrumentState.echoDelayLineR;
            const echoMask = (echoDelayLineL.length - 1) >>> 0;
            instrumentState.echoDelayLineDirty = true;

            let echoDelayPos = instrumentState.echoDelayPos & echoMask;
            const echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;
            const echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;
            let echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;
            const echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;

            const echoShelfA1 = +instrumentState.echoShelfA1;
            const echoShelfB0 = +instrumentState.echoShelfB0;
            const echoShelfB1 = +instrumentState.echoShelfB1;
            let echoShelfSampleL = +instrumentState.echoShelfSampleL;
            let echoShelfSampleR = +instrumentState.echoShelfSampleR;
            let echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;
            let echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;
            `
            this.effectCodeApplyPerSample = `
            const echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;
            const echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;
            const echoTapStartL = echoDelayLineL[echoTapStartIndex];
            const echoTapEndL   = echoDelayLineL[echoTapEndIndex];
            const echoTapStartR = echoDelayLineR[echoTapStartIndex];
            const echoTapEndR   = echoDelayLineR[echoTapEndIndex];
            const echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;
            const echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;

            echoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;
            echoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;
            echoShelfPrevInputL = echoTapL;
            echoShelfPrevInputR = echoTapR;
            sampleL += echoShelfSampleL;
            sampleR += echoShelfSampleR;

            echoDelayLineL[echoDelayPos] = sampleL * delayInputMult;
            echoDelayLineR[echoDelayPos] = sampleR * delayInputMult;
            echoDelayPos = (echoDelayPos + 1) & echoMask;
            echoDelayOffsetRatio += echoDelayOffsetRatioDelta;
            echoMult += echoMultDelta;
            `
            this.effectCodeSavePerTick = `
            Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);
            Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);
            instrumentState.echoDelayPos = echoDelayPos;
            instrumentState.echoMult = echoMult;
            instrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;

            if (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;
            if (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;
            if (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;
            if (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;
            instrumentState.echoShelfSampleL = echoShelfSampleL;
            instrumentState.echoShelfSampleR = echoShelfSampleR;
            instrumentState.echoShelfPrevInputL = echoShelfPrevInputL;
            instrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`
        }
    }
}

