var beepbox=function(e){"use strict";
/*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */var t=e&&e.t||function(e,t,i,n){return new(i||(i=Promise))((function(s,a){function r(e){try{l(n.next(e))}catch(e){a(e)}}function o(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,o)}l((n=n.apply(e,t||[])).next())}))};const i=["chip","FM","noise","spectrum","drumset","harmonics","pulse width","picked string","supersaw","chip (custom)","mod","FM (6-op)","additive"];const n=new class{constructor(){this.statusTable={},this.urlTable={},this.totalSamples=0,this.samplesLoaded=0}};class s extends Event{constructor(e,t){super("sampleloaded"),this.totalSamples=e,this.samplesLoaded=t}}class a extends EventTarget{constructor(){super()}}const r=new a;function o(e,i,a,o,l){return t(this,void 0,void 0,(function*(){const t=new AudioContext({sampleRate:l});let p=!1;const c=h.chipWaves[i],d=h.rawChipWaves[i],m=h.rawRawChipWaves[i];fetch(e).then((e=>e.ok?e.arrayBuffer():(n.statusTable[i]=2,Promise.reject(new Error("Couldn't load sample"))))).then((e=>t.decodeAudioData(e))).then((e=>{const l=u(Array.from(e.getChannelData(0))),h=u(Array.from(e.getChannelData(1))),v=f(l),y=f(h);c.samples=v,c.samplesR=y,d.samples=l,d.samplesR=h,m.samples=l,m.samplesR=h,o.isUsingAdvancedLoopControls&&(a.chipWaveLoopStart=null!=o.chipWaveLoopStart?o.chipWaveLoopStart:0,a.chipWaveLoopEnd=null!=o.chipWaveLoopEnd?o.chipWaveLoopEnd:l.length-1,a.chipWaveLoopMode=null!=o.chipWaveLoopMode?o.chipWaveLoopMode:0,a.chipWavePlayBackwards=o.chipWavePlayBackwards,a.chipWaveStartOffset=null!=o.chipWaveStartOffset?o.chipWaveStartOffset:0),n.samplesLoaded++,n.statusTable[i]=1,r.dispatchEvent(new s(n.totalSamples,n.samplesLoaded)),p||(p=!0,t.close())})).catch((s=>{n.statusTable[i]=2,alert("Failed to load "+e+":\n"+s),p||(p=!0,t.close())}))}))}function l(e){return new Promise(((t,i)=>{if(!h.willReloadForCustomSamples){const i=document.createElement("script");i.src=e,document.head.appendChild(i),i.addEventListener("load",(e=>{t()}))}}))}function p(e){const t=h.chipWaves[0].samples,i=h.rawRawChipWaves[0].samples;if(0==e){const e=[{name:"paandorasbox kick",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"paandorasbox snare",expression:3,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"paandorasbox piano1",expression:3,isSampled:!0,isPercussion:!1,extraSampleDetune:2},{name:"paandorasbox WOW",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:0},{name:"paandorasbox overdrive",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-2},{name:"paandorasbox trumpet",expression:3,isSampled:!0,isPercussion:!1,extraSampleDetune:1.2},{name:"paandorasbox saxophone",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-5},{name:"paandorasbox orchestrahit",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:4.2},{name:"paandorasbox detatched violin",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:4.2},{name:"paandorasbox synth",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-.8},{name:"paandorasbox sonic3snare",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"paandorasbox come on",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:0},{name:"paandorasbox choir",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-3},{name:"paandorasbox overdriveguitar",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-6.2},{name:"paandorasbox flute",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-6},{name:"paandorasbox legato violin",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-28},{name:"paandorasbox tremolo violin",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-33},{name:"paandorasbox amen break",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-55},{name:"paandorasbox pizzicato violin",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-11},{name:"paandorasbox tim allen grunt",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-20},{name:"paandorasbox tuba",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:44},{name:"paandorasbox loopingcymbal",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-17},{name:"paandorasbox standardkick",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:-7},{name:"paandorasbox standardsnare",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"paandorasbox closedhihat",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:5},{name:"paandorasbox foothihat",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:4},{name:"paandorasbox openhihat",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:-31},{name:"paandorasbox crashcymbal",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:-43},{name:"paandorasbox pianoC4",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-42.5},{name:"paandorasbox liver pad",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-22.5},{name:"paandorasbox marimba",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-15.5},{name:"paandorasbox susdotwav",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-24.5},{name:"paandorasbox wackyboxtts",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-17.5},{name:"paandorasbox peppersteak_1",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-42.2},{name:"paandorasbox peppersteak_2",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-47},{name:"paandorasbox vinyl_noise",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:-50},{name:"paandorasbeta slap bass",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-56},{name:"paandorasbeta HD EB overdrive guitar",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-60},{name:"paandorasbeta sunsoft bass",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-18.5},{name:"paandorasbeta masculine choir",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-50},{name:"paandorasbeta feminine choir",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-60.5},{name:"paandorasbeta tololoche",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-29.5},{name:"paandorasbeta harp",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-54},{name:"paandorasbeta pan flute",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-58},{name:"paandorasbeta krumhorn",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-46},{name:"paandorasbeta timpani",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-50},{name:"paandorasbeta crowd hey",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-29},{name:"paandorasbeta wario land 4 brass",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-68},{name:"paandorasbeta wario land 4 rock organ",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-63},{name:"paandorasbeta wario land 4 DAOW",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-35},{name:"paandorasbeta wario land 4 hour chime",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-47.5},{name:"paandorasbeta wario land 4 tick",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-12.5},{name:"paandorasbeta kirby kick",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46.5},{name:"paandorasbeta kirby snare",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46.5},{name:"paandorasbeta kirby bongo",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46.5},{name:"paandorasbeta kirby click",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46.5},{name:"paandorasbeta sonor kick",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-28.5},{name:"paandorasbeta sonor snare",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-28.5},{name:"paandorasbeta sonor snare (left hand)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-22.5},{name:"paandorasbeta sonor snare (right hand)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-22.5},{name:"paandorasbeta sonor high tom",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-41.5},{name:"paandorasbeta sonor low tom",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-41.5},{name:"paandorasbeta sonor hihat (closed)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-17},{name:"paandorasbeta sonor hihat (half opened)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-21},{name:"paandorasbeta sonor hihat (open)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-54.5},{name:"paandorasbeta sonor hihat (open tip)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-43.5},{name:"paandorasbeta sonor hihat (pedal)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-28},{name:"paandorasbeta sonor crash",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-51},{name:"paandorasbeta sonor crash (tip)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-50.5},{name:"paandorasbeta sonor ride",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46}];n.totalSamples+=e.length;const a=h.rawRawChipWaves.length;for(const s of e){const e=h.rawRawChipWaves.length,a={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:i},r={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:i},o={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:t};h.rawRawChipWaves[e]=r,h.rawRawChipWaves.dictionary[s.name]=r,h.rawChipWaves[e]=a,h.rawChipWaves.dictionary[s.name]=a,h.chipWaves[e]=o,h.chipWaves.dictionary[s.name]=a,n.statusTable[e]=0,n.urlTable[e]="legacySamples"}l("samples.js").then((()=>l("samples2.js"))).then((()=>l("samples3.js"))).then((()=>l("drumsamples.js"))).then((()=>l("wario_samples.js"))).then((()=>l("kirby_samples.js"))).then((()=>{const e=[u(kicksample),u(snaresample),u(pianosample),u(WOWsample),u(overdrivesample),u(trumpetsample),u(saxophonesample),u(orchhitsample),u(detatchedviolinsample),u(synthsample),u(sonic3snaresample),u(comeonsample),u(choirsample),u(overdrivensample),u(flutesample),u(legatoviolinsample),u(tremoloviolinsample),u(amenbreaksample),u(pizzicatoviolinsample),u(timallengruntsample),u(tubasample),u(loopingcymbalsample),u(kickdrumsample),u(snaredrumsample),u(closedhihatsample),u(foothihatsample),u(openhihatsample),u(crashsample),u(pianoC4sample),u(liverpadsample),u(marimbasample),u(susdotwavsample),u(wackyboxttssample),u(peppersteak1),u(peppersteak2),u(vinyl),u(slapbass),u(hdeboverdrive),u(sunsoftbass),u(masculinechoir),u(femininechoir),u(southtololoche),u(harp),u(panflute),u(krumhorn),u(timpani),u(crowdhey),u(warioland4brass),u(warioland4organ),u(warioland4daow),u(warioland4hourchime),u(warioland4tick),u(kirbykick),u(kirbysnare),u(kirbybongo),u(kirbyclick),u(funkkick),u(funksnare),u(funksnareleft),u(funksnareright),u(funktomhigh),u(funktomlow),u(funkhihatclosed),u(funkhihathalfopen),u(funkhihatopen),u(funkhihatopentip),u(funkhihatfoot),u(funkcrash),u(funkcrashtip),u(funkride)];let t=0;for(const i of e){const e=a+t;h.rawChipWaves[e].samples=i,h.rawRawChipWaves[e].samples=i,h.chipWaves[e].samples=f(i),n.statusTable[e]=1,n.samplesLoaded++,r.dispatchEvent(new s(n.totalSamples,n.samplesLoaded)),t++}}))}else if(1==e){const e=[{name:"chronoperc1final",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"synthkickfm",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"mcwoodclick1",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"acoustic snare",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0}];n.totalSamples+=e.length;const a=h.rawRawChipWaves.length;for(const s of e){const e=h.rawRawChipWaves.length,a={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:i},r={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:i},o={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:t};h.rawRawChipWaves[e]=r,h.rawRawChipWaves.dictionary[s.name]=r,h.rawChipWaves[e]=a,h.rawChipWaves.dictionary[s.name]=a,h.chipWaves[e]=o,h.chipWaves.dictionary[s.name]=a,n.statusTable[e]=0,n.urlTable[e]="nintariboxSamples"}l("nintaribox_samples.js").then((()=>{const e=[u(chronoperc1finalsample),u(synthkickfmsample),u(woodclicksample),u(acousticsnaresample)];let t=0;for(const i of e){const e=a+t;h.rawChipWaves[e].samples=i,h.rawRawChipWaves[e].samples=i,h.chipWaves[e].samples=f(i),n.statusTable[e]=1,n.samplesLoaded++,r.dispatchEvent(new s(n.totalSamples,n.samplesLoaded)),t++}}))}else if(2==e){const e=[{name:"cat",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-3},{name:"gameboy",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:7},{name:"mario",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:0},{name:"drum",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:4},{name:"yoshi",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-16},{name:"star",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-16},{name:"fire flower",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-1},{name:"dog",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-1},{name:"oink",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:3},{name:"swan",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:1},{name:"face",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-12}];n.totalSamples+=e.length;const a=h.rawRawChipWaves.length;for(const s of e){const e=h.rawRawChipWaves.length,a={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:i},r={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:i},o={index:e,name:s.name,expression:s.expression,isSampled:s.isSampled,isPercussion:s.isPercussion,extraSampleDetune:s.extraSampleDetune,samples:t};h.rawRawChipWaves[e]=r,h.rawRawChipWaves.dictionary[s.name]=r,h.rawChipWaves[e]=a,h.rawChipWaves.dictionary[s.name]=a,h.chipWaves[e]=o,h.chipWaves.dictionary[s.name]=a,n.statusTable[e]=0,n.urlTable[e]="marioPaintboxSamples"}l("mario_paintbox_samples.js").then((()=>{const e=[u(catpaintboxsample),u(gameboypaintboxsample),u(mariopaintboxsample),u(drumpaintboxsample),u(yoshipaintboxsample),u(starpaintboxsample),u(fireflowerpaintboxsample),u(dogpaintbox),u(oinkpaintbox),u(swanpaintboxsample),u(facepaintboxsample)];let t=0;for(const i of e){const e=a+t;h.rawChipWaves[e].samples=i,h.rawRawChipWaves[e].samples=i,h.chipWaves[e].samples=f(i),n.statusTable[e]=1,n.samplesLoaded++,r.dispatchEvent(new s(n.totalSamples,n.samplesLoaded)),t++}}))}else console.log("invalid set of built-in samples")}class h{}function u(e){let t=0;for(let i=0;i<e.length;i++)t+=e[i];const i=t/e.length;for(let t=0;t<e.length;t++)e[t]-=i;return f(e),e.push(0),new Float32Array(e)}function c(e){let t=0;u(e);for(let i=0;i<e.length-1;i++)t+=Math.abs(e[i]);const i=t/(e.length-1);for(let t=0;t<e.length-1;t++)e[t]=e[t]/i;return new Float32Array(e)}function f(e){let t=0,i=new Float32Array(e.length);for(let n=0;n<e.length;n++)i[n]=t,t+=e[n];return i}function d(e){let t=0;for(let i=0;i<e.length;i++){const n=e[i];e[i]=t,t+=n}}function m(e){return e/(2*h.pulseWidthRange)}function v(e,t,i){let n=h.chipNoises[e].samples;if(null==n){if(n=new Float32Array(h.chipNoiseLength+1),h.chipNoises[e].samples=n,0==e){let e=1;for(let t=0;t<h.chipNoiseLength;t++){n[t]=2*(1&e)-1;let i=e>>1;1==(e+i&1)&&(i+=16384),e=i}}else if(1==e)for(let e=0;e<h.chipNoiseLength;e++)n[e]=2*Math.random()-1;else if(2==e){let e=1;for(let t=0;t<h.chipNoiseLength;t++){n[t]=2*(1&e)-1;let i=e>>1;1==(e+i&1)&&(i+=32768),e=i}}else if(3==e){let e=1;for(let t=0;t<h.chipNoiseLength;t++){n[t]=2*(1&e)-1;let i=e>>1;1==(e+i&1)&&(i+=40),e=i}}else if(4==e)y(n,h.chipNoiseLength,10,11,1,1,0),y(n,h.chipNoiseLength,11,14,.6578,.6578,0),t(n,h.chipNoiseLength),i(n,1/Math.sqrt(h.chipNoiseLength));else if(5==e)for(var s=1,a=0;a<h.chipNoiseLength;a++){n[a]=2*(1&s)-1,1==(s+(r=s>>1)&1)&&(r+=40),s=r}else if(6==e)y(n,h.chipNoiseLength,1,10,1,1,0),y(n,h.chipNoiseLength,20,14,-2,-2,0),t(n,h.chipNoiseLength),i(n,1/Math.sqrt(h.chipNoiseLength));else if(7==e)for(s=1,a=0;a<h.chipNoiseLength;a++){n[a]=4*(1&s)*(14*Math.random()+1)-8,1==(s+(r=s>>1)&1)&&(r+=60),s=r}else if(8==e)for(s=1,a=0;a<h.chipNoiseLength;a++){n[a]=(1&s)/2-.5,1==(s+(r=s>>1)&1)&&(r-=40),s=r}else if(9==e){let e=1;for(let t=0;t<h.chipNoiseLength;t++){n[t]=2*(1&e)-1.1;let i=e>>1;1==(e+i&1)&&(i+=131080),e=i}}else if(10==e)for(let e=0;e<h.chipNoiseLength;e++)n[e]=Math.round(Math.random());else if(11==e)for(s=1,a=0;a<h.chipNoiseLength;a++){var r;n[a]=Math.round(1&s),1==(s+(r=s>>1)&1)&&(r-=40),s=r}else if(12==e)for(let e=0;e<h.chipNoiseLength;e++){var o=Math.random();n[e]=Math.pow(o,Math.clz32(o))}else if(13==e){var l,p,u,c,f=0,d=0,m=0;f=d=m=l=p=u=c=0;for(let e=0;e<h.chipNoiseLength;e++){f=.99886*f+.0555179*(b=2*Math.random()-1),d=.99332*d+.0750759*b,m=.969*m+.153852*b,l=.8665*l+.3104856*b,p=.55*p+.5329522*b,u=-.7616*u-.016898*b,n[e]=f+d+m+l+p+u+c+.5362*b,n[e]*=.44,c=.115926*b}}else{if(14!=e)throw new Error("Unrecognized drum index: "+e);var v=0;for(let e=0;e<h.chipNoiseLength;e++){var b=2*Math.random()-1;n[e]=(v+.02*b)/1.02,v=n[e],n[e]*=14}}n[h.chipNoiseLength]=n[0]}return n}function y(e,t,i,n,s,a,r){const o=0|Math.pow(2,i),l=Math.min(t>>1,0|Math.pow(2,n)),p=v(0,null,null);let h=0;for(let u=o;u<l;u++){let o=s+(a-s)*(Math.log2(u)-i)/(n-i),l=Math.pow(2,7*(o-1)+1)*o;l*=Math.pow(u/2048,r),h+=l,l*=p[u];const c=.61803398875*u*u*Math.PI*2;e[u]=Math.cos(c)*l,e[t-u]=Math.sin(c)*l}return h}function b(e=0){const t=new Float32Array(h.sineWaveLength+1),i=h.sineWaveLength/4;for(let n=0;n<h.sineWaveLength+1;n++)t[n]=2*+(Math.abs(n-i)<e*h.sineWaveLength/2||Math.abs(n-h.sineWaveLength-i)<e*h.sineWaveLength/2)-1;return t}function g(e=!1){const t=new Float32Array(h.sineWaveLength+1);for(let i=0;i<h.sineWaveLength+1;i++)t[i]=2*(i+h.sineWaveLength/4)/h.sineWaveLength%2-1,t[i]=e?-t[i]:t[i];return t}function S(e,t,i){let n=h.arpeggioPatterns[e-1];return null!=n?(2==e&&0==t&&(n=[0,0,1,1]),n[i%n.length]):i%e}function w(e){const t={};for(let i=0;i<e.length;i++){const n=e[i];n.index=i,t[n.name]=n}const i=e;return i.dictionary=t,i}function M(e){return 0!=(1024&e)}function k(e){return 0!=(2048&e)}function F(e){return 0!=(128&e)}function x(e){return 0!=(256&e)}function q(e){return 0!=(512&e)}function I(e){return 0!=(32&e)}function P(e){return 0!=(8&e)}function E(e){return 0!=(16&e)}function T(e){return 0!=(4&e)}function z(e){return 0!=(2&e)}function D(e){return 0!=(64&e)}function H(e){return 0!=(1&e)}h.thresholdVal=-10,h.kneeVal=40,h.ratioVal=12,h.attackVal=0,h.releaseVal=.25,h.willReloadForCustomSamples=!1,h.jsonFormat="slarmoosbox",h.scales=w([{name:"Free",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]},{name:"Major",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"Minor",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Mixolydian",realName:"mixolydian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!0,!1]},{name:"Lydian",realName:"lydian",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0]},{name:"Dorian",realName:"dorian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!0,!1]},{name:"Phrygian",realName:"phrygian",flags:[!0,!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Locrian",realName:"locrian",flags:[!0,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1]},{name:"Lydian Dominant",realName:"lydian dominant",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!0,!1]},{name:"Phrygian Dominant",realName:"phrygian dominant",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!0,!1]},{name:"Harmonic Major",realName:"harmonic major",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"Harmonic Minor",realName:"harmonic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!1,!0]},{name:"Melodic Minor",realName:"melodic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1,!0]},{name:"Blues Major",realName:"blues major",flags:[!0,!1,!0,!0,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"Blues",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"Altered",realName:"altered",flags:[!0,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Major Pentatonic",realName:"major pentatonic",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"Minor Pentatonic",realName:"minor pentatonic",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"Whole Tone",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Octatonic",realName:"octatonic",flags:[!0,!1,!0,!0,!1,!0,!0,!1,!0,!0,!1,!0]},{name:"Hexatonic",realName:"hexatonic",flags:[!0,!1,!1,!0,!0,!1,!1,!0,!0,!1,!1,!0]},{name:"No Dabbing (MB)",realName:"no dabbing",flags:[!0,!0,!1,!0,!0,!0,!0,!0,!0,!1,!0,!1]},{name:"Jacked Toad (TB)",realName:"jacked toad",flags:[!0,!1,!0,!0,!1,!0,!0,!0,!0,!1,!0,!0]},{name:"Test Scale (TB)",realName:"**t",flags:[!0,!0,!1,!1,!1,!0,!0,!1,!1,!0,!0,!1]},{name:"Custom",realName:"custom",flags:[!0,!1,!0,!0,!1,!1,!1,!0,!0,!1,!0,!0]}]),h.keys=w([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),h.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],h.tempoMin=1,h.tempoMax=2e3,h.octaveMin=-2,h.octaveMax=2,h.echoDelayRange=24,h.echoDelayStepTicks=4,h.echoSustainRange=8,h.echoShelfHz=4e3,h.echoShelfGain=Math.pow(2,-.5),h.reverbShelfHz=8e3,h.reverbShelfGain=Math.pow(2,-1.5),h.reverbRange=32,h.reverbDelayBufferSize=16384,h.reverbDelayBufferMask=h.reverbDelayBufferSize-1,h.beatsPerBarMin=1,h.beatsPerBarMax=64,h.barCountMin=1,h.barCountMax=1024,h.instrumentCountMin=1,h.layeredInstrumentCountMax=10,h.patternInstrumentCountMax=10,h.partsPerBeat=24,h.ticksPerPart=2,h.ticksPerArpeggio=3,h.arpeggioPatterns=[[0],[0,1],[0,1,2,1],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5],[0,1,2,3,4,5,6],[0,1,2,3,4,5,6,7]],h.rhythms=w([{name:"÷3 (triplets)",stepsPerBeat:3,roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,roundUpThresholds:null},{name:"÷12",stepsPerBeat:12,roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,roundUpThresholds:null}]),h.instrumentTypeNames=["chip","FM","noise","spectrum","drumset","harmonics","PWM","Picked String","supersaw","custom chip","mod","FM6op","additive"],h.instrumentTypeHasSpecialInterval=[!0,!0,!1,!1,!1,!0,!1,!1,!1,!1,!1],h.chipBaseExpression=.03375,h.fmBaseExpression=.03,h.noiseBaseExpression=.19,h.spectrumBaseExpression=.3,h.drumsetBaseExpression=.45,h.harmonicsBaseExpression=.025,h.pwmBaseExpression=.04725,h.supersawBaseExpression=.061425,h.pickedStringBaseExpression=.025,h.additiveBaseExpression=.012,h.distortionBaseVolume=.011,h.bitcrusherBaseVolume=.01,h.rawChipWaves=w([{name:"rounded",expression:.94,samples:u([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",expression:1,samples:u([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15])},{name:"square",expression:.5,samples:u([1,-1])},{name:"1/4 pulse",expression:.5,samples:u([1,-1,-1,-1])},{name:"1/8 pulse",expression:.5,samples:u([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",expression:.65,samples:u([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",expression:.5,samples:u([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",expression:.4,samples:u([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",expression:.4,samples:u([1,-1,1,-1,1,0])},{name:"sine",expression:.88,samples:c([8,9,11,12,13,14,15,15,15,15,14,14,13,11,10,9,7,6,4,3,2,1,0,0,0,0,1,1,2,4,5,6])},{name:"flute",expression:.8,samples:c([3,4,6,8,10,11,13,14,15,15,14,13,11,8,5,3])},{name:"harp",expression:.8,samples:c([0,3,3,3,4,5,5,6,7,8,9,11,11,13,13,15,15,14,12,11,10,9,8,7,7,5,4,3,2,1,0,0])},{name:"sharp clarinet",expression:.38,samples:c([0,0,0,1,1,8,8,9,9,9,8,8,8,8,8,9,9,7,9,9,10,4,0,0,0,0,0,0,0,0,0,0])},{name:"soft clarinet",expression:.45,samples:c([0,1,5,8,9,9,9,9,9,9,9,11,11,12,13,12,10,9,7,6,4,3,3,3,1,1,1,1,1,1,1,1])},{name:"alto sax",expression:.3,samples:c([5,5,6,4,3,6,8,7,2,1,5,6,5,4,5,7,9,11,13,14,14,14,14,13,10,8,7,7,4,3,4,2])},{name:"bassoon",expression:.35,samples:c([9,9,7,6,5,4,4,4,4,5,7,8,9,10,11,13,13,11,10,9,7,6,4,2,1,1,1,2,2,5,11,14])},{name:"trumpet",expression:.22,samples:c([10,11,8,6,5,5,5,6,7,7,7,7,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,7,8,9,11,14])},{name:"electric guitar",expression:.2,samples:c([11,12,12,10,6,6,8,0,2,4,8,10,9,10,1,7,11,3,6,6,8,13,14,2,0,12,8,4,13,11,10,13])},{name:"organ",expression:.2,samples:c([11,10,12,11,14,7,5,5,12,10,10,9,12,6,4,5,13,12,12,10,12,5,2,2,8,6,6,5,8,3,2,1])},{name:"pan flute",expression:.35,samples:c([1,4,7,6,7,9,7,7,11,12,13,15,13,11,11,12,13,10,7,5,3,6,10,7,3,3,1,0,1,0,1,0])},{name:"glitch",expression:.5,samples:u},{name:"trapezoid",expression:1,samples:u([1/15,.4,10/15,14/15,1,1,1,1,1,1,1,1,14/15,10/15,.4,1/15,-1/15,-.4,-10/15,-14/15,-1,-1,-1,-1,-1,-1,-1,-1,-14/15,-10/15,-.4,-1/15])},{name:"modbox 10% pulse",expression:.5,samples:c([1,-1,-1,-1,-1,-1,-1,-1,-1,-1])},{name:"modbox sunsoft bass",expression:1,samples:c([0,.1875,.3125,.5625,.5,.75,.875,1,1,.6875,.5,.625,.625,.5,.375,.5625,.4375,.5625,.4375,.4375,.3125,.1875,.1875,.375,.5625,.5625,.5625,.5625,.5625,.4375,.25,0])},{name:"modbox loud pulse",expression:.5,samples:c([1,.7,.1,.1,0,0,0,0,0,.1,.2,.15,.25,.125,.215,.345,4])},{name:"modbox sax",expression:.5,samples:c([1/15,.2,5/15,9,.06])},{name:"modbox guitar",expression:.5,samples:c([-.5,3.5,3,-.5,-.25,-1])},{name:"modbox sine",expression:.5,samples:c([0,.05,.125,.2,.25,.3,.425,.475,.525,.625,.675,.725,.775,.8,.825,.875,.9,.925,.95,.975,.98,.99,.995,1,.995,.99,.98,.975,.95,.925,.9,.875,.825,.8,.775,.725,.675,.625,.525,.475,.425,.3,.25,.2,.125,.05,0,-.05,-.125,-.2,-.25,-.3,-.425,-.475,-.525,-.625,-.675,-.725,-.775,-.8,-.825,-.875,-.9,-.925,-.95,-.975,-.98,-.99,-.995,-1,-.995,-.99,-.98,-.975,-.95,-.925,-.9,-.875,-.825,-.8,-.775,-.725,-.675,-.625,-.525,-.475,-.425,-.3,-.25,-.2,-.125,-.05])},{name:"modbox atari bass",expression:.5,samples:c([1,1,1,1,0,1,0,1,1,0,0,1,0,0,0])},{name:"modbox atari pulse",expression:.5,samples:c([1,0,1,1,1,1,1,1,1,1,1,1,1,1,1])},{name:"modbox 1% pulse",expression:.5,samples:c([1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1])},{name:"modbox curved sawtooth",expression:.5,samples:c([1,.5,1/3,1/4])},{name:"modbox viola",expression:.45,samples:c([-.9,-1,-.85,-.775,-.7,-.6,-.5,-.4,-.325,-.225,-.2,-.125,-.1,-.11,-.125,-.15,-.175,-.18,-.2,-.21,-.22,-.21,-.2,-.175,-.15,-.1,-.5,.75,.11,.175,.2,.25,.26,.275,.26,.25,.225,.2,.19,.18,.19,.2,.21,.22,.23,.24,.25,.26,.275,.28,.29,.3,.29,.28,.27,.26,.25,.225,.2,.175,.15,.1,.075,0,-.01,-.025,.025,.075,.2,.3,.475,.6,.75,.85,.85,1,.99,.95,.8,.675,.475,.275,.01,-.15,-.3,-.475,-.5,-.6,-.71,-.81,-.9,-1,-.9])},{name:"modbox brass",expression:.45,samples:c([-1,-.95,-.975,-.9,-.85,-.8,-.775,-.65,-.6,-.5,-.475,-.35,-.275,-.2,-.125,-.05,0,.075,.125,.15,.2,.21,.225,.25,.225,.21,.2,.19,.175,.125,.1,.075,.06,.05,.04,.025,.04,.05,.1,.15,.225,.325,.425,.575,.7,.85,.95,1,.9,.675,.375,.2,.275,.4,.5,.55,.6,.625,.65,.65,.65,.65,.64,.6,.55,.5,.4,.325,.25,.15,.05,-.05,-.15,-.275,-.35,-.45,-.55,-.65,-.7,-.78,-.825,-.9,-.925,-.95,-.975])},{name:"modbox acoustic bass",expression:.5,samples:c([1,0,.1,-.1,-.2,-.4,-.3,-1])},{name:"modbox lyre",expression:.45,samples:c([1,-1,4,2.15,4.13,5.15,0,-.05,1])},{name:"modbox ramp pulse",expression:.5,samples:c([6.1,-2.9,1.4,-2.9])},{name:"modbox piccolo",expression:.5,samples:c([1,4,2,1,-.1,-1,-.12])},{name:"modbox squaretooth",expression:.5,samples:c([.2,1,2.6,1,0,-2.4])},{name:"modbox flatline",expression:1,samples:c([1,.9,.8,.7,.6,.5,.4,.3,.2,.1,0,.1,.2,.3,.4,.5,.6,.7,.8,.9])},{name:"modbox pnryshk a (u5)",expression:.4,samples:c([1,.9,.8,.7,.6,.5,.4,.3,.2,.1,0])},{name:"modbox pnryshk b (riff)",expression:.5,samples:c([1,-.9,.8,-.7,.6,-.5,.4,-.3,.2,-.1,0,-.1,.2,-.3,.4,-.5,.6,-.7,.8,-.9,1])},{name:"sandbox shrill lute",expression:.94,samples:c([1,1.5,1.25,1.2,1.3,1.5])},{name:"sandbox bassoon",expression:.5,samples:c([1,-1,1,1,1,1,1,1,1,1,1,1,0])},{name:"sandbox shrill bass",expression:.5,samples:c([0,1,0,0,1,0,1,0,0,0])},{name:"sandbox nes pulse",expression:.4,samples:c([2.1,-2.2,1.2,3])},{name:"sandbox saw bass",expression:.25,samples:c([1,1,1,1,0,2,1,2,3,1,-2,1,4,1,4,2,1,6,-3,4,2,1,5,1,4,1,5,6,7,1,6,1,4,1,9])},{name:"sandbox euphonium",expression:.3,samples:c([0,1,2,1,2,1,4,2,5,0,-2,1,5,1,2,1,2,4,5,1,5,-2,5,10,1])},{name:"sandbox shrill pulse",expression:.3,samples:c([2,0,4,1,4,6,7,3])},{name:"sandbox r-sawtooth",expression:.2,samples:c([6.1,-2.9,1.4,-2.9])},{name:"sandbox recorder",expression:.2,samples:c([5,-5.1,4,-4.1,3,-3.1,2,-2.1,1,-1.1,6])},{name:"sandbox narrow saw",expression:1.2,samples:c([.1,-1.3,.13/-.3,-.26,.13/-.7,.13/-.9,.13/-.11,.13/-.31,.13/-.51,.13/-.71,.13/-.91,.13/-.12,-.40625,-.25,.13/-.72,.13/-.92,-1,1,.13/.92,.13/.72,.25,.40625,.13/.12,.13/.91,.13/.71,.13/.51,.13/.31,.13/.11,.13/.9,.13/.7,.26,.13/.3,.13])},{name:"sandbox deep square",expression:1,samples:c([1,2.25,1,-1,-2.25,-1])},{name:"sandbox ring pulse",expression:1,samples:c([1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1])},{name:"sandbox double sine",expression:1,samples:c([1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.8,1.7,1.6,1.5,1.4,1.3,1.2,1.1,1,0,-1,-1.1,-1.2,-1.3,-1.4,-1.5,-1.6,-1.7,-1.8,-1.9,-1.8,-1.7,-1.6,-1.5,-1.4,-1.3,-1.2,-1.1,-1])},{name:"sandbox contrabass",expression:.5,samples:c([4.2,6.9,1.337,6.66])},{name:"sandbox double bass",expression:.4,samples:c([0,.1875,.3125,.5625,.5,.75,.875,1,-1,-.6875,-.5,-.625,-.625,-.5,-.375,-.5625,-.4375,-.5625,-.4375,-.4375,-.3125,-.1875,.1875,.375,.5625,-.5625,.5625,.5625,.5625,.4375,.25,0])},{name:"haileybox test1",expression:.5,samples:c([1,.5,-1])},{name:"brucebox pokey 4bit lfsr",expression:.5,samples:c([1,-1,-1,-1,1,1,1,1,-1,1,-1,1,1,-1,-1])},{name:"brucebox pokey 5step bass",expression:.5,samples:c([1,-1,1,-1,1])},{name:"brucebox isolated spiky",expression:.5,samples:c([1,-1,1,-1,1,-1])},{name:"nerdbox unnamed 1",expression:.5,samples:c([.2,4,.7,-.4,-1,.5,-.5/.6])},{name:"nerdbox unnamed 2",expression:.5,samples:c([2,5/55,-9,1,-55,18.5/-26])},{name:"zefbox semi-square",expression:1,samples:c([1,1.5,2,2.5,2.5,2.5,2,1.5,1])},{name:"zefbox deep square",expression:1,samples:c([1,2.25,1,-1,-2.25,-1])},{name:"zefbox squaretal",expression:.7,samples:c([1.5,1,1.5,-1.5,-1,-1.5])},{name:"zefbox saw wide",expression:.65,samples:c([0,-.4,-.8,-1.2,-1.6,-2,0,-.4,-.8,-1.2,-1.6])},{name:"zefbox saw narrow",expression:.65,samples:c([1,.5,1,.5,1,.5,1,2,1,2,1])},{name:"zefbox deep sawtooth",expression:.5,samples:c([0,2,3,4,4.5,5,5.5,6,6.25,6.5,6.75,7,6.75,6.5,6.25,6,5.5,5,4.5,4,3,2,1])},{name:"zefbox sawtal",expression:.3,samples:c([1.5,1,1.25,-.5,1.5,-.5,0,-1.5,1.5,0,.5,-1.5,.5,1.25,-1,-1.5])},{name:"zefbox deep sawtal",expression:.7,samples:c([.75,.25,.5,-.5,.5,-.5,-.25,-.75])},{name:"zefbox pulse",expression:.5,samples:c([1,-2,-2,-1.5,-1.5,-1.25,-1.25,-1,-1])},{name:"zefbox triple pulse",expression:.4,samples:c([1,1,1,1,1,-1,-1,1.5,1,1,1,1,-1,-1,-1,1.5])},{name:"zefbox high pulse",expression:.2,samples:c([1,-2,2,-3,3,-4,5,-4,3,-3,2,-2,1])},{name:"zefbox deep pulse",expression:.2,samples:c([1,2,2,-2,-2,-3,-4,-4,-5,-5,-5,-5,0,-1,-2])},{name:"wackybox guitar string",expression:.6,samples:c([0,63,63,63,63,19,63,63,63,63,63,63,63,63,63,63,11,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,27,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,34,63,63,63,63])},{name:"wackybox intense",expression:.6,samples:c([36,25,33,35,18,51,22,40,27,37,31,33,25,29,41,23,31,31,45,20,37,23,29,26,42,29,33,26,31,27,40,25,40,26,37,24,41,32,0,32,33,29,32,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31])},{name:"wackybox buzz wave",expression:.6,samples:c([0,1,1,2,4,4,4,4,5,5,6,6,6,7,8,8,8,9,9,9,9,9,9,8,8,8,11,15,23,62,61,60,58,56,56,54,53,52,50,49,48,47,47,45,45,45,44,44,43,43,42,42,42,42,42,42,42,42,42,42,42,43,43,53])},{name:"todbox 1/3 pulse",expression:.5,samples:u([1,-1,-1])},{name:"todbox 1/5 pulse",expression:.5,samples:u([1,-1,-1,-1,-1])},{name:"todbox slap bass",expression:.5,samples:c([1,.5,0,.5,1.25,.5,-.25,.1,-.1,.1,1.1,2.1,3,3.5,2.9,3.3,2.7,2.9,2.3,2,1.9,1.8,1,.7,.9,.8,.4,.1,0,.2,.4,.6,.5,.8])},{name:"todbox harsh wave",expression:.45,samples:c([1,-1,-1,-1,.5,.5,.5,.7,.39,1.3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1])},{name:"todbox accordian",expression:.5,samples:c([0,1,1,2,2,1.5,1.5,.8,0,-2,-3.25,-4,-4.5,-5.5,-6,-5.75,-5.5,-5,-5,-5,-6,-6,-6,-5,-4,-3,-2,-1,.75,1,2,3,4,5,6,6.5,7.5,8,7.75,6,5.25,5,5,5,5,5,4.25,3.75,3.25,2.75,1.25,-.75,-2,-.75,1.25,1.25,2,2,2,2,1.5,-1,-2,-1,1.5,2,2.75,2.75,2.75,3,2.75,-1,-2,-2.5,-2,-1,-2.25,-2.75,-2,-3,-1.75,1,2,3.5,4,5.25,6,8,9.75,10,9.5,9,8.5,7.5,6.5,5.25,5,4.5,4,4,4,3.25,2.5,2,1,-.5,-2,-3.5,-4,-4,-4,-3.75,-3,-2,-1])},{name:"todbox beta banana wave",expression:.8,samples:c([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0])},{name:"todbox beta test wave",expression:.5,samples:c([56,0,-52,16,3,3,2,-35,20,147,-53,0,0,5,-6])},{name:"todbox beta real snare",expression:1,samples:c([0,-.01208,-.02997,-.04382,-.06042,-.07529,-.09116,-.10654,-.12189,-.13751,-.15289,-.16849,-.18387,-.19974,-.21484,-.23071,-.24557,-.26144,-.27731,-.29141,-.3035,-.32416,-.34406,-.32947,-.31158,-.33725,-.37579,-.39746,-.40201,-.40906,-.4418,-.47229,-.47379,-.47733,-.45239,-.33954,-.22894,-.22443,-.32138,-.46371,-.57178,-.61081,-.59998,-.61459,-.62189,-.43979,-.19217,-.12643,-.17252,-.20956,-.20981,-.19217,-.22845,-.34332,-.50629,-.64307,-.72922,-.81384,-.87857,-.90149,-.88687,-.86169,-.87781,-.80478,-.52493,-.31308,-.33249,-.39395,-.39017,-.30301,-.19949,-.13071,-.02493,.14307,.34961,.52542,.63223,.68613,.7471,.87305,.98184,.98889,.97052,.99066,.99747,.99344,.99469,.99393,.9957,.99393,.99521,.99469,.9942,.99521,.9942,.99521,.99469,.99469,.99521,.9942,.99545,.99445,.99469,.99493,.9942,.99521,.99393,.99493,.99469,.99445,.9957,.99445,.99521,.99469,.99469,.99521,.9942,.99545,.99445,.99445,.99493,.9942,.99545,.9942,.99493,.99493,.9942,.99545,.99445,.99521,.99469,.99445,.99545,.99368,.99393,.99445,.99268,.97983,.97229,.95944,.88486,.76773,.64481,.53098,.39847,.19318,-.03827,-.20325,-.39319,-.68765,-.88461,-.93448,-.96069,-.97681,-.98715,-.99042,-.99142,-.99091,-.99142,-.99219,-.99091,-.99219,-.99066,-.99142,-.99142,-.99118,-.99191,-.99066,-.99191,-.99142,-.99142,-.99191,-.99091,-.99219,-.99118,-.99142,-.99167,-.99091,-.99219,-.99091,-.99167,-.99142,-.99091,-.99191,-.99091,-.99191,-.99142,-.99118,-.99191,-.99066,-.99191,-.99118,-.99142,-.99191,-.99066,-.99191,-.99091,-.99167,-.99191,-.99118,-.99219,-.99091,-.99191,-.99142,-.99142,-.99243,-.98865,-.98764,-.99219,-.98083,-.92517,-.9277,-.91486,-.59042,-.15189,.02945,.05667,.06195,.00629,-.18008,-.56497,-.8801,-.9277,-.92871,-.97705,-.99167,-.98663,-.99118,-.99042,-.99219,-.99142,-.99118,-.98941,-.99219,-1,-.9758,-.95993,-.99948,-.98236,-.84659,-.7486,-.70679,-.59747,-.48035,-.41687,-.36826,-.29745,-.18185,-.06219,.02164,.07907,.13123,.18033,.1962,.15692,.14053,.20251,.2753,.30905,.29092,.27252,.30402,.32416,.32214,.35239,.3967,.43198,.4942,.58487,.64154,.65967,.6705,.67026,.66522,.6554,.66119,.70627,.75842,.78738,.7894,.78763,.80402,.85944,.94559,.9899,.9816,.98007,.99368,.99393,.98538,.9758,.97101,.93802,.81812,.64633,.46649,.28613,.14685,.08966,.12543,.20325,.24557,.18866,.02795,-.20175,-.44205,-.58713,-.57629,-.41385,-.14255,.18033,.47882,.68311,.72314,.62064,.48309,.43073,.53577,.72794,.9025,.97354,.97,.98083,.99191,.99319,.99493,.99393,.99521,.99393,.99545,.9942,.99493,.99493,.99445,.99545,.9942,.99545,.99243,.98917,.98386,.97781,.95844,.89066,.81561,.78134,.77277,.75995,.73022,.67126,.57178,.47,.38361,.29419,.20703,.14734,.15866,.25162,.35818,.45062,.5675,.69748,.81232,.89697,.95062,.97656,.98615,.99191,.99219,.99243,.99368,.99368,.97028,.95566,.94559,.82617,.59973,.38361,.23901,.15338,.12921,.11206,.04382,-.12946,-.43552,-.72644,-.89847,-.95465,-.95541,-.97229,-.99268,-.99319,-.9884,-.99142,-.99167,-.99091,-.9884,-.98965,-.99368,-.97455,-.9501,-.94684,-.96219,-.98514,-.99243,-.98889,-.98917,-.99142,-.99219,-.99091,-.99191,-.99142,-.99142,-.99191,-.99066,-.99167,-.99091,-.99142,-.99191,-.99091,-.99191,-.99091,-.99167,-.99167,-.99091,-.99219,-.99091,-.99191,-.99142,-.99118,-.99191,-.99066,-.99191,-.99091,-.99118,-.99243,-.98941,-.98462,-.96976,-.9632,-.96194,-.87305,-.66196,-.44809,-.29495,-.18085,-.11813,-.11334,-.18564,-.34885,-.58237,-.8045,-.93726,-.97806,-.97354,-.97531,-.9899,-.99368,-.98941,-.99219,-.99091,-.99142,-.99167,-.99091,-.99191,-.99118,-.99219,-.98236,-.97781,-.97656,-.95135,-.87204,-.71335,-.52139,-.34232,-.17783,-.00906,.14886,.3045,.48889,.67404,.8403,.94128,.97681,.98462,.98337,.99142,.99521,.99493,.9942,.99445,.99521,.99393,.99545,.99445,.99521,.99521,.99445,.9957,.99445,.99521,.99469,.99445,.99521,.9942,.99521,.99445,.99445,.99521,.99445,.99545,.99445,.99469,.99493,.99393,.99493,.99445,.99393,.98285,.97781,.97479,.92844,.82114,.66095,.52417,.46826,.46722,.47934,.47379,.47076,.48209,.42014,.25439,.10074,-.00302,-.08966,-.16068,-.21436,-.2204,-.15137,-.00476,.18536,.37631,.52292,.62164,.70425,.74835,.72366,.63928,.52567,.40805,.35666,.42896,.60175,.802,.92743,.96548,.97632,.98337,.99066,.99521,.9942,.99368,.99292,.9884,.98083,.96774,.93323,.8544,.6947,.47202,.20425,-.0889,-.36423,-.60025,-.77481,-.90173,-.96017,-.97028,-.98108,-.9884,-.99219,-.9899,-.99219,-.99142,-.99142,-.99219,-.99091,-.99243,-.99066,-.99142,-.99142,-.99118,-.99191,-.99066,-.99167,-.99142,-.99142,-.99219,-.99091,-.99191,-.99118,-.99142,-.99191,-.99091,-.99191,-.99091,-.99167,-.99191,-.99118,-.99219,-.99091,-.99167,-.99142,-.99142,-.99219,-.99091,-.99191,-.99142,-.99118,-.98917,-.99042,-.99445,-.9733,-.9559,-.96219,-.8967,-.72241,-.55112,-.44809,-.39319,-.37833,-.35641,-.2627,-.1423,-.11282,-.13525,-.11536,-.09671,-.11511,-.1806,-.26874,-.33374,-.42215,-.51358,-.44785,-.3045,-.28613,-.30527,-.25037,-.1539,-.08286,-.11157,-.12592,-.00327,.13803,.19141,.1282,.01788,-.03952,-.12592,-.26773,-.34634,-.31384,-.1806,-.0108,.13574,.2612,.36975,.46573,.55087,.63626,.73022,.83072,.92014,.97177,.98587,.98413,.99167,.99445,.99292,.99219,.9874,.98007,.96472,.92239,.82166,.69067,.57959,.54962,.59695,.64255,.64633,.60629,.55942,.5491,.58966,.61887,.56952,.54181,.59518,.63248,.63876,.65463,.73398,.88312,.96927,.97101,.97958,.99344,.9942,.99268,.99493,.99469,.99445,.99521,.99445,.99545,.9942,.99493,.99493,.9942,.99545,.9942,.99493,.9942,.99393,.9942,.9884,.98309,.98309,.96069,.88461,.7937,.72064,.65765,.59998,.53247,.49268,.48615,.44205,.38034,.36447,.38715,.39294,.32645,.19595,.07782,-.05893,-.27832,-.48309,-.62619,-.72995,-.79999,-.84583,-.82166,-.73575,-.67227,-.65491,-.6496,-.66397,-.70175,-.72894,-.74658,-.76724,-.7952,-.82846,-.86523,-.90527,-.94382,-.89948,-.69849,-.47479,-.31662,-.15414,-.00729,.07077,.08237,.04431,-.02292,-.11761,-.24307,-.36926,-.45087,-.4617,-.4025,-.30679,-.17529,0,.14331,.24179,.36774,.49545,.56522,.57907,.56775,.53851,.51132,.48688,.41913,.26044,.00955,-.26297,-.46396,-.62341,-.82214,-.94684,-.96774,-.97531,-.98413,-.99017,-.9899,-.99219,-.99066,-.99142,-.99167,-.99118,-.99219,-.9899,-.99118,-.99368,-.99142,-.97757,-.97403,-.98007,-.9617,-.86826,-.67783,-.52719,-.48788,-.4549,-.43146,-.47681,-.54105,-.57983,-.60904,-.62317,-.59949,-.55566,-.52063,-.52115,-.55112,-.56244,-.58337,-.6554,-.73373,-.77228,-.74759,-.6889,-.64609,-.61887,-.5806,-.50351,-.40729,-.33929,-.3511,-.42944,-.47028,-.42267,-.32718,-.20224,-.0564,.04556,.10529,.1763,.26169,.33197,.32138,.23776,.20956,.23148,.20352,.23325,.39267,.52719,.58438,.62289,.66345,.70023,.66296,.5433,.42618,.33475,.24533,.14105,.03851,.01358,.09143,.22845,.34961,.41711,.4874,.58914,.69519,.78186,.84357,.89822,.95389,.98135,.98615,.99167,.99243,.99445,.9942,.99469,.99493,.99393,.99545,.99445,.99521,.99469,.99445,.99521,.9942,.99469,.98965,.98715,.98563,.96295,.91736,.86624,.82367,.77554,.68411,.53549,.38916,.2612,.11435,-.04053,-.18161,-.23172,-.19394,-.15237,-.1073,-.02997,.08588,.2262,.34305,.44104,.5574,.65765,.71259,.69217,.65363,.69748,.79572,.89368,.95514,.97733,.98413,.98816,.99243,.99445,.99243,.97302,.96674,.97983,.90378,.71005,.51056,.40451,.40982,.41559,.32996,.24356,.18866,.11411,.05365,.01157,-.03247,-.09216,-.16095,-.23248,-.31662,-.39771,-.48663,-.59647,-.71536,-.82013,-.85287,-.82947,-.84937,-.92215,-.97177,-.98663,-.98816,-.98438,-.99091,-.99219,-.99091,-.99191,-.99042,-.99191,-.99091,-.99142,-.99191,-.99091,-.99191,-.99091,-.99167,-.99142])},{name:"ultrabox shortened od guitar",expression:.5,samples:c([-.82785,-.67621,-.40268,-.43817,-.45468,-.22531,-.18329,.2475,.71246,.52155,.56082,.48395,.3399,.46957,.27744,.42313,.47104,.18796,.1293,-.13901,-.07431,-.16348,-.74857,-.73206,-.35181,-.26227,-.41882,-.27786,-.19806,-.19867,.18643,.24808,.08847,-.06964,.06912,.20474,-.05304,.29416,.31967,.14243,.27521,-.23932,-.14752,.1236,-.26123,-.26111,.06616,.2652,.0809,.1524,.16254,-.12061,.04562,.00131,.0405,.08182,-.21729,-.17041,-.16312,-.08563,.0639,.05099,.05627,.02728,.00726,-.13028,-.05673,-.14969,-.17645,.35492,.16766,-.00897,.24326,-.00461,-.04456,.01776,-.0495,-.01221,.02039,.07684,.13397,.3985,.35962,.13754,.4231,.27161,-.17609,.03659,.10635,-.21909,-.22046,-.20258,-.40973,-.4028,-.40521,-.66284])}]),h.chipWaves=function(e){const t=new Array(e.length),i={};for(let n=0;n<t.length;n++){t[n]=Object.assign([],e[n]);const s=t[n];s.index=n,i[s.name]=s}for(let e in i)i[e].samples=f(i[e].samples);const n=t;return n.dictionary=i,n}(h.rawChipWaves),h.rawRawChipWaves=h.rawChipWaves,h.firstIndexForSamplesInChipWaveList=h.chipWaves.length,h.chipNoises=w([{name:"retro",expression:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",expression:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",expression:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",expression:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null},{name:"shine",expression:1,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"deep",expression:1.5,basePitch:120,pitchFilterMult:1024,isSoft:!0,samples:null},{name:"cutter",expression:.005,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"metallic",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"static",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"1-bit white",expression:.5,basePitch:74.41,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"1-bit metallic",expression:.5,basePitch:86.41,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"crackling",expression:.9,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"pink",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"brownian",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null}]),h.filterFreqStep=1/4,h.filterFreqRange=34,h.filterFreqReferenceSetting=28,h.filterFreqReferenceHz=8e3,h.filterFreqMaxHz=h.filterFreqReferenceHz*Math.pow(2,h.filterFreqStep*(h.filterFreqRange-1-h.filterFreqReferenceSetting)),h.filterFreqMinHz=8,h.filterGainRange=15,h.filterGainCenter=7,h.filterGainStep=.5,h.filterMaxPoints=8,h.filterTypeNames=["low-pass","high-pass","peak"],h.filterMorphCount=10,h.filterSimpleCutRange=11,h.filterSimplePeakRange=8,h.fadeInRange=10,h.fadeOutTicks=[-24,-12,-6,-3,-1,6,12,24,48,72,96],h.fadeOutNeutral=4,h.drumsetFadeOutTicks=48,h.transitions=w([{name:"normal",isSeamless:!1,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!1},{name:"interrupt",isSeamless:!0,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"continue",isSeamless:!0,continues:!0,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide in pattern",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!1}]),h.vibratos=w([{name:"none",amplitude:0,type:0,delayTicks:0},{name:"light",amplitude:.15,type:0,delayTicks:0},{name:"delayed",amplitude:.3,type:0,delayTicks:37},{name:"heavy",amplitude:.45,type:0,delayTicks:0},{name:"shaky",amplitude:.1,type:1,delayTicks:0}]),h.vibratoTypes=w([{name:"normal",periodsSeconds:[.14],period:.14},{name:"shaky",periodsSeconds:[.11,.17798,.33],period:266.97}]),h.arpSpeedScale=[0,.0625,.125,.2,.25,1/3,.4,.5,2/3,.75,.8,.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.15,4.3,4.5,4.8,5,5.5,6,8],h.unisons=w([{name:"none",voices:1,spread:0,offset:0,expression:1.4,sign:1},{name:"shimmer",voices:2,spread:.018,offset:0,expression:.8,sign:1},{name:"hum",voices:2,spread:.045,offset:0,expression:1,sign:1},{name:"honky tonk",voices:2,spread:.09,offset:0,expression:1,sign:1},{name:"dissonant",voices:2,spread:.25,offset:0,expression:.9,sign:1},{name:"fifth",voices:2,spread:3.5,offset:3.5,expression:.9,sign:1},{name:"octave",voices:2,spread:6,offset:6,expression:.8,sign:1},{name:"bowed",voices:2,spread:.02,offset:0,expression:1,sign:-1},{name:"piano",voices:2,spread:.01,offset:0,expression:1,sign:.7},{name:"warbled",voices:2,spread:.25,offset:.05,expression:.9,sign:-.8},{name:"hecking gosh",voices:2,spread:6.25,offset:-6,expression:.8,sign:-.7},{name:"spinner",voices:2,spread:.02,offset:0,expression:1,sign:1},{name:"detune",voices:1,spread:0,offset:.25,expression:1,sign:1},{name:"rising",voices:2,spread:1,offset:.7,expression:.95,sign:1},{name:"vibrate",voices:2,spread:3.5,offset:7,expression:.975,sign:1},{name:"fourths",voices:2,spread:4,offset:4,expression:.95,sign:1},{name:"bass",voices:1,spread:0,offset:-7,expression:1,sign:1},{name:"dirty",voices:2,spread:0,offset:.1,expression:.975,sign:1},{name:"stationary",voices:2,spread:3.5,offset:0,expression:.9,sign:1},{name:"recurve",voices:2,spread:.005,offset:0,expression:1,sign:1},{name:"voiced",voices:2,spread:9.5,offset:0,expression:1,sign:1},{name:"fluctuate",voices:2,spread:12,offset:0,expression:1,sign:1},{name:"thin",voices:1,spread:0,offset:50,expression:1,sign:1},{name:"inject",voices:2,spread:6,offset:.4,expression:1,sign:1},{name:"askewed",voices:2,spread:0,offset:.42,expression:.7,sign:1},{name:"resonance",voices:2,spread:.0025,offset:.1,expression:.8,sign:-1.5},{name:"FART",voices:2,spread:13,offset:-5,expression:1,sign:-3}]),h.effectNames=["reverb","chorus","panning","distortion","bitcrusher","post EQ","echo","pitch shift","detune","vibrato","transition type","chord type"],h.effectOrder=[2,10,11,7,8,9,5,3,4,1,6,0],h.noteSizeMax=6,h.volumeRange=50,h.volumeLogScale=.1428,h.panCenter=50,h.panMax=2*h.panCenter,h.panDelaySecondsMax=.001,h.chorusRange=8,h.chorusPeriodSeconds=2,h.chorusDelayRange=.0034,h.chorusDelayOffsets=[[1.51,2.1,3.35],[1.47,2.15,3.25]],h.chorusPhaseOffsets=[[0,2.1,4.2],[3.2,5.3,1]],h.chorusMaxDelay=h.chorusDelayRange*(1+h.chorusDelayOffsets[0].concat(h.chorusDelayOffsets[1]).reduce(((e,t)=>Math.max(e,t)))),h.chords=w([{name:"simultaneous",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!1},{name:"strum",customInterval:!1,arpeggiates:!1,strumParts:1,singleTone:!1},{name:"arpeggio",customInterval:!1,arpeggiates:!0,strumParts:0,singleTone:!0},{name:"custom interval",customInterval:!0,arpeggiates:!1,strumParts:0,singleTone:!0}]),h.maxChordSize=9,h.operatorCount=4,h.maxPitchOrOperatorCount=Math.max(h.maxChordSize,h.operatorCount+2),h.algorithms=w([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]},{name:"1←(2 3) 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[2,3],[4],[],[]]},{name:"1←(2 (3 (4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[2,3,4],[3,4],[4],[]]}]),h.algorithms6Op=w([{name:"Custom",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1←2←3←4←5←6",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2],[3],[4],[5],[6],[]]},{name:"1←3 2←4←5←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4],[],[5],[6],[]]},{name:"1←3←4 2←5←6",carrierCount:2,associatedCarrier:[1,1,1,2,2,2],modulatedBy:[[3],[5],[4],[],[6],[]]},{name:"1←4 2←5 3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[5],[6],[],[],[]]},{name:"1←3 2←(4 5←6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5],[],[],[6],[]]},{name:"1←(3 4) 2←5←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3,4],[5],[],[],[6],[]]},{name:"1←3 2←(4 5 6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5,6],[],[],[],[]]},{name:"1←3 2←(4 5)←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5],[],[6],[6],[]]},{name:"1←3 2←4←(5 6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4],[],[5,6],[],[]]},{name:"1←(2 3 4 5 6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1←(2 3←5 4←6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4],[],[5],[6],[],[]]},{name:"1←(2 3 4←5←6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4],[],[],[5],[6],[]]},{name:"1←4←5 (2 3)←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[6],[6],[5],[],[]]},{name:"1←(3 4)←5 2←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3,4],[6],[5],[5],[],[]]},{name:"(1 2)←4 3←(5 6)",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[4],[5,6],[],[],[]]},{name:"(1 2)←5 (3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[5],[5],[6],[6],[],[]]},{name:"(1 2 3)←(4 5 6)",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4,5,6],[4,5,6],[4,5,6],[],[],[]]},{name:"1←5 (2 3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[5],[6],[6],[6],[],[]]},{name:"1 2←5 (3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[5],[6],[6],[],[]]},{name:"1 2 (3 4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[6],[6],[6],[]]},{name:"1 2 3 (4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[],[6],[6],[]]},{name:"1 2←4 3←(5 6)",carrierCount:3,associatedCarrier:[1,2,3,3,3,3],modulatedBy:[[],[4],[5,6],[],[],[]]},{name:"1←4 2←(5 6) 3",carrierCount:3,associatedCarrier:[1,2,3,3,3,3],modulatedBy:[[4],[5,6],[],[],[],[]]},{name:"1 2 3←5 4←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[],[5],[6],[],[]]},{name:"1 (2 3)←5←6 4",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[5],[5],[],[6],[]]},{name:"1 2 3←5←6 4",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[],[5,6],[],[],[]]},{name:"(1 2 3 4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[6],[6],[6],[6],[6],[]]},{name:"1 2 3 4 5←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[],[],[6],[]]},{name:"1 2 3 4 5 6",carrierCount:6,associatedCarrier:[1,2,3,4,5,6],modulatedBy:[[],[],[],[],[],[]]},{name:"1←(2 (3 (4 (5 (6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[2,3,4,5,6],[3,4,5,6],[4,5,6],[5,6],[6],[]]},{name:"1←(2(3(4(5(6",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[3,4,5,6],[4,5,6],[5,6],[6],[]]},{name:"1←4(2←5(3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[2,3,4],[3,5],[6],[],[],[]]},{name:"1←4(2←5 3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[2,3,4],[5],[6],[],[],[]]}]),h.operatorCarrierInterval=[0,.04,-.073,.091,.061,.024],h.operatorAmplitudeMax=15,h.operatorFrequencies=w([{name:"0.12×",mult:.125,hzOffset:0,amplitudeSign:1},{name:"0.25×",mult:.25,hzOffset:0,amplitudeSign:1},{name:"0.5×",mult:.5,hzOffset:0,amplitudeSign:1},{name:"0.75×",mult:.75,hzOffset:0,amplitudeSign:1},{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"3.5×",mult:3.5,hzOffset:-.05,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"~4×",mult:4,hzOffset:-2.4,amplitudeSign:-1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"10×",mult:10,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"12×",mult:12,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"14×",mult:14,hzOffset:0,amplitudeSign:1},{name:"15×",mult:15,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"17×",mult:17,hzOffset:0,amplitudeSign:1},{name:"18×",mult:18,hzOffset:0,amplitudeSign:1},{name:"19×",mult:19,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1},{name:"~20×",mult:20,hzOffset:-5,amplitudeSign:-1},{name:"25×",mult:25,hzOffset:0,amplitudeSign:1},{name:"50×",mult:50,hzOffset:0,amplitudeSign:1},{name:"75×",mult:75,hzOffset:0,amplitudeSign:1},{name:"100×",mult:100,hzOffset:0,amplitudeSign:1},{name:"128x",mult:128,hzOffset:0,amplitudeSign:1},{name:"256x",mult:250,hzOffset:0,amplitudeSign:1}]),h.envelopes=w([{name:"none",type:0,speed:0},{name:"note size",type:1,speed:0},{name:"pitch",type:2,speed:0},{name:"punch",type:4,speed:0},{name:"flare -1",type:5,speed:128},{name:"flare 1",type:5,speed:32},{name:"flare 2",type:5,speed:8},{name:"flare 3",type:5,speed:2},{name:"twang -1",type:6,speed:128},{name:"twang 1",type:6,speed:32},{name:"twang 2",type:6,speed:8},{name:"twang 3",type:6,speed:2},{name:"swell -1",type:7,speed:128},{name:"swell 1",type:7,speed:32},{name:"swell 2",type:7,speed:8},{name:"swell 3",type:7,speed:2},{name:"tremolo0",type:8,speed:8},{name:"tremolo1",type:8,speed:4},{name:"tremolo2",type:8,speed:2},{name:"tremolo3",type:8,speed:1},{name:"tremolo4",type:9,speed:4},{name:"tremolo5",type:9,speed:2},{name:"tremolo6",type:9,speed:1},{name:"decay -1",type:10,speed:40},{name:"decay 1",type:10,speed:10},{name:"decay 2",type:10,speed:7},{name:"decay 3",type:10,speed:4},{name:"wibble-1",type:11,speed:128},{name:"wibble 1",type:11,speed:24},{name:"wibble 2",type:11,speed:12},{name:"wibble 3",type:11,speed:4},{name:"linear-2",type:12,speed:256},{name:"linear-1",type:12,speed:128},{name:"linear 1",type:12,speed:32},{name:"linear 2",type:12,speed:8},{name:"linear 3",type:12,speed:2},{name:"rise -2",type:13,speed:256},{name:"rise -1",type:13,speed:128},{name:"rise 1",type:13,speed:32},{name:"rise 2",type:13,speed:8},{name:"rise 3",type:13,speed:2},{name:"flute 1",type:11,speed:16},{name:"flute 2",type:11,speed:8},{name:"flute 3",type:11,speed:4},{name:"tripolo1",type:8,speed:9},{name:"tripolo2",type:8,speed:6},{name:"tripolo3",type:8,speed:3},{name:"tripolo4",type:9,speed:9},{name:"tripolo5",type:9,speed:6},{name:"tripolo6",type:9,speed:3},{name:"pentolo1",type:8,speed:10},{name:"pentolo2",type:8,speed:5},{name:"pentolo3",type:8,speed:2.5},{name:"pentolo4",type:9,speed:10},{name:"pentolo5",type:9,speed:5},{name:"pentolo6",type:9,speed:2.5},{name:"flutter 1",type:8,speed:14},{name:"flutter 2",type:9,speed:11},{name:"water-y flutter",type:8,speed:9},{name:"blip 1",type:14,speed:6},{name:"blip 2",type:14,speed:16},{name:"blip 3",type:14,speed:32},{name:"fall 1",type:15,speed:8},{name:"fall 2",type:15,speed:4},{name:"fall 3",type:15,speed:2}]),h.newEnvelopes=w([{name:"none",type:0,speed:0},{name:"note size",type:1,speed:0},{name:"pitch",type:2,speed:0},{name:"random",type:3,speed:4},{name:"punch",type:4,speed:0},{name:"flare",type:5,speed:32},{name:"twang",type:6,speed:32},{name:"swell",type:7,speed:32},{name:"lfo",type:8,speed:4},{name:"decay",type:10,speed:10},{name:"wibble",type:11,speed:24},{name:"linear",type:12,speed:32},{name:"rise",type:13,speed:32},{name:"blip",type:14,speed:6},{name:"fall",type:15,speed:2}]),h.feedbacks=w([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]},{name:"1↔2 3↔4",indices:[[2],[1],[4],[3]]},{name:"1↔4 2↔3",indices:[[4],[3],[2],[1]]},{name:"2→1→4→3→2",indices:[[2],[3],[4],[1]]},{name:"1→2→3→4→1",indices:[[4],[1],[2],[3]]},{name:"(1 2 3)→4",indices:[[],[],[],[1,2,3]]},{name:"ALL",indices:[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]}]),h.feedbacks6Op=w([{name:"Custom",indices:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1⟲",indices:[[1],[],[],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[],[],[]]},{name:"3⟲",indices:[[],[],[3],[],[],[]]},{name:"4⟲",indices:[[],[],[],[4],[],[]]},{name:"5⟲",indices:[[],[],[],[],[5],[]]},{name:"6⟲",indices:[[],[],[],[],[],[6]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[],[],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲ 5⟲",indices:[[1],[2],[3],[4],[5],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲",indices:[[1],[2],[3],[4],[5],[6]]},{name:"1→2",indices:[[],[1],[],[],[],[]]},{name:"1→3",indices:[[],[],[1],[],[],[]]},{name:"1→4",indices:[[],[],[],[1],[],[]]},{name:"1→5",indices:[[],[],[],[],[1],[]]},{name:"1→6",indices:[[],[],[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[],[],[]]},{name:"2→4",indices:[[],[],[],[2],[],[]]},{name:"3→4",indices:[[],[],[],[3],[],[]]},{name:"4→5",indices:[[],[],[],[],[4],[]]},{name:"1→4 2→5 3→6",indices:[[],[],[],[1],[2],[3]]},{name:"1→5 2→6 3→4",indices:[[],[],[],[3],[1],[2]]},{name:"1→2→3→4→5→6",indices:[[],[1],[2],[3],[4],[5]]},{name:"2→1→6→5→4→3→2",indices:[[2],[3],[4],[5],[6],[1]]},{name:"1→2→3→4→5→6→1",indices:[[6],[1],[2],[3],[4],[5]]},{name:"1↔2 3↔4 5↔6",indices:[[2],[1],[4],[3],[6],[5]]},{name:"1↔4 2↔5 3↔6",indices:[[4],[5],[6],[1],[2],[3]]},{name:"(1,2,3,4,5)→6",indices:[[],[],[],[],[],[1,2,3,4,5]]},{name:"ALL",indices:[[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]]}]),h.chipNoiseLength=32768,h.spectrumNoiseLength=32768,h.spectrumBasePitch=24,h.spectrumControlPoints=30,h.spectrumControlPointsPerOctave=7,h.spectrumControlPointBits=3,h.spectrumMax=(1<<h.spectrumControlPointBits)-1,h.harmonicsControlPoints=28,h.harmonicsRendered=64,h.harmonicsRenderedForPickedString=256,h.harmonicsControlPointBits=3,h.harmonicsMax=(1<<h.harmonicsControlPointBits)-1,h.harmonicsWavelength=2048,h.additiveControlPoints=28,h.additiveRendered=64,h.additiveControlPointBits=3,h.additiveMax=(1<<h.additiveControlPointBits)-1,h.additiveWavelength=2048,h.pulseWidthRange=50,h.pulseWidthStepPower=.5,h.supersawVoiceCount=7,h.supersawDynamismMax=6,h.supersawSpreadMax=12,h.supersawShapeMax=6,h.pitchChannelCountMin=1,h.pitchChannelCountMax=60,h.noiseChannelCountMin=0,h.noiseChannelCountMax=60,h.modChannelCountMin=0,h.modChannelCountMax=60,h.noiseInterval=6,h.pitchesPerOctave=12,h.drumCount=12,h.pitchOctaves=8,h.modCount=6,h.maxPitch=h.pitchOctaves*h.pitchesPerOctave,h.maximumTonesPerChannel=2*h.maxChordSize,h.justIntonationSemitones=[.5,8/15,9/16,.6,5/8,2/3,32/45,3/4,.8,5/6,8/9,15/16,1,16/15,9/8,1.2,5/4,4/3,45/32,1.5,1.6,5/3,16/9,15/8,2].map((e=>Math.log2(e)*h.pitchesPerOctave)),h.pitchShiftRange=h.justIntonationSemitones.length,h.pitchShiftCenter=h.pitchShiftRange>>1,h.detuneCenter=200,h.detuneMax=400,h.detuneMin=0,h.songDetuneMin=0,h.songDetuneMax=500,h.unisonVoicesMin=1,h.unisonVoicesMax=2,h.unisonSpreadMin=-96,h.unisonSpreadMax=96,h.unisonOffsetMin=-96,h.unisonOffsetMax=96,h.unisonExpressionMin=-2,h.unisonExpressionMax=2,h.unisonSignMin=-2,h.unisonSignMax=2,h.sineWaveLength=256,h.sineWaveMask=h.sineWaveLength-1,h.sineWave=function(){const e=new Float32Array(h.sineWaveLength+1);for(let t=0;t<h.sineWaveLength+1;t++)e[t]=Math.sin(t*Math.PI*2/h.sineWaveLength);return e}(),h.perEnvelopeSpeedIndices=[0,.01,.02,.03,.04,.05,.06,.07,.08,.09,.1,.2,.25,.3,.3333,.4,.5,.6,.6667,.7,.75,.8,.9,1,1.25,1.3333,1.5,1.6667,1.75,2,2.25,2.5,2.75,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,11,12,13,14,15,16,17,18,19,20,24,32,40,64,128,256],h.perEnvelopeSpeedToIndices={0:0,.01:1,.02:2,.03:3,.04:4,.05:5,.06:6,.07:7,.08:8,.09:9,.1:10,.2:11,.25:12,.3:13,.3333:14,.4:15,.5:16,.6:17,.6667:18,.7:19,.75:20,.8:21,.9:22,1:23,1.25:24,1.3333:25,1.5:26,1.6667:27,1.75:28,2:29,2.25:30,2.5:31,2.75:32,3:33,3.5:34,4:35,4.5:36,5:37,5.5:38,6:39,6.5:40,7:41,7.5:42,8:43,8.5:44,9:45,9.5:46,10:47,11:48,12:49,13:50,14:51,15:52,16:53,17:54,18:55,19:56,20:57,24:58,32:59,40:60,64:61,128:62,256:63},h.perEnvelopeBoundMin=0,h.perEnvelopeBoundMax=2,h.randomEnvelopeSeedMax=64,h.randomEnvelopeStepsMax=24,h.pickedStringDispersionCenterFreq=6e3,h.pickedStringDispersionFreqScale=.3,h.pickedStringDispersionFreqMult=4,h.pickedStringShelfHz=4e3,h.distortionRange=8,h.stringSustainRange=15,h.stringDecayRate=.12,h.enableAcousticSustain=!1,h.sustainTypeNames=["bright","acoustic"],h.bitcrusherFreqRange=14,h.bitcrusherOctaveStep=.5,h.bitcrusherQuantizationRange=8,h.maxEnvelopeCount=16,h.defaultAutomationRange=13,h.instrumentAutomationTargets=w([{name:"none",computeIndex:null,displayName:"none",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"noteVolume",computeIndex:0,displayName:"pre volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"mixVolume",computeIndex:1,displayName:"post volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"pulseWidth",computeIndex:3,displayName:"pulse width",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6,8]},{name:"stringSustain",computeIndex:4,displayName:"sustain",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[7]},{name:"unison",computeIndex:5,displayName:"unison",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[0,5,7,9,6,2,3]},{name:"operatorFrequency",computeIndex:6,displayName:"fm# freq",interleave:!0,isFilter:!1,maxCount:h.operatorCount+2,effect:null,compatibleInstruments:[1,11]},{name:"operatorAmplitude",computeIndex:12,displayName:"fm# volume",interleave:!1,isFilter:!1,maxCount:h.operatorCount+2,effect:null,compatibleInstruments:[1,11]},{name:"feedbackAmplitude",computeIndex:18,displayName:"fm feedback",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[1,11]},{name:"pitchShift",computeIndex:19,displayName:"pitch shift",interleave:!1,isFilter:!1,maxCount:1,effect:7,compatibleInstruments:null},{name:"detune",computeIndex:20,displayName:"detune",interleave:!1,isFilter:!1,maxCount:1,effect:8,compatibleInstruments:null},{name:"vibratoDepth",computeIndex:21,displayName:"vibrato depth",interleave:!1,isFilter:!1,maxCount:1,effect:9,compatibleInstruments:null},{name:"noteFilterAllFreqs",computeIndex:2,displayName:"n. filter freqs",interleave:!1,isFilter:!0,maxCount:1,effect:5,compatibleInstruments:null},{name:"noteFilterFreq",computeIndex:22,displayName:"n. filter # freq",interleave:!1,isFilter:!0,maxCount:h.filterMaxPoints,effect:5,compatibleInstruments:null},{name:"decimalOffset",computeIndex:38,displayName:"decimal offset",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6,8]},{name:"supersawDynamism",computeIndex:39,displayName:"dynamism",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"supersawSpread",computeIndex:40,displayName:"spread",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"supersawShape",computeIndex:41,displayName:"saw↔pulse",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"panning",computeIndex:42,displayName:"panning",interleave:!1,isFilter:!1,maxCount:1,effect:2,compatibleInstruments:null},{name:"distortion",computeIndex:43,displayName:"distortion",interleave:!1,isFilter:!1,maxCount:1,effect:3,compatibleInstruments:null},{name:"bitcrusherQuantization",computeIndex:44,displayName:"bitcrush",interleave:!1,isFilter:!1,maxCount:1,effect:4,compatibleInstruments:null},{name:"bitcrusherFrequency",computeIndex:45,displayName:"freq crush",interleave:!1,isFilter:!1,maxCount:1,effect:4,compatibleInstruments:null},{name:"chorus",computeIndex:46,displayName:"chorus",interleave:!1,isFilter:!1,maxCount:1,effect:1,compatibleInstruments:null},{name:"echoSustain",computeIndex:47,displayName:"echo",interleave:!1,isFilter:!1,maxCount:1,effect:6,compatibleInstruments:null},{name:"reverb",computeIndex:48,displayName:"reverb",interleave:!1,isFilter:!1,maxCount:1,effect:0,compatibleInstruments:null},{name:"arpeggioSpeed",computeIndex:49,displayName:"arpeggio speed",interleave:!1,isFilter:!1,maxCount:1,effect:11,compatibleInstruments:null}]),h.operatorWaves=w([{name:"sine",samples:h.sineWave},{name:"triangle",samples:function(){const e=new Float32Array(h.sineWaveLength+1);for(let t=0;t<h.sineWaveLength+1;t++)e[t]=Math.asin(Math.sin(t*Math.PI*2/h.sineWaveLength))/(Math.PI/2);return e}()},{name:"pulse width",samples:b()},{name:"sawtooth",samples:g()},{name:"ramp",samples:g(!0)},{name:"trapezoid",samples:function(e=2){const t=new Float32Array(h.sineWaveLength+1);for(let i=0;i<h.sineWaveLength+1;i++)t[i]=Math.max(-1,Math.min(1,Math.asin(Math.sin(i*Math.PI*2/h.sineWaveLength))*e));return t}(2)},{name:"quasi-sine",samples:function(){const e=new Float32Array(h.sineWaveLength+1);for(let t=0;t<h.sineWaveLength+1;t++)e[t]=Math.round(Math.sin(t*Math.PI*2/h.sineWaveLength));return e}()}]),h.pwmOperatorWaves=w([{name:"1%",samples:b(.01)},{name:"5%",samples:b(.05)},{name:"12.5%",samples:b(.125)},{name:"25%",samples:b(.25)},{name:"33%",samples:b(1/3)},{name:"50%",samples:b(.5)},{name:"66%",samples:b(2/3)},{name:"75%",samples:b(.75)},{name:"87.5%",samples:b(.875)},{name:"95%",samples:b(.95)},{name:"99%",samples:b(.99)}]),h.barEditorHeight=10,h.modulators=w([{name:"none",pianoName:"None",maxRawVol:6,newNoteVol:6,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"No Mod Setting",promptDesc:["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.","[$LO - $HI]"]},{name:"song volume",pianoName:"Volume",maxRawVol:100,newNoteVol:100,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Song Volume",promptDesc:["This setting affects the overall volume of the song, just like the main volume slider.","At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"tempo",pianoName:"Tempo",maxRawVol:h.tempoMax-h.tempoMin,newNoteVol:Math.ceil((h.tempoMax-h.tempoMin)/2),forSong:!0,convertRealFactor:h.tempoMin,associatedEffect:12,promptName:"Song Tempo",promptDesc:["This setting controls the speed your song plays at, just like the tempo slider.","When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.","Note that you can make a 'swing' effect by rapidly changing between two tempo values.","[OVERWRITING] [$LO - $HI] [BPM]"]},{name:"song reverb",pianoName:"Reverb",maxRawVol:2*h.reverbRange,newNoteVol:h.reverbRange,forSong:!0,convertRealFactor:-h.reverbRange,associatedEffect:12,promptName:"Song Reverb",promptDesc:["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.","At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"next bar",pianoName:"Next Bar",maxRawVol:1,newNoteVol:1,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Go To Next Bar",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.","This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.","You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.","[$LO - $HI]"]},{name:"pre volume",pianoName:"Note Vol.",maxRawVol:h.volumeRange,newNoteVol:Math.ceil(h.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-h.volumeRange/2),associatedEffect:12,promptName:"pre volume",promptDesc:["This setting affects the volume of your instrument as if its note size had been scaled.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.","This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, pre volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'post volume' modulator instead, which will always just scale the volume with no added effects.","For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'post volume' modulator anyhow. However, as mentioned, it works more like changing pre volume.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"pan",pianoName:"Pan",maxRawVol:h.panMax,newNoteVol:Math.ceil(h.panMax/2),forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Instrument Panning",promptDesc:["This setting controls the panning of your instrument, just like the panning slider.","At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.","[OVERWRITING] [$LO - $HI] [L-R]"]},{name:"reverb",pianoName:"Reverb",maxRawVol:h.reverbRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:0,promptName:"Instrument Reverb",promptDesc:["This setting controls the reverb of your insturment, just like the reverb slider.","At $LO, your instrument will have no reverb. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"distortion",pianoName:"Distortion",maxRawVol:h.distortionRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:3,promptName:"Instrument Distortion",promptDesc:["This setting controls the amount of distortion for your instrument, just like the distortion slider.","At $LO, your instrument will have no distortion. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"fm slider 1",pianoName:"FM 1",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 1",promptDesc:["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 2",pianoName:"FM 2",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 2",promptDesc:["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 3",pianoName:"FM 3",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 3",promptDesc:["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 4",pianoName:"FM 4",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 4",promptDesc:["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm feedback",pianoName:"FM Feedbck",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Feedback",promptDesc:["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"pulse width",pianoName:"Pulse Width",maxRawVol:h.pulseWidthRange,newNoteVol:h.pulseWidthRange,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Pulse Width",promptDesc:["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.","At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).","Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.","[OVERWRITING] [$LO - $HI] [%Duty]"]},{name:"detune",pianoName:"Detune",maxRawVol:h.detuneMax-h.detuneMin,newNoteVol:h.detuneCenter,forSong:!1,convertRealFactor:-h.detuneCenter,associatedEffect:8,promptName:"Instrument Detune",promptDesc:["This setting controls the detune for this instrument, just like the detune slider.","At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.","[OVERWRITING] [$LO - $HI] [cents]"]},{name:"vibrato depth",pianoName:"Vibrato Depth",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Depth",promptDesc:["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.","At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.","[OVERWRITING] [$LO - $HI] [pitch ÷25]"]},{name:"song detune",pianoName:"Detune",maxRawVol:h.songDetuneMax-h.songDetuneMin,newNoteVol:Math.ceil((h.songDetuneMax-h.songDetuneMin)/2),forSong:!0,convertRealFactor:-250,associatedEffect:12,promptName:"Song Detune",promptDesc:["This setting controls the overall detune of the entire song. There is no associated slider.","At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.","[MULTIPLICATIVE] [$LO - $HI] [cents x4]"]},{name:"vibrato speed",pianoName:"Vibrato Speed",maxRawVol:30,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Speed",promptDesc:["This setting controls the speed your instrument will vibrato at, just like the slider.","A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"vibrato delay",pianoName:"Vibrato Delay",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Delay",promptDesc:["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.","A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).","[OVERWRITING] [$LO - $HI] [beats ÷24]"]},{name:"arp speed",pianoName:"Arp Speed",maxRawVol:50,newNoteVol:12,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Arpeggio Speed",promptDesc:["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.","Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"pan delay",pianoName:"Pan Delay",maxRawVol:20,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Panning Delay",promptDesc:["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.","With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.","[OVERWRITING] [$LO - $HI]"]},{name:"reset arp",pianoName:"Reset Arp",maxRawVol:1,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Reset Arpeggio",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.","This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.","[$LO - $HI]"]},{name:"eq filter",pianoName:"EQFlt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter",promptDesc:["This setting controls a few separate things for your instrument's EQ filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"note filter",pianoName:"N.Flt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter",promptDesc:["This setting controls a few separate things for your instrument's note filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"bit crush",pianoName:"Bitcrush",maxRawVol:h.bitcrusherQuantizationRange-1,newNoteVol:Math.round(h.bitcrusherQuantizationRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Bit Crush",promptDesc:["This setting controls the bit crush of your instrument, just like the bit crush slider.","At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"freq crush",pianoName:"Freq Crush",maxRawVol:h.bitcrusherFreqRange-1,newNoteVol:Math.round(h.bitcrusherFreqRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Frequency Crush",promptDesc:["This setting controls the frequency crush of your instrument, just like the freq crush slider.","At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo",pianoName:"Echo",maxRawVol:h.echoSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:6,promptName:"Instrument Echo Sustain",promptDesc:["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.","At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo delay",pianoName:"Echo Delay",maxRawVol:h.echoDelayRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Instrument Echo Delay",promptDesc:["This setting controls the echo delay of your instrument, just like the echo delay slider.","At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.","[OVERWRITING] [$LO - $HI] [~beats ÷12]"]},{name:"chorus",pianoName:"Chorus",maxRawVol:h.chorusRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:1,promptName:"Instrument Chorus",promptDesc:["This setting controls the chorus strength of your instrument, just like the chorus slider.","At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt cut",pianoName:"EQFlt Cut",maxRawVol:h.filterSimpleCutRange-1,newNoteVol:h.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt peak",pianoName:"EQFlt Peak",maxRawVol:h.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt cut",pianoName:"N.Flt Cut",maxRawVol:h.filterSimpleCutRange-1,newNoteVol:h.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt peak",pianoName:"N.Flt Peak",maxRawVol:h.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"pitch shift",pianoName:"Pitch Shift",maxRawVol:h.pitchShiftRange-1,newNoteVol:h.pitchShiftCenter,forSong:!1,convertRealFactor:-h.pitchShiftCenter,associatedEffect:7,promptName:"Pitch Shift",promptDesc:["This setting controls the pitch offset of your instrument, just like the pitch shift slider.","At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.","[OVERWRITING] [$LO - $HI] [pitch]"]},{name:"sustain",pianoName:"Sustain",maxRawVol:h.stringSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Picked String Sustain",promptDesc:["This setting controls the sustain of your picked string instrument, just like the sustain slider.","At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"post volume",pianoName:"Mix Vol.",maxRawVol:h.volumeRange,newNoteVol:Math.ceil(h.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-h.volumeRange/2),associatedEffect:12,promptName:"post volume",promptDesc:["This setting affects the volume of your instrument as if its volume slider had been moved.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.","Unlike the 'pre volume' setting, post volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"fm slider 5",pianoName:"FM 5",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 5",promptDesc:["This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 6",pianoName:"FM 6",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 6",promptDesc:["This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"decimal offset",pianoName:"Decimal Offset",maxRawVol:99,newNoteVol:0,forSong:!1,convertRealFactor:0,invertSliderIndicator:!0,associatedEffect:12,promptName:"Decimal Offset",promptDesc:["This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.","[$LO - $HI]"]},{name:"envelope speed",pianoName:"EnvelopeSpd",maxRawVol:50,newNoteVol:12,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Envelope Speed",promptDesc:["This setting controls how fast all of the envelopes for the instrument play.","At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"dynamism",pianoName:"Dynamism",maxRawVol:h.supersawDynamismMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Supersaw Dynamism",promptDesc:["This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.","At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"spread",pianoName:"Spread",maxRawVol:h.supersawSpreadMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Supersaw Spread",promptDesc:["This setting controls the supersaw spread of your instrument, just like the spread slider.","At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"saw shape",pianoName:"Saw Shape",maxRawVol:h.supersawShapeMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Supersaw Shape",promptDesc:["This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.","As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"individual envelope speed",pianoName:"IndvEnvSpd",maxRawVol:63,newNoteVol:23,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Individual Envelope Speed",promptDesc:["This setting controls how fast the specified envelope of the instrument will play.","At $LO, your the envelope will be frozen, and at values near there they will change very slowly. At 23, the envelope will work as usual, performing at normal speed. This increases up to $HI, where the envelope will change very quickly. The speeds are given below:","[0-4]: x0, x0.01, x0.02, x0.03, x0.04,","[5-9]: x0.05, x0.06, x0.07, x0.08, x0.09,","[10-14]: x0.1, x0.2, x0.25, x0.3, x0.33,","[15-19]: x0.4, x0.5, x0.6, x0.6667, x0.7,","[20-24]: x0.75, x0.8, x0.9, x1, x1.25,","[25-29]: x1.3333, x1.5, x1.6667, x1.75, x2,","[30-34]: x2.25, x2.5, x2.75, x3, x3.5,","[35-39]: x4, x4.5, x5, x5.5, x6,","[40-44]: x6.5, x7, x7.5, x8, x8.5,","[45-49]: x9, x9.5, x10, x11, x12","[50-54]: x13, x14, x15, x16, x17","[55-59]: x18, x19, x20, x24, x32","[60-63]: x40, x64, x128, x256","[OVERWRITING] [$LO - $HI]"]},{name:"song eq",pianoName:"Song EQ",maxRawVol:10,newNoteVol:0,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Song EQ Filter",promptDesc:["This setting overwrites every instrument's eq filter. You can do this in a few separate ways, similar to the per instrument eq filter modulator.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]}]),/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);class O{static valueToPreset(e){var t;const i=e>>6,n=63&e;return null===(t=O.presetCategories[i])||void 0===t?void 0:t.presets[n]}static midiProgramToPresetValue(e){for(let t=0;t<O.presetCategories.length;t++){const i=O.presetCategories[t];for(let n=0;n<i.presets.length;n++){const s=i.presets[n];if(s.generalMidi&&s.midiProgram==e)return(t<<6)+n}}return null}static nameToPresetValue(e){for(let t=0;t<O.presetCategories.length;t++){const i=O.presetCategories[t];for(let n=0;n<i.presets.length;n++){if(i.presets[n].name==e)return(t<<6)+n}}return null}static instrumentToPreset(e){var t;return null===(t=O.presetCategories[0].presets.dictionary)||void 0===t?void 0:t[null==i?void 0:i[e]]}}function R(e,t){for(let i=0;i<e.length;i++)e[i]*=t}function L(e){if(!function(e){return!(!e||e&e-1)}(e))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(e)/Math.log(2))}function G(e,t){const i=L(t);if(t<4)throw new Error("FFT array length must be at least 4.");for(let n=i-1;n>=2;n--){const i=1<<n,s=i>>1,a=i<<1,r=2*Math.PI/a,o=Math.cos(r),l=Math.sin(r),p=2*o;for(let n=0;n<t;n+=a){const t=n,a=t+s,r=t+i,h=r+s,u=r+i,c=e[t],f=e[r];e[t]=c+f,e[a]*=2,e[r]=c-f,e[h]*=2;let d=o,m=-l,v=1,y=0;for(let i=1;i<s;i++){const n=t+i,s=r-i,a=r+i,o=u-i,l=e[n],h=e[s],c=e[a],f=e[o],b=l-h,g=c+f;e[n]=l+h,e[s]=f-c,e[a]=b*d-g*m,e[o]=g*d+b*m;const S=p*d-v,w=p*m-y;v=d,y=m,d=S,m=w}}}for(let i=0;i<t;i+=4){const t=i+1,n=i+2,s=i+3,a=e[i],r=2*e[t],o=e[n],l=2*e[s],p=a+o,h=a-o;e[i]=p+r,e[t]=p-r,e[n]=h+l,e[s]=h-l}!function(e,t){const i=L(t);if(i>16)throw new Error("FFT array length must not be greater than 2^16.");const n=16-i;for(let i=0;i<t;i++){let t;if(t=(43690&i)>>1|(21845&i)<<1,t=(52428&t)>>2|(13107&t)<<2,t=(61680&t)>>4|(3855&t)<<4,t=(t>>8|(255&t)<<8)>>n,t>i){let n=e[i];e[i]=e[t],e[t]=n}}}(e,t)}O.version="1.0.0",O.versionDisplayName="theepbox! ",O.releaseNotesURL="./patch_notes.html",O.isOnMac=/^Mac/i.test(navigator.platform)||/Mac OS X/i.test(navigator.userAgent)||/^(iPhone|iPad|iPod)/i.test(navigator.platform)||/(iPhone|iPad|iPod)/i.test(navigator.userAgent),O.ctrlSymbol=O.isOnMac?"⌘":"Ctrl+",O.ctrlName=O.isOnMac?"command":"control",O.presetCategories=w([{name:"Custom Instruments",presets:w([{name:i[0],customType:0},{name:i[1],customType:1},{name:i[2],customType:2},{name:i[3],customType:3},{name:i[4],customType:4},{name:i[5],customType:5},{name:i[6],customType:6},{name:i[7],customType:7},{name:i[8],customType:8},{name:i[9],customType:9},{name:i[11],customType:11}])},{name:"Retro Presets",presets:w([{name:"square wave",midiProgram:80,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"square",unison:"none",envelopes:[]}},{name:"triangle wave",midiProgram:71,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"triangle",unison:"none",envelopes:[]}},{name:"square lead",midiProgram:80,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"square",unison:"hum",envelopes:[]}},{name:"sawtooth lead 1",midiProgram:81,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"sawtooth",unison:"shimmer",envelopes:[]}},{name:"sawtooth lead 2",midiProgram:81,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1}],effects:["vibrato","aliasing"],vibrato:"light",transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[]}},{name:"chip noise",midiProgram:116,isNoise:!0,settings:{type:"noise",transition:"hard",effects:["aliasing"],chord:"arpeggio",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"steady",wave:"retro"}},{name:"supersaw lead",midiProgram:81,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:2}],effects:["reverb"],reverb:67,fadeInSeconds:0,fadeOutTicks:-6,pulseWidth:50,dynamism:100,spread:58,shape:0,envelopes:[]}},{name:"FM twang",midiProgram:32,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM bass",midiProgram:36,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:11},{frequency:"1×",amplitude:7},{frequency:"1×",amplitude:9},{frequency:"20×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"twang 2",index:3}]}},{name:"FM flute",midiProgram:73,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM organ",midiProgram:16,settings:{type:"FM",eqFilter:[],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:14},{frequency:"2×",amplitude:14},{frequency:"1×",amplitude:11},{frequency:"2×",amplitude:11}],envelopes:[]}},{name:"FM sine",midiProgram:55,settings:{type:"FM",eqFilter:[],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,effects:[],panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1 2 3 4",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine"},{frequency:"1×",amplitude:0,waveform:"sine"},{frequency:"1×",amplitude:0,waveform:"sine"},{frequency:"1×",amplitude:0,waveform:"sine"}],envelopes:[]}},{name:"NES Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",vibrato:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-21,-20,-20,-20,-20,-19,-19,-19,-19,-18,-18,-18,-18,-17,-17,-17,-17,24,24,24,24,23,23,23,23,22,22,22,22,21,21,21,21,20,20,20,20,19,19,19,19,18,18,18,18,17,17,17,17]}},{name:"Gameboy Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-17,-15,-13,-13,-11,-11,-11,-9,-9,-9,-9,-7,-7,-7,-7,-7,-5,-5,-5,-5,-5,-5,-3,-3,-3,-3,-3,-3,-3,-3,24,20,17,15,13,13,11,11,11,9,9,9,9,7,7,7,7,7,5,5,5,5,5,5,3,3,3,3,3,3,3,3]}},{name:"VRC6 Sawtooth",midiProgram:81,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-16,-13,-10,-8,-6,-5,-4,-4,0,0,0,0,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,24,24,24,24]}},{name:"Atari Square",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-23,-23,-23,-22,-22,-22,-21,-21,-21,-20,-20,-20,-19,-19,-19,-18,-18,-18,-17,-17,-17,-16,-16,-16,-15,-15,-15,-14,-14,-14,-13,-13,-13,24,24,24,23,23,23,22,22,22,21,21,21,20,20,20,19,19,19,18,18,18,17,17,17,16,16,15,15]}},{name:"Atari Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,24,24,24,24,24,-24,-24,-24,-24,24,24,-24,-24,24,24]}},{name:"Sunsoft Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[24,24,15,15,9,9,-4,-4,0,0,-13,-13,-19,-19,-24,-24,-24,-24,-10,-10,0,0,-7,-7,-7,-7,0,0,6,6,-4,-4,3,3,-4,-4,3,3,3,3,9,9,15,15,15,15,6,6,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,3,3,12,12,24,24]}}])},{name:"Keyboard Presets",presets:w([{name:"grand piano 1",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,86,86,71,71,71,0,86,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"bright piano",midiProgram:1,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.7071},{type:"high-pass",cutoffHz:148.65,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:1.4142}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,86,86,71,71,0,71,71,71,71,71,71,14,57,57,57,57,57,57,29,57,57,57,57,57,57,57],unison:"piano",stringSustain:86,envelopes:[]}},{name:"electric grand",midiProgram:2,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"1/8 pulse",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"honky-tonk piano",midiProgram:3,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,71,86,71,43,71,43,43,57,57,57,29,57,57,57,57,57,57,43,57,57,57,43,43,43,43],unison:"honky tonk",stringSustain:71,envelopes:[]}},{name:"electric piano 1",midiProgram:4,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",harmonics:[86,100,100,71,71,57,57,43,43,43,29,29,29,14,14,14,0,0,0,0,0,57,0,0,0,0,0,0],unison:"none",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"electric piano 2",midiProgram:5,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:9},{frequency:"16×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"harpsichord",midiProgram:6,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:250,linearGain:.3536},{type:"peak",cutoffHz:11313.71,linearGain:2.8284}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,100,86,57,86,86,86,86,57,57,71,71,86,86,71,71,86,86,71,71,71,71,71,71,71,71,71],unison:"none",stringSustain:79,envelopes:[]}},{name:"clavinet",midiProgram:7,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.3536}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"3⟲",feedbackAmplitude:6,operators:[{frequency:"3×",amplitude:15},{frequency:"~1×",amplitude:6},{frequency:"8×",amplitude:4},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"},{target:"feedbackAmplitude",envelope:"twang 2"}]}},{name:"dulcimer",midiProgram:15,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,100,86,100,86,57,100,100,86,100,86,100,86,100,71,57,71,71,100,86,71,86,86,100,86,86,86],unison:"piano",stringSustain:79,envelopes:[]}},{name:"grand piano 2",midiProgram:0,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,86,86,86,86,71,71,57,0,57,29,43,57,57,57,43,43,0,29,43,43,43,43,43,43,29,0,29],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"grand piano 3",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:1681.79,linearGain:4},{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"peak",cutoffHz:3363.59,linearGain:4},{type:"peak",cutoffHz:2378.41,linearGain:.25}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:125,linearGain:.0884}],reverb:67,fadeInSeconds:0,fadeOutTicks:48,harmonics:[100,100,86,86,86,71,71,71,0,71,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:86,stringSustainType:"acoustic",envelopes:[{target:"noteFilterFreq",envelope:"note size",index:0},{target:"noteFilterFreq",envelope:"twang 1",index:1},{target:"noteFilterFreq",envelope:"twang 1",index:1}]}}])},{name:"Idiophone Presets",presets:w([{name:"celesta",midiProgram:8,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~1×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:6,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"3×",amplitude:1,envelope:"twang 2"}]}},{name:"glockenspiel",midiProgram:9,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:193,effects:["panning","chord type","note filter","reverb"],chord:"strum",fastTwoNoteArp:!0,arpeggioSpeed:12,noteFilterType:!0,noteSimpleCut:9,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,operators:[{frequency:"1×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"8×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"20×",amplitude:2,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"feedbackAmplitude",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"music box 1",midiProgram:10,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,0,0,100,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,71,0],unison:"none",stringSustain:64,envelopes:[]}},{name:"music box 2",midiProgram:10,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:.7071}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,57,57,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0],unison:"none",stringSustain:29,envelopes:[]}},{name:"vibraphone",midiProgram:11,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:3,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:9,envelope:"custom"},{frequency:"9×",amplitude:3,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"}]}},{name:"marimba",midiProgram:12,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:197,effects:["panning","chord type","note filter","reverb"],chord:"strum",fastTwoNoteArp:!0,arpeggioSpeed:12,noteFilterType:!0,noteSimpleCut:6,noteSimplePeak:2,noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.7071}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1 2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"13×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2}],isDrum:!1}},{name:"kalimba",midiProgram:108,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:198,effects:["panning","chord type","note filter","reverb"],chord:"strum",fastTwoNoteArp:!0,arpeggioSpeed:12,noteFilterType:!0,noteSimpleCut:7,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:.5}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"20×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2}],isDrum:!1}},{name:"xylophone",midiProgram:13,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"11×",amplitude:9,envelope:"custom"},{frequency:"20×",amplitude:6,envelope:"twang 1"}]}},{name:"tubular bell",midiProgram:14,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:96,chord:"strum",harmonics:[43,71,0,100,0,100,0,86,0,0,86,0,14,71,14,14,57,14,14,43,14,14,43,14,14,43,14,14],unison:"shimmer",stringSustain:86,envelopes:[]}},{name:"bell synth",midiProgram:14,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:10,envelope:"custom"},{frequency:"7×",amplitude:6,envelope:"twang 3"},{frequency:"20×",amplitude:1,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"rain drop",midiProgram:96,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:6,envelope:"tremolo1"}]}},{name:"crystal",midiProgram:98,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"}]}},{name:"tinkle bell",midiProgram:112,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"~2×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:7,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"16×",amplitude:7,envelope:"custom"}]}},{name:"agogo",midiProgram:113,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:205,effects:["panning","chord type","note filter","reverb"],chord:"strum",fastTwoNoteArp:!0,arpeggioSpeed:12,noteFilterType:!0,noteSimpleCut:8,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1 2 3 4",feedbackType:"1→4",feedbackAmplitude:15,operators:[{frequency:"2×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"8×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"13×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"feedbackAmplitude",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}}])},{name:"Guitar Presets",presets:w([{name:"nylon guitar",midiProgram:24,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"5×",amplitude:2,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"steady"}]}},{name:"steel guitar",midiProgram:25,generalMidi:!0,settings:{type:"Picked String",eqFilter:[],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,86,71,71,71,86,86,71,57,43,43,43,57,57,57,57,57,43,43,43,43,43,43,43,43,43,43],unison:"none",stringSustain:71,envelopes:[]}},{name:"jazz guitar",midiProgram:26,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,57,71,71,43,57,71,57,43,29,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"clean guitar",midiProgram:27,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[86,100,100,100,86,57,86,100,100,100,71,57,43,71,86,71,57,57,71,71,71,71,57,57,57,57,57,43]}},{name:"muted guitar",midiProgram:28,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:4,envelope:"twang 3"},{frequency:"4×",amplitude:4,envelope:"twang 2"},{frequency:"16×",amplitude:4,envelope:"twang 1"}]}}])},{name:"Picked Bass Presets",presets:w([{name:"acoustic bass",midiProgram:32,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,71,71,71,57,57,57,57,43,43,43,43,43,29,29,29,29,29,29,14,14,14,14,14,14,14]}},{name:"fingered bass",midiProgram:33,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,57,71,43,57,29,29,29,29,29,29,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0]}},{name:"picked bass",midiProgram:34,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:1,envelope:"twang 3"},{frequency:"1×",amplitude:9,envelope:"steady"}]}},{name:"fretless bass",midiProgram:35,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"flare 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,71,57,57,71,71,71,57,57,57,57,57,57,57,43,43,43,43,43,43,43,43,29,29,14]}},{name:"slap bass 1",midiProgram:36,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,100,100,100,86,71,57,29,29,43,43,57,71,57,29,29,43,57,57,57,43,43,43,57,71,71,71,71]}},{name:"slap bass 2",midiProgram:37,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"13×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"bass synth 1",midiProgram:38,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲ 4⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 1"},{frequency:"~1×",amplitude:13,envelope:"twang 2"}]}},{name:"bass synth 2",midiProgram:39,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1e3,filterResonance:57,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1→2",feedbackAmplitude:4,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"steady"},{frequency:"3×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"bass & lead",midiProgram:87,generalMidi:!0,settings:{type:"chip",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:86,filterEnvelope:"twang 2",wave:"sawtooth",interval:"shimmer",vibrato:"none"}},{name:"dubstep yoi yoi",midiProgram:87,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.7071}],effects:["note filter","bitcrusher"],noteFilter:[{type:"low-pass",cutoffHz:594.6,linearGain:11.3137}],bitcrusherOctave:1.5,bitcrusherQuantization:0,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"arpeggio",wave:"sawtooth",unison:"none",envelopes:[{target:"noteFilterFreq",envelope:"flare 2",index:0}]}}])},{name:"Picked String Presets",presets:w([{name:"pizzicato strings",midiProgram:45,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:11,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:10,envelope:"steady"}]}},{name:"harp",midiProgram:46,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:6,envelope:"steady"}]}},{name:"sitar",midiProgram:104,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:8e3,filterResonance:57,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 3"},{frequency:"9×",amplitude:3,envelope:"twang 3"},{frequency:"16×",amplitude:9,envelope:"swell 3"}]}},{name:"banjo",midiProgram:105,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"11×",amplitude:3,envelope:"twang 3"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"ukulele",midiProgram:105,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"9×",amplitude:4,envelope:"twang 2"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"shamisen",midiProgram:106,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"steady"},{frequency:"16×",amplitude:4,envelope:"twang 3"},{frequency:"1×",amplitude:7,envelope:"steady"}]}},{name:"koto",midiProgram:107,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 2",operators:[{frequency:"~1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"twang 3"},{frequency:"~2×",amplitude:8,envelope:"twang 3"}]}}])},{name:"Distortion Presets",presets:w([{name:"overdrive guitar",midiProgram:29,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:840.9,linearGain:.5}],effects:["note filter","distortion"],noteFilter:[{type:"high-pass",cutoffHz:297.3,linearGain:2},{type:"low-pass",cutoffHz:2378.41,linearGain:.7071}],distortion:71,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"distortion guitar",midiProgram:30,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:594.6,linearGain:.3536},{type:"peak",cutoffHz:1e3,linearGain:.25}],effects:["note filter","distortion","reverb"],noteFilter:[{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"low-pass",cutoffHz:2e3,linearGain:1}],distortion:86,reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"charango synth",midiProgram:84,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:1}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2→3→4",feedbackAmplitude:8,operators:[{frequency:"3×",amplitude:13},{frequency:"~1×",amplitude:5},{frequency:"4×",amplitude:6},{frequency:"3×",amplitude:7}],envelopes:[{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"guitar harmonics",midiProgram:31,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3)←4",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"4×",amplitude:12},{frequency:"16×",amplitude:5},{frequency:"1×",amplitude:2},{frequency:"~1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:1},{target:"operatorAmplitude",envelope:"punch",index:2},{target:"operatorAmplitude",envelope:"twang 1",index:3}]}},{name:"PWM overdrive",midiProgram:29,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1.4142}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:17.67767,envelopes:[{target:"pulseWidth",envelope:"punch"}]}},{name:"PWM distortion",midiProgram:30,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:2}],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:50,envelopes:[{target:"pulseWidth",envelope:"swell 1"}]}},{name:"FM overdrive",midiProgram:29,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:2,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"~2×",amplitude:6},{frequency:"1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"twang 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3},{target:"feedbackAmplitude",envelope:"punch"}]}},{name:"FM distortion",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:4,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:11},{frequency:"1×",amplitude:9},{frequency:"~2×",amplitude:4}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3}]}}])},{name:"Bellows Presets",presets:w([{name:"drawbar organ 1",midiProgram:16,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,86,0,86,0,0,0,86,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"drawbar organ 2",midiProgram:16,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,29,71,86,71,14,0,100,0,0,0,86,0,0,0,71,0,0,0,57,0,0,0,29,0,0,0,0]}},{name:"percussive organ",midiProgram:17,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:515,effects:["panning","vibrato","note filter","chorus","reverb"],vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,noteFilterType:!0,noteSimpleCut:8,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:.5}],pan:0,panDelay:10,chorus:100,reverb:0,fadeInSeconds:0,fadeOutTicks:-3,algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,operators:[{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"6×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"punch",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"feedbackAmplitude",envelope:"flare",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"rock organ",midiProgram:18,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"punch",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"flare 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:5,envelope:"steady"}]}},{name:"pipe organ",midiProgram:19,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"}]}},{name:"reed organ",midiProgram:20,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[71,86,100,86,71,100,57,71,71,71,43,43,43,71,43,71,57,57,57,57,57,57,57,29,43,29,29,14]}},{name:"accordion",midiProgram:21,generalMidi:!0,settings:{type:"chip",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"swell 1",wave:"double saw",interval:"honky tonk",vibrato:"none"}},{name:"bandoneon",midiProgram:23,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",interval:"hum",vibrato:"none",harmonics:[86,86,86,57,71,86,57,71,71,71,57,43,57,43,71,43,71,57,57,43,43,43,57,43,43,29,29,29]}},{name:"bagpipe",midiProgram:109,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"punch",interval:"hum",vibrato:"none",harmonics:[71,86,86,100,100,86,57,100,86,71,71,71,57,57,57,71,57,71,57,71,43,57,57,43,43,43,43,43]}}])},{name:"String Presets",presets:w([{name:"violin 1",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"delayed",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1→2",feedbackAmplitude:5,operators:[{frequency:"4×",amplitude:9},{frequency:"3×",amplitude:9},{frequency:"2×",amplitude:7},{frequency:"7×",amplitude:5}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"viola",midiProgram:41,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"}]}},{name:"cello",midiProgram:42,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.1768},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"peak",cutoffHz:4756.83,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.0884}],reverb:67,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:12,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"16×",amplitude:5},{frequency:"~1×",amplitude:10},{frequency:"1×",amplitude:9},{frequency:"6×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3}]}},{name:"contrabass",midiProgram:43,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"16×",amplitude:5,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"6×",amplitude:3,envelope:"swell 1"}]}},{name:"fiddle",midiProgram:110,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←(3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"16×",amplitude:3,envelope:"steady"}]}},{name:"tremolo strings",midiProgram:44,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,effects:["panning","note filter","chorus","reverb"],noteFilterType:!0,noteSimpleCut:6,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:.1768}],pan:0,panDelay:10,chorus:100,reverb:0,fadeInSeconds:.0125,fadeOutTicks:72,algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:12,operators:[{frequency:"1×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"7×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:4,perEnvelopeLowerBound:.5,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"strings",midiProgram:48,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"3×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:3,envelope:"swell 1"}]}},{name:"slow strings",midiProgram:49,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:1414,filterResonance:0,filterEnvelope:"swell 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:6,feedbackEnvelope:"flare 3",operators:[{frequency:"4×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:10,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"swell 1"}]}},{name:"strings synth 1",midiProgram:50,generalMidi:!0,settings:{type:"chip",transition:"soft fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:1414,filterResonance:43,filterEnvelope:"steady",wave:"sawtooth",interval:"hum",vibrato:"delayed"}},{name:"strings synth 2",midiProgram:51,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:12,feedbackEnvelope:"swell 1",operators:[{frequency:"3×",amplitude:6,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"custom"}]}},{name:"orchestra hit 1",midiProgram:55,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"custom",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"twang 3"},{frequency:"2×",amplitude:15,envelope:"flare 3"},{frequency:"4×",amplitude:15,envelope:"flare 2"},{frequency:"8×",amplitude:15,envelope:"flare 1"}]}},{name:"violin 2",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:2828,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"light",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:8,envelope:"swell 1"}]}},{name:"orchestra hit 2",midiProgram:55,midiSubharmonicOctaves:1,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:588,effects:["panning","vibrato","note filter","chorus","reverb"],vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,noteFilterType:!0,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.5}],pan:0,panDelay:10,chorus:100,reverb:0,fadeInSeconds:.0125,fadeOutTicks:72,algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,operators:[{frequency:"1×",amplitude:12,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:14,waveform:"sine",pulseWidth:5},{frequency:"3×",amplitude:12,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:14,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"supersaw string",midiProgram:41,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142},{type:"low-pass",cutoffHz:3363.59,linearGain:.1768}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:500,linearGain:.1768}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:6,pulseWidth:35.35534,dynamism:83,spread:8,shape:50,envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0}]}},{name:"supersaw string 2",midiProgram:41,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5},{type:"high-pass",cutoffHz:594.6,linearGain:.25},{type:"peak",cutoffHz:2e3,linearGain:2.8284},{type:"peak",cutoffHz:4756.83,linearGain:2}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5},{type:"high-pass",cutoffHz:594.6,linearGain:.25},{type:"peak",cutoffHz:2e3,linearGain:2.8284},{type:"peak",cutoffHz:4756.83,linearGain:2}],effects:["note filter","chorus","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:1}],noteSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:1}],chorus:57,reverb:42,fadeInSeconds:.0575,fadeOutTicks:-6,pulseWidth:50,dynamism:67,spread:58,shape:0,envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"},{target:"pulseWidth",envelope:"flare 2"}]}}])},{name:"Vocal Presets",presets:w([{name:"choir soprano",midiProgram:94,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25},{type:"low-pass",cutoffHz:6727.17,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:33,fadeInSeconds:.0413,fadeOutTicks:24,harmonics:[100,100,86,57,29,29,57,71,57,29,14,14,14,29,43,57,43,29,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"choir tenor",midiProgram:52,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"choir bass",midiProgram:52,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:11.3137},{type:"peak",cutoffHz:594.6,linearGain:5.6569},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo soprano",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,86,43,14,14,57,71,57,14,14,14,14,14,43,57,43,14,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"solo tenor",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo bass",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:5.6569},{type:"peak",cutoffHz:594.6,linearGain:8},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:8},{type:"high-pass",cutoffHz:210.22,linearGain:1.4142}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,transition:"normal",fadeInSeconds:.0263,fadeOutTicks:12,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"voice ooh",midiProgram:53,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:57,filterEnvelope:"steady",interval:"union",vibrato:"shaky",harmonics:[100,57,43,43,14,14,0,0,0,14,29,29,14,0,14,29,29,14,0,0,0,0,0,0,0,0,0,0]}},{name:"voice synth",midiProgram:54,generalMidi:!0,settings:{type:"chip",transition:"medium fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:57,filterEnvelope:"steady",wave:"rounded",interval:"union",vibrato:"light"}},{name:"vox synth lead",midiProgram:85,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",vibrato:"light",algorithm:"(1 2 3)←4",feedbackType:"1→2→3→4",feedbackAmplitude:2,feedbackEnvelope:"punch",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"9×",amplitude:5,envelope:"custom"},{frequency:"20×",amplitude:1,envelope:"custom"},{frequency:"~1×",amplitude:4,envelope:"steady"}]}},{name:"tiny robot",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"delayed",reverb:33,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"2×",amplitude:15},{frequency:"1×",amplitude:7},{frequency:"~1×",amplitude:7},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:1},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"yowie",midiProgram:85,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,effects:["panning","note filter","reverb"],noteFilterType:!0,noteSimpleCut:6,noteSimplePeak:6,noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:4}],pan:0,panDelay:10,reverb:0,fadeInSeconds:.0413,fadeOutTicks:6,algorithm:"1←2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:12,operators:[{frequency:"2×",amplitude:12,waveform:"sine",pulseWidth:5},{frequency:"16×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:.5,perEnvelopeUpperBound:1},{target:"feedbackAmplitude",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"mouse",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"light",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,operators:[{frequency:"2×",amplitude:13},{frequency:"5×",amplitude:12},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteVolume",envelope:"note size"},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"gumdrop",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:15,envelope:"punch"},{frequency:"4×",amplitude:15,envelope:"punch"},{frequency:"7×",amplitude:15,envelope:"punch"},{frequency:"1×",amplitude:10,envelope:"twang 1"}]}},{name:"echo drop",midiProgram:102,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:11,envelope:"custom"},{frequency:"~1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:2,envelope:"steady"},{frequency:"16×",amplitude:5,envelope:"swell 3"}]}},{name:"dark choir",midiProgram:85,settings:{type:"spectrum",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",spectrum:[43,14,14,14,14,14,14,100,14,14,14,57,14,14,100,14,43,14,43,14,14,43,14,29,14,29,14,14,29,0]}}])},{name:"Brass Presets",presets:w([{name:"trumpet",midiProgram:56,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"flare 2"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"trombone",midiProgram:57,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:7,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"tuba",midiProgram:58,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"muted trumpet",midiProgram:59,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:2.8284},{type:"peak",cutoffHz:4e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:13},{frequency:"1×",amplitude:5},{frequency:"9×",amplitude:5},{frequency:"13×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"french horn",midiProgram:60,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1},{type:"peak",cutoffHz:2378.41,linearGain:2.8284}],effects:["reverb"],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:8}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"swell 1"}]}},{name:"brass section",midiProgram:61,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"swell 1"},{frequency:"~1×",amplitude:10,envelope:"swell 1"}]}},{name:"brass synth 1",midiProgram:62,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:11,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"flare 1"},{frequency:"~1×",amplitude:8,envelope:"flare 2"}]}},{name:"brass synth 2",midiProgram:63,generalMidi:!0,settings:{type:"FM",transition:"soft",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"flare 1"},{frequency:"~1×",amplitude:7,envelope:"flare 1"}]}},{name:"pulse brass",midiProgram:62,settings:{type:"PWM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",pulseWidth:50,pulseEnvelope:"flare 3",vibrato:"none"}}])},{name:"Reed Presets",presets:w([{name:"soprano sax",midiProgram:64,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"4×",amplitude:4,envelope:"swell 1"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"5×",amplitude:4,envelope:"punch"}]}},{name:"alto sax",midiProgram:65,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:4,feedbackEnvelope:"punch",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"4×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:12,envelope:"steady"}]}},{name:"tenor sax",midiProgram:66,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"8×",amplitude:3,envelope:"steady"}]}},{name:"baritone sax",midiProgram:67,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"swell 2",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"8×",amplitude:4,envelope:"steady"},{frequency:"4×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:4,envelope:"punch"}]}},{name:"sax synth",midiProgram:64,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"shehnai",midiProgram:111,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:3,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"oboe",midiProgram:68,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"tremolo5",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:2,envelope:"steady"}]}},{name:"english horn",midiProgram:69,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"punch"},{frequency:"8×",amplitude:4,envelope:"steady"}]}},{name:"bassoon",midiProgram:70,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:707,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"clarinet",midiProgram:71,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}},{name:"harmonica",midiProgram:22,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:778,effects:["panning","note filter","reverb"],noteFilterType:!0,noteSimpleCut:9,noteSimplePeak:2,noteFilter:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],noteSubFilters1:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],pan:0,panDelay:10,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:9,operators:[{frequency:"2×",amplitude:14,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:2,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2},{target:"feedbackAmplitude",envelope:"tremolo2",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}}])},{name:"Flute Presets",presets:w([{name:"flute 1",midiProgram:73,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:9656.85,linearGain:.5}],eqFilterType:!0,eqSimpleCut:9,eqSimplePeak:1,envelopeSpeed:12,discreteEnvelope:!1,preset:832,eqSubFilters1:[],effects:["panning","reverb"],pan:0,panDelay:10,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3 4)",feedbackType:"4⟲",feedbackAmplitude:7,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:4,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"~1×",amplitude:1,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorAmplitude",envelope:"punch",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"feedbackAmplitude",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:7,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"recorder",midiProgram:74,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 2",interval:"union",vibrato:"none",harmonics:[100,43,57,43,57,43,43,43,43,43,43,43,43,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"whistle",midiProgram:78,generalMidi:!0,settings:{type:"harmonics",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"ocarina",midiProgram:79,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,14,57,14,29,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"piccolo",midiProgram:72,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"4⟲",feedbackAmplitude:15,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:5,envelope:"punch"}]}},{name:"shakuhachi",midiProgram:77,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"steady",vibrato:"delayed",algorithm:"1←(2 3←4)",feedbackType:"3→4",feedbackAmplitude:15,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:4,envelope:"twang 1"},{frequency:"20×",amplitude:15,envelope:"steady"}]}},{name:"pan flute",midiProgram:75,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,fadeInSeconds:.0125,fadeOutTicks:-3,spectrum:[100,0,0,0,0,0,0,14,0,0,0,71,0,0,14,0,57,0,29,14,29,14,14,29,14,29,14,14,29,14],envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"punch"}]}},{name:"blown bottle",midiProgram:76,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:4,envelope:"custom"},{frequency:"6×",amplitude:2,envelope:"custom"},{frequency:"11×",amplitude:2,envelope:"custom"}]}},{name:"calliope",midiProgram:82,generalMidi:!0,settings:{type:"spectrum",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",spectrum:[100,0,0,0,0,0,0,86,0,0,0,71,0,0,57,0,43,0,29,14,14,29,14,14,14,14,14,14,14,14]}},{name:"chiffer",midiProgram:83,generalMidi:!0,settings:{type:"spectrum",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",spectrum:[86,0,0,0,0,0,0,71,0,0,0,71,0,0,57,0,57,0,43,14,14,43,14,29,14,29,29,29,29,14]}},{name:"breath noise",midiProgram:121,generalMidi:!0,settings:{type:"spectrum",eqFilter:[],effects:["chord type","note filter","reverb"],chord:"strum",noteFilter:[{type:"high-pass",cutoffHz:840.9,linearGain:.3536},{type:"low-pass",cutoffHz:16e3,linearGain:.3536}],reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,spectrum:[71,0,0,0,0,0,0,29,0,0,0,71,0,0,29,0,100,29,14,29,100,29,100,14,14,71,0,29,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"}]}},{name:"flute 2",midiProgram:73,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"seamless",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}}])},{name:"Pad Presets",presets:w([{name:"new age pad",midiProgram:88,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"2×",amplitude:14},{frequency:"~1×",amplitude:4},{frequency:"6×",amplitude:3},{frequency:"13×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"swell 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"feedbackAmplitude",envelope:"swell 3"}]}},{name:"warm pad",midiProgram:89,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:7,operators:[{frequency:"1×",amplitude:14},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"},{target:"operatorAmplitude",envelope:"swell 1",index:1}]}},{name:"polysynth pad",midiProgram:90,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"honky tonk",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"space voice pad",midiProgram:91,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569},{type:"peak",cutoffHz:2828.43,linearGain:5.6569},{type:"peak",cutoffHz:1414.21,linearGain:.1768}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:8},{frequency:"3×",amplitude:7},{frequency:"11×",amplitude:2}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:3},{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"bowed glass pad",midiProgram:92,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:12},{frequency:"3×",amplitude:7},{frequency:"7×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"flare 3",index:3}]}},{name:"metallic pad",midiProgram:93,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:13,operators:[{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:9},{frequency:"1×",amplitude:7},{frequency:"11×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"swell 2",index:2},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"sweep pad",midiProgram:95,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"atmosphere",midiProgram:99,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["chorus","reverb"],chorus:100,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",algorithm:"1←(2 3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:14},{frequency:"~1×",amplitude:10},{frequency:"3×",amplitude:7},{frequency:"1×",amplitude:7}],envelopes:[{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"twang 2",index:2},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"brightness",midiProgram:100,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:2}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",harmonics:[100,86,86,86,43,57,43,71,43,43,43,57,43,43,57,71,57,43,29,43,57,57,43,29,29,29,29,14],unison:"octave",stringSustain:86,envelopes:[]}},{name:"goblins",midiProgram:101,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2828.43,linearGain:11.3137}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:10,operators:[{frequency:"1×",amplitude:15},{frequency:"4×",amplitude:5},{frequency:"1×",amplitude:10},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 2"},{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"feedbackAmplitude",envelope:"flare 3"}]}},{name:"sci-fi",midiProgram:103,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:9513.66,linearGain:2.8284}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"~1×",amplitude:13},{frequency:"2×",amplitude:10},{frequency:"5×",amplitude:5},{frequency:"11×",amplitude:8}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"tremolo5",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"flutter pad",midiProgram:90,settings:{type:"FM",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:9,operators:[{frequency:"1×",amplitude:13},{frequency:"5×",amplitude:7},{frequency:"7×",amplitude:5},{frequency:"~1×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"operatorAmplitude",envelope:"punch",index:3}]}},{name:"feedback pad",midiProgram:89,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2378.41,linearGain:8}],effects:[],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"custom interval",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:15}],envelopes:[{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"supersaw pad",midiProgram:93,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768}],effects:["reverb"],reverb:100,fadeInSeconds:.0263,fadeOutTicks:24,pulseWidth:50,dynamism:100,spread:58,shape:0,envelopes:[]}}])},{name:"Drum Presets",presets:w([{name:"standard drumset",midiProgram:116,isNoise:!0,settings:{type:"drumset",effects:"reverb",drums:[{filterEnvelope:"twang 1",spectrum:[57,71,71,86,86,86,71,71,71,71,57,57,57,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29,29]},{filterEnvelope:"twang 1",spectrum:[0,0,0,100,71,71,57,86,57,57,57,71,43,43,57,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,100,57,43,43,29,57,43,29,71,43,43,43,43,57,43,43,43,43,43,43,43,43,29,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,0,71,57,43,43,43,57,57,43,29,57,43,43,43,29,43,57,43,43,43,43,43,43,29,43,43]},{filterEnvelope:"decay 2",spectrum:[0,14,29,43,86,71,29,43,43,43,43,29,71,29,71,29,43,43,43,43,57,43,43,57,43,43,43,57,57,57]},{filterEnvelope:"decay 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,57,71,71,71,71,71,71,71,71,57,57,57,57,43,43,43]},{filterEnvelope:"twang 3",spectrum:[43,43,43,71,29,29,43,43,43,29,43,43,43,29,29,43,43,29,29,29,57,14,57,43,43,57,43,43,57,57]},{filterEnvelope:"decay 3",spectrum:[29,43,43,43,43,29,29,43,29,29,43,29,14,29,43,29,43,29,57,29,43,57,43,71,43,71,57,57,71,71]},{filterEnvelope:"twang 3",spectrum:[43,29,29,43,29,29,29,57,29,29,29,57,43,43,29,29,57,43,43,43,71,43,43,71,57,71,71,71,71,71]},{filterEnvelope:"decay 3",spectrum:[57,57,57,43,57,57,43,43,57,43,43,43,71,57,43,57,86,71,57,86,71,57,86,100,71,86,86,86,86,86]},{filterEnvelope:"flare 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,71,71,86,86,100,100,100,100,100,100,100,100,86,57,29,0]},{filterEnvelope:"decay 2",spectrum:[14,14,14,14,29,14,14,29,14,43,14,43,57,86,57,57,100,57,43,43,57,100,57,43,29,14,0,0,0,0]}]}},{name:"steel pan",midiProgram:114,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:.1768}],effects:["note filter","chorus","reverb"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],chorus:67,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"~1×",amplitude:14},{frequency:"7×",amplitude:3},{frequency:"3×",amplitude:5},{frequency:"4×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay 2"},{target:"operatorAmplitude",envelope:"flare 1",index:1},{target:"operatorAmplitude",envelope:"flare 2",index:2},{target:"operatorAmplitude",envelope:"swell 2",index:3}]}},{name:"steel pan synth",midiProgram:114,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3←4",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"~1×",amplitude:12},{frequency:"2×",amplitude:15},{frequency:"4×",amplitude:14},{frequency:"~1×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"operatorAmplitude",envelope:"note size",index:0},{target:"operatorAmplitude",envelope:"note size",index:1},{target:"operatorAmplitude",envelope:"flare 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"flare 1"}]}},{name:"timpani",midiProgram:47,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"peak",cutoffHz:6727.17,linearGain:5.6569}],effects:["pitch shift","note filter","reverb"],pitchShiftSemitones:15,noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[100,0,0,0,86,0,0,71,0,14,43,14,43,43,0,29,43,29,29,29,43,29,43,29,43,43,43,43,43,43],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"pitchShift",envelope:"twang 1"}]}},{name:"dark strike",midiProgram:47,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[0,0,14,14,14,29,29,43,43,86,43,43,43,29,86,29,29,29,86,29,14,14,14,14,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"woodblock",midiProgram:115,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",spectrum:[0,14,29,43,43,57,86,86,71,57,57,43,43,57,86,86,43,43,71,57,57,57,57,57,86,86,71,71,71,71]}},{name:"taiko drum",midiProgram:116,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"twang 1",spectrum:[71,100,100,43,43,71,71,43,43,43,43,43,43,57,29,57,43,57,43,43,57,43,43,43,43,43,43,43,43,43]}},{name:"melodic drum",midiProgram:117,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"twang 1",spectrum:[100,71,71,57,57,43,43,71,43,43,43,57,43,43,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29]}},{name:"drum synth",midiProgram:118,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"decay 1",spectrum:[100,86,71,57,43,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29]}},{name:"tom-tom",midiProgram:116,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",spectrum:[100,29,14,0,0,86,14,43,29,86,29,14,29,57,43,43,43,43,57,43,43,43,29,57,43,43,43,43,43,43]}},{name:"metal pipe",midiProgram:117,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 2",spectrum:[29,43,86,43,43,43,43,43,100,29,14,14,100,14,14,0,0,0,0,0,14,29,29,14,0,0,14,29,0,0]}},{name:"synth kick",midiProgram:47,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-6,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"8×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"}]}}])},{name:"Novelty Presets",presets:w([{name:"guitar fret noise",midiProgram:120,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",spectrum:[0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,29,14,0,0,43,0,43,0,71,43,0,57,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"},{target:"noteVolume",envelope:"twang 2"}]}},{name:"fifth saw lead",midiProgram:86,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142}],chorus:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"fifth swell",midiProgram:86,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:2}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"}]}},{name:"soundtrack",midiProgram:97,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],chorus:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"reverse cymbal",midiProgram:119,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"none",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[29,57,57,29,57,57,29,29,43,29,29,43,29,29,57,57,14,57,14,57,71,71,57,86,57,100,86,86,86,86]}},{name:"seashore",midiProgram:122,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",transition:"soft fade",effects:"reverb",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"swell 3",spectrum:[14,14,29,29,43,43,43,57,57,57,57,57,57,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,57]}},{name:"bird tweet",midiProgram:123,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["chord type","vibrato","reverb"],chord:"strum",vibrato:"heavy",reverb:67,fadeInSeconds:.0575,fadeOutTicks:-6,harmonics:[0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"hum",envelopes:[{target:"noteVolume",envelope:"decay 1"}]}},{name:"telephone ring",midiProgram:124,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"arpeggio",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:12},{frequency:"1×",amplitude:4},{frequency:"20×",amplitude:1},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo4"},{target:"operatorAmplitude",envelope:"tremolo1",index:1}]}},{name:"helicopter",midiProgram:125,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"seamless",chord:"arpeggio",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"tremolo4",spectrum:[14,43,43,57,57,57,71,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,71,71,71,57,57]}},{name:"applause",midiProgram:126,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[14,14,29,29,29,43,43,57,71,71,86,86,86,71,71,57,57,57,71,86,86,86,86,86,71,71,57,57,57,57]}},{name:"gunshot",midiProgram:127,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1414,filterResonance:29,filterEnvelope:"twang 1",spectrum:[14,29,43,43,57,57,57,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,57,57,57,57,43]}},{name:"scoot",midiProgram:92,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:707.11,linearGain:4}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",wave:"double saw",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"}]}},{name:"buzz saw",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:4,operators:[{frequency:"5×",amplitude:13},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:6},{frequency:"11×",amplitude:12}],envelopes:[]}},{name:"mosquito",midiProgram:93,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2}],effects:["vibrato"],vibrato:"shaky",transition:"normal",fadeInSeconds:.0575,fadeOutTicks:-6,chord:"simultaneous",pulseWidth:4.41942,envelopes:[{target:"pulseWidth",envelope:"tremolo6"}]}},{name:"breathing",midiProgram:126,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 2",spectrum:[14,14,14,29,29,29,29,29,43,29,29,43,43,43,29,29,71,43,86,86,57,100,86,86,86,86,71,86,71,57]}},{name:"klaxon synth",midiProgram:125,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"noise",effects:"reverb",transition:"slide",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"steady",wave:"buzz"}},{name:"theremin",midiProgram:40,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.7071}],effects:["vibrato","reverb"],vibrato:"heavy",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-6,chord:"simultaneous",harmonics:[100,71,57,43,29,29,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"none",envelopes:[]}},{name:"sonar ping",midiProgram:121,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",spectrum:[100,43,29,29,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}}])},{name:"UltraBox Presets",presets:w([{name:"nes white",midiProgram:116,generalMidi:!0,isNoise:!0,settings:{type:"noise",eqFilter:[],eqFilterType:!1,eqSimpleCut:8,eqSimplePeak:0,eqSubFilters1:[],effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:0,wave:"1-bit white",envelopes:[]}},{name:"nes ping",midiProgram:116,generalMidi:!0,isNoise:!0,settings:{type:"noise",eqFilter:[],eqFilterType:!1,eqSimpleCut:8,eqSimplePeak:0,eqSubFilters1:[],effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:0,wave:"1-bit metallic",envelopes:[]}},{name:"distorted pulse vocal",generalMidi:!1,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884}],effects:["panning","transition type","pitch shift","vibrato","note filter","bitcrusher","echo","reverb"],transition:"normal",clicklessTransition:!1,pitchShiftSemitones:0,vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:840.9,linearGain:11.3137},{type:"low-pass",cutoffHz:297.3,linearGain:8},{type:"peak",cutoffHz:500,linearGain:11.3137},{type:"high-pass",cutoffHz:62.5,linearGain:1.4142},{type:"peak",cutoffHz:176.78,linearGain:11.3137},{type:"high-pass",cutoffHz:250,linearGain:11.3137}],noteSubFilters0:[{type:"high-pass",cutoffHz:840.9,linearGain:11.3137},{type:"low-pass",cutoffHz:297.3,linearGain:8},{type:"peak",cutoffHz:500,linearGain:11.3137},{type:"high-pass",cutoffHz:62.5,linearGain:1.4142},{type:"peak",cutoffHz:176.78,linearGain:11.3137},{type:"high-pass",cutoffHz:250,linearGain:11.3137}],bitcrusherOctave:6.5,bitcrusherQuantization:71,pan:0,panDelay:10,echoSustain:14,echoDelayBeats:.167,reverb:0,fadeInSeconds:0,fadeOutTicks:-3,wave:"1/8 pulse",unison:"none",envelopes:[]}},{name:"dubsteb bwah",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.7071}],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters1:[],effects:["panning","transition type","chord type"],transition:"interrupt",clicklessTransition:!1,chord:"custom interval",fastTwoNoteArp:!1,arpeggioSpeed:12,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:10,operators:[{frequency:"2×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:13,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"note size"},{target:"operatorAmplitude",envelope:"swell 2",index:1},{target:"operatorAmplitude",envelope:"punch",index:2},{target:"operatorAmplitude",envelope:"note size",index:3}]}},{name:"FM cool bass",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1},{type:"high-pass",cutoffHz:88.39,linearGain:1},{type:"peak",cutoffHz:1e3,linearGain:.7071}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:1},{type:"high-pass",cutoffHz:88.39,linearGain:1},{type:"peak",cutoffHz:1e3,linearGain:.7071}],effects:["panning","transition type","note filter","reverb"],transition:"interrupt",clicklessTransition:!1,noteFilterType:!0,noteSimpleCut:9,noteSimplePeak:2,noteFilter:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],noteSubFilters1:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"13×",amplitude:11,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"},{target:"operatorAmplitude",envelope:"twang 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"twang 2",index:3}]}},{name:"FM funky bass",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.1768}],eqFilterType:!0,eqSimpleCut:5,eqSimplePeak:0,eqSubFilters1:[],effects:["panning","transition type","reverb"],transition:"normal",clicklessTransition:!1,pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:-3,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~1×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"punch"},{target:"noteVolume",envelope:"note size"}]}},{name:"talking bass",generalMidi:!1,settings:{type:"FM",eqFilter:[],effects:["chord type"],chord:"custom interval",fadeInSeconds:0,fadeOutTicks:-3,algorithm:"1←(2 3)←4",feedbackType:"1⟲",feedbackAmplitude:15,operators:[{frequency:"1×",amplitude:15},{frequency:"2×",amplitude:8},{frequency:"2×",amplitude:5},{frequency:"1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"note size",index:2},{target:"operatorAmplitude",envelope:"note size",index:3},{target:"feedbackAmplitude",envelope:"note size"}]}},{name:"synth marimba",generalMidi:!1,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:176.78,linearGain:1},{type:"peak",cutoffHz:4e3,linearGain:.5}],effects:["note filter","echo"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1.4142}],echoSustain:71,echoDelayBeats:.5,fadeInSeconds:0,fadeOutTicks:-1,harmonics:[86,100,29,29,0,0,0,100,0,0,0,86,29,0,14,100,0,0,0,0,0,14,0,0,14,0,0,86],unison:"fifth",stringSustain:7,envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"}]}},{name:"italian accordian",generalMidi:!1,settings:{type:"custom chip",eqFilter:[{type:"low-pass",cutoffHz:6e3,linearGain:.5}],eqFilterType:!0,eqSimpleCut:8,eqSimplePeak:1,eqSubFilters1:[],effects:["panning","chorus","reverb"],pan:0,panDelay:10,chorus:71,reverb:45,fadeInSeconds:.0263,fadeOutTicks:-3,wave:"square",unison:"honky tonk",customChipWave:{0:-24,1:-24,2:-24,3:-24,4:-24,5:-24,6:-24,7:-24,8:-24,9:-24,10:-24,11:-24,12:-24,13:-24,14:-24,15:-24,16:24,17:24,18:24,19:24,20:24,21:24,22:24,23:24,24:-24,25:-24,26:-24,27:-24,28:-24,29:-24,30:-24,31:-24,32:-24,33:-24,34:-24,35:-24,36:-24,37:-24,38:-24,39:-24,40:24,41:24,42:24,43:24,44:24,45:24,46:24,47:24,48:-24,49:-24,50:-24,51:-24,52:-24,53:-24,54:-24,55:-24,56:-24,57:-24,58:-24,59:-24,60:-24,61:-24,62:-24,63:-24},customChipWaveIntegral:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0},envelopes:[]}},{name:"chip supersaw",generalMidi:!1,settings:{type:"custom chip",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.7071}],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters1:[],effects:["panning","transition type","vibrato","chorus","reverb"],transition:"interrupt",clicklessTransition:!1,vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,pan:0,panDelay:10,chorus:29,reverb:29,fadeInSeconds:0,fadeOutTicks:-1,wave:"square",unison:"dissonant",customChipWave:{0:22,1:22,2:16,3:6,4:0,5:-3,6:-8,7:-10,8:-13,9:-16,10:-19,11:-19,12:-20,13:-22,14:-22,15:-24,16:-24,17:-24,18:-24,19:-24,20:-24,21:-24,22:-24,23:-24,24:-24,25:-24,26:-24,27:-24,28:-24,29:-24,30:-24,31:24,32:24,33:16,34:9,35:6,36:4,37:2,38:0,39:-1,40:-3,41:-4,42:-4,43:-6,44:-6,45:-6,46:-6,47:-5,48:-5,49:-4,50:-2,51:-2,52:1,53:4,54:6,55:8,56:10,57:12,58:14,59:16,60:18,61:19,62:22,63:24},customChipWaveIntegral:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0},envelopes:[]}},{name:"fm supersaw",generalMidi:!1,settings:{type:"FM6op",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:1.4142},{type:"high-pass",cutoffHz:148.65,linearGain:.7071}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[{type:"low-pass",cutoffHz:19027.31,linearGain:1.4142},{type:"high-pass",cutoffHz:148.65,linearGain:.7071}],effects:["panning","transition type","pitch shift","note filter","chorus","reverb"],transition:"continue",clicklessTransition:!1,pitchShiftSemitones:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[],noteSubFilters0:[],noteSubFilters1:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],pan:0,panDelay:10,chorus:71,reverb:0,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1 2 3 4 5 6",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:13,waveform:"sawtooth",pulseWidth:5},{frequency:"~1×",amplitude:15,waveform:"sawtooth",pulseWidth:5},{frequency:"2×",amplitude:10,waveform:"sawtooth",pulseWidth:5},{frequency:"3×",amplitude:7,waveform:"sawtooth",pulseWidth:5},{frequency:"4×",amplitude:9,waveform:"sawtooth",pulseWidth:5},{frequency:"8×",amplitude:6,waveform:"sawtooth",pulseWidth:5}],envelopes:[]}},{name:"wind",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:250.03,linearGain:11.3137}],eqFilterType:!0,eqSimpleCut:0,eqSimplePeak:7,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["transition type","reverb"],transition:"continue",clicklessTransition:!1,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3 4)",feedbackType:"1→3 2→4",feedbackAmplitude:15,operators:[{frequency:"16×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"16×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"16×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"16×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[]}},{name:"mrow",generalMidi:!1,settings:{type:"FM",eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[],effects:["panning","chord type","reverb"],chord:"custom interval",fastTwoNoteArp:!1,arpeggioSpeed:12,pan:0,panDelay:10,reverb:35,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,operators:[{frequency:"4×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:9,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorAmplitude",envelope:"flare 1",index:0},{target:"operatorAmplitude",envelope:"note size",index:1},{target:"operatorAmplitude",envelope:"note size",index:2},{target:"operatorAmplitude",envelope:"flare 3",index:3},{target:"feedbackAmplitude",envelope:"flare 1"}]}},{name:"vocal why",generalMidi:!1,settings:{type:"harmonics",eqFilter:[],effects:["note filter","panning","reverb"],noteFilter:[{type:"low-pass",cutoffHz:840.9,linearGain:11.3137}],pan:0,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,harmonics:[100,86,29,29,14,14,0,14,14,43,71,100,100,86,71,71,57,57,43,43,43,43,43,0,0,0,0,0],unison:"octave",envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}}])},{name:"Slarmoo's Box Presets",presets:w([{name:"radio fm",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:1189.21,linearGain:1.4142},{type:"high-pass",cutoffHz:74.33,linearGain:.3536}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:1189.21,linearGain:1.4142},{type:"high-pass",cutoffHz:74.33,linearGain:.3536}],effects:["panning","detune","vibrato","bitcrusher","reverb"],detuneCents:0,vibrato:"none",vibratoDepth:0,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,bitcrusherOctave:6.5,bitcrusherQuantization:43,pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:6,algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:4,operators:[{frequency:"1×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"0.12×",amplitude:7,waveform:"trapezoid",pulseWidth:5},{frequency:"0.5×",amplitude:10,waveform:"triangle",pulseWidth:5},{frequency:"~1×",amplitude:5,waveform:"triangle",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"anguished underworld",generalMidi:!1,settings:{type:"FM6op",eqFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.0884},{type:"high-pass",cutoffHz:148.65,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:13454.34,linearGain:.0884},{type:"high-pass",cutoffHz:148.65,linearGain:.5}],effects:["panning","note filter","distortion","bitcrusher","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:.0884},{type:"high-pass",cutoffHz:420.45,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2}],noteSubFilters0:[{type:"low-pass",cutoffHz:2828.43,linearGain:.0884},{type:"high-pass",cutoffHz:420.45,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2}],noteSubFilters1:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],distortion:43,aliases:!1,bitcrusherOctave:4.5,bitcrusherQuantization:43,pan:0,panDelay:10,reverb:0,fadeInSeconds:.075,fadeOutTicks:6,algorithm:"1 2←4 3←(5 6)",feedbackType:"1→5 2→6 3→4",feedbackAmplitude:4,operators:[{frequency:"0.25×",amplitude:14,waveform:"triangle",pulseWidth:5},{frequency:"0.5×",amplitude:13,waveform:"sawtooth",pulseWidth:5},{frequency:"1×",amplitude:12,waveform:"trapezoid",pulseWidth:5},{frequency:"8×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"0.75×",amplitude:3,waveform:"ramp",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"},{target:"operatorAmplitude",envelope:"decay -1",index:5},{target:"feedbackAmplitude",envelope:"wibble 3"}],isDrum:!1}},{name:"bitcrushed artifacts",generalMidi:!1,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:9656.85,linearGain:.5}],eqFilterType:!0,eqSimpleCut:9,eqSimplePeak:1,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","distortion","bitcrusher","echo"],distortion:71,aliases:!1,bitcrusherOctave:2,bitcrusherQuantization:86,pan:0,panDelay:10,echoSustain:0,echoDelayBeats:1,fadeInSeconds:0,fadeOutTicks:-6,harmonics:[0,0,0,0,0,0,0,57,0,0,0,0,0,0,100,43,0,0,14,86,0,14,0,0,0,0,0,86],unison:"none",stringSustain:14,envelopes:[],isDrum:!1}},{name:"faint sorrow",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4240.89,linearGain:2}],eqFilterType:!0,eqSimpleCut:8,eqSimplePeak:4,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","detune","vibrato","echo","reverb"],detuneCents:22,vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,pan:0,panDelay:10,echoSustain:100,echoDelayBeats:.667,reverb:87,fadeInSeconds:.075,fadeOutTicks:48,algorithm:"1 2 3 4",feedbackType:"1⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"bright sorrow fm",generalMidi:!1,settings:{type:"FM",eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[],effects:["panning","chord type","note filter","echo","reverb"],chord:"strum",fastTwoNoteArp:!1,arpeggioSpeed:12,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:2.8284}],noteSubFilters0:[{type:"low-pass",cutoffHz:2e3,linearGain:2.8284}],noteSubFilters1:[{type:"low-pass",cutoffHz:1414.21,linearGain:1.4142}],pan:0,panDelay:10,echoSustain:71,echoDelayBeats:1.333,reverb:61,fadeInSeconds:0,fadeOutTicks:48,algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,operators:[{frequency:"1×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"wet sorrow fm",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.7071}],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","vibrato","reverb"],vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,pan:0,panDelay:10,reverb:23,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:4,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:2,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorAmplitude",envelope:"decay 3",index:2}],isDrum:!1}},{name:"scream fm",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:2},{type:"high-pass",cutoffHz:250,linearGain:.0884},{type:"peak",cutoffHz:1189.21,linearGain:.3536},{type:"peak",cutoffHz:707.11,linearGain:.125},{type:"peak",cutoffHz:353.55,linearGain:.7071}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:2},{type:"high-pass",cutoffHz:250,linearGain:.0884},{type:"peak",cutoffHz:1189.21,linearGain:.3536},{type:"peak",cutoffHz:707.11,linearGain:.125},{type:"peak",cutoffHz:353.55,linearGain:.7071}],effects:["panning","detune","note filter","distortion","reverb"],detuneCents:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:1681.79,linearGain:.125},{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:2e3,linearGain:11.3137}],noteSubFilters0:[{type:"high-pass",cutoffHz:1681.79,linearGain:.125},{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:2e3,linearGain:11.3137}],distortion:0,aliases:!1,pan:0,panDelay:10,reverb:87,fadeInSeconds:.135,fadeOutTicks:-3,algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:11,operators:[{frequency:"4×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"7×",amplitude:5,waveform:"triangle",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"detune",envelope:"swell 1"},{target:"feedbackAmplitude",envelope:"tremolo4"}],isDrum:!1}},{name:"whistle 2",generalMidi:!1,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2110.37,linearGain:1.4142}],eqFilterType:!0,eqSimpleCut:6,eqSimplePeak:3,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","transition type","pitch shift","note filter","distortion","echo","reverb"],transition:"normal",clicklessTransition:!1,pitchShiftSemitones:11,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:1414.21,linearGain:2},{type:"high-pass",cutoffHz:88.39,linearGain:2},{type:"peak",cutoffHz:1681.79,linearGain:4}],noteSubFilters0:[{type:"low-pass",cutoffHz:1414.21,linearGain:2},{type:"high-pass",cutoffHz:88.39,linearGain:2},{type:"peak",cutoffHz:1681.79,linearGain:4}],distortion:43,aliases:!1,pan:0,panDelay:10,echoSustain:57,echoDelayBeats:1.083,reverb:87,fadeInSeconds:.0575,fadeOutTicks:-1,harmonics:[57,0,0,0,0,0,0,0,0,86,57,0,0,0,0,0,0,0,86,0,0,0,57,29,0,29,100,0],unison:"none",envelopes:[{target:"pitchShift",envelope:"decay 1"}],isDrum:!1}},{name:"anguished radio fm pad",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:9513.66,linearGain:4},{type:"peak",cutoffHz:353.55,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:62.5,linearGain:.0884},{type:"peak",cutoffHz:9513.66,linearGain:4},{type:"peak",cutoffHz:353.55,linearGain:.0884}],eqSubFilters4:[],effects:["panning","detune","note filter","bitcrusher","chorus","echo","reverb"],detuneCents:-16,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[],noteSubFilters0:[],noteSubFilters1:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:11313.71,linearGain:11.3137}],noteSubFilters2:[{type:"low-pass",cutoffHz:105.11,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:11313.71,linearGain:11.3137}],noteSubFilters4:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:11313.71,linearGain:11.3137}],bitcrusherOctave:5.5,bitcrusherQuantization:43,pan:0,panDelay:10,chorus:29,echoSustain:43,echoDelayBeats:1,reverb:58,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1←3 2←4",feedbackType:"1→3",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"juicy kick",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:11.3137},{type:"low-pass",cutoffHz:5656.85,linearGain:.3536},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1189.21,linearGain:.0884},{type:"peak",cutoffHz:594.6,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:62.5,linearGain:11.3137},{type:"low-pass",cutoffHz:5656.85,linearGain:.3536},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1189.21,linearGain:.0884},{type:"peak",cutoffHz:594.6,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884}],effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-6,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"20×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"}],isDrum:!1}},{name:"frog wuh",generalMidi:!1,settings:{type:"spectrum",eqFilter:[{type:"high-pass",cutoffHz:594.6,linearGain:.5},{type:"peak",cutoffHz:6727.17,linearGain:8},{type:"low-pass",cutoffHz:13454.34,linearGain:.125}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:594.6,linearGain:.5},{type:"peak",cutoffHz:6727.17,linearGain:8},{type:"low-pass",cutoffHz:13454.34,linearGain:.125}],eqSubFilters1:[],effects:["panning","pitch shift","note filter"],pitchShiftSemitones:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:1e3,linearGain:1}],noteSubFilters0:[{type:"low-pass",cutoffHz:1e3,linearGain:1}],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,spectrum:[100,29,14,29,0,14,0,71,0,43,14,71,0,0,71,14,100,0,71,0,43,86,43,0,43,0,0,43,29,29],envelopes:[{target:"pitchShift",envelope:"twang 1"},{target:"noteFilterAllFreqs",envelope:"twang 1"}],isDrum:!1}},{name:"stationary harmonics",generalMidi:!1,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:353.55,linearGain:1},{type:"peak",cutoffHz:1189.21,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:353.55,linearGain:1},{type:"peak",cutoffHz:1189.21,linearGain:.5}],effects:["panning","transition type","chord type","vibrato"],transition:"continue",clicklessTransition:!1,chord:"simultaneous",fastTwoNoteArp:!1,arpeggioSpeed:12,vibrato:"shaky",vibratoDepth:.1,vibratoDelay:0,vibratoSpeed:10,vibratoType:1,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:12,harmonics:[100,0,57,29,14,57,29,29,14,14,29,43,14,14,14,0,14,29,29,14,0,0,14,0,0,29,14,14],unison:"stationary",envelopes:[],isDrum:!1}},{name:"good vibes supersaw",generalMidi:!1,settings:{type:"supersaw",eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:6,discreteEnvelope:!1,pitchEnvelopeStart:37,pitchEnvelopeEnd:96,pitchEnvelopeInverse:!0,eqSubFilters0:[],effects:["panning","transition type","detune","chorus","reverb"],transition:"interrupt",clicklessTransition:!1,detuneCents:30,pan:0,panDelay:10,chorus:14,reverb:23,fadeInSeconds:.0263,fadeOutTicks:12,pulseWidth:26,decimalOffset:0,dynamism:33,spread:33,shape:17,envelopes:[{target:"supersawShape",envelope:"pitch"},{target:"detune",envelope:"tremolo2"}],isDrum:!1}},{name:"ethereal",generalMidi:!1,isNoise:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"peak",cutoffHz:4e3,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:6727.17,linearGain:.0884},{type:"high-pass",cutoffHz:88.39,linearGain:1.4142}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:4,discreteEnvelope:!1,eqSubFilters0:[{type:"peak",cutoffHz:4e3,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:6727.17,linearGain:.0884},{type:"high-pass",cutoffHz:88.39,linearGain:1.4142}],eqSubFilters1:[],effects:["panning","transition type","chord type","pitch shift","detune","vibrato","note filter","bitcrusher","chorus","reverb"],transition:"continue",clicklessTransition:!1,chord:"simultaneous",fastTwoNoteArp:!1,arpeggioSpeed:12,pitchShiftSemitones:12,detuneCents:36,vibrato:"custom",vibratoDepth:.12,vibratoDelay:36,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"peak",cutoffHz:2828.43,linearGain:.0884},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"low-pass",cutoffHz:6727.17,linearGain:.0884},{type:"high-pass",cutoffHz:420.45,linearGain:.7071}],noteSubFilters0:[{type:"peak",cutoffHz:2828.43,linearGain:.0884},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"low-pass",cutoffHz:6727.17,linearGain:.0884},{type:"high-pass",cutoffHz:420.45,linearGain:.7071}],bitcrusherOctave:4.5,bitcrusherQuantization:43,pan:0,panDelay:10,chorus:71,reverb:100,fadeInSeconds:0,fadeOutTicks:-1,spectrum:[43,0,0,0,0,0,0,71,0,0,0,57,0,0,57,0,43,0,43,0,0,29,0,29,0,14,14,14,0,0],unison:"none",pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,pitchEnvelopeStart1:0,pitchEnvelopeEnd1:96,envelopeInverse1:!1,pitchEnvelopeStart2:0,pitchEnvelopeEnd2:96,envelopeInverse2:!1,envelopes:[{target:"noteVolume",envelope:"note size"},{target:"detune",envelope:"tremolo3"},{target:"bitcrusherQuantization",envelope:"note size"}],isDrum:!1}},{name:"walrus wuh",generalMidi:!1,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25},{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"peak",cutoffHz:4756.83,linearGain:.0884},{type:"peak",cutoffHz:3363.59,linearGain:.0884},{type:"peak",cutoffHz:74.33,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,pitchEnvelopeStart:0,pitchEnvelopeEnd:96,pitchEnvelopeInverse:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25},{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"peak",cutoffHz:4756.83,linearGain:.0884},{type:"peak",cutoffHz:3363.59,linearGain:.0884},{type:"peak",cutoffHz:74.33,linearGain:2.8284}],effects:["panning","note filter","bitcrusher","chorus","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:.125}],noteSubFilters0:[{type:"low-pass",cutoffHz:11313.71,linearGain:.125}],bitcrusherOctave:4,bitcrusherQuantization:71,pan:0,panDelay:10,chorus:86,reverb:32,fadeInSeconds:.0263,fadeOutTicks:48,pulseWidth:50,decimalOffset:0,dynamism:100,spread:50,shape:0,envelopes:[{target:"noteVolume",envelope:"punch"},{target:"bitcrusherQuantization",envelope:"decay 3"}],isDrum:!1}},{name:"saturnic",generalMidi:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:4240.89,linearGain:2}],eqFilterType:!0,eqSimpleCut:8,eqSimplePeak:4,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","vibrato","chorus","echo","reverb"],vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,pan:0,panDelay:10,chorus:100,echoSustain:71,echoDelayBeats:.5,reverb:45,fadeInSeconds:.0125,fadeOutTicks:72,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:15,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"glassy harmonics",generalMidi:!1,settings:{type:"harmonics",volume:0,eqFilter:[{type:"low-pass",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:840.9,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:840.9,linearGain:.5}],effects:["panning","detune","note filter","chorus","reverb"],detuneCents:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[],noteSubFilters0:[],pan:0,panDelay:10,chorus:14,reverb:29,fadeInSeconds:0,fadeOutTicks:-3,harmonics:[100,0,43,29,0,100,0,0,0,0,0,0,0,0,14,29,14,0,14,0,0,0,0,100,0,0,14,0],unison:"none",envelopes:[],isDrum:!1}},{name:"plucked",generalMidi:!1,settings:{type:"Picked String",volume:0,eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:4756.83,linearGain:.0884}],effects:["panning","transition type","echo","reverb"],transition:"interrupt",clicklessTransition:!1,pan:0,panDelay:10,echoSustain:100,echoDelayBeats:1.333,reverb:26,fadeInSeconds:0,fadeOutTicks:24,harmonics:[100,86,57,0,0,57,57,57,86,57,57,43,43,43,29,29,14,14,29,14,14,14,29,100,57,43,14,14],unison:"none",stringSustain:14,envelopes:[],isDrum:!1}},{name:"spectrum wind",generalMidi:!1,isNoise:!0,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.7071}],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","note filter","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:1.4142}],noteSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:1.4142}],pan:0,panDelay:10,reverb:87,fadeInSeconds:0,fadeOutTicks:12,spectrum:[29,0,0,0,0,0,0,71,0,0,0,14,57,14,0,57,57,0,0,57,0,71,14,29,100,71,0,100,14,86],unison:"none",envelopes:[],isDrum:!0}},{name:"hi-hat",generalMidi:!1,isNoise:!0,settings:{type:"noise",volume:0,eqFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.3536},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:16e3,linearGain:.3536},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],eqSubFilters1:[{type:"low-pass",cutoffHz:16e3,linearGain:.3536},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],eqSubFilters2:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],eqSubFilters3:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,wave:"white",unison:"none",envelopes:[],isDrum:!0}},{name:"jungle bass",generalMidi:!1,isNoise:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.0884},{type:"peak",cutoffHz:148.65,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.0884},{type:"peak",cutoffHz:148.65,linearGain:.0884}],effects:["panning","vibrato","note filter","chorus","reverb"],vibrato:"none",vibratoDepth:0,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:297.3,linearGain:1},{type:"peak",cutoffHz:74.33,linearGain:.0884}],noteSubFilters0:[{type:"low-pass",cutoffHz:297.3,linearGain:1},{type:"peak",cutoffHz:74.33,linearGain:.0884}],pan:0,panDelay:10,chorus:14,reverb:3,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1←3 2←4",feedbackType:"1↔2 3↔4",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"8×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,pitchEnvelopeStart1:0,pitchEnvelopeEnd1:96,envelopeInverse1:!1,pitchEnvelopeStart2:12,pitchEnvelopeEnd2:28,envelopeInverse2:!1,envelopes:[{target:"operatorFrequency",envelope:"swell 3",index:0},{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"noteFilterFreq",envelope:"pitch",index:0}],isDrum:!1}},{name:"beach tide",generalMidi:!1,isNoise:!1,settings:{type:"harmonics",volume:0,eqFilter:[{type:"high-pass",cutoffHz:594.6,linearGain:.3536},{type:"low-pass",cutoffHz:13454.34,linearGain:.1768},{type:"peak",cutoffHz:8e3,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:594.6,linearGain:.3536},{type:"low-pass",cutoffHz:13454.34,linearGain:.1768},{type:"peak",cutoffHz:8e3,linearGain:.0884}],effects:["panning","transition type","chord type","note filter","chorus","reverb"],transition:"continue",clicklessTransition:!1,chord:"simultaneous",fastTwoNoteArp:!1,arpeggioSpeed:12,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:420.45,linearGain:1},{type:"peak",cutoffHz:5656.85,linearGain:.1768}],noteSubFilters0:[{type:"high-pass",cutoffHz:420.45,linearGain:1},{type:"peak",cutoffHz:5656.85,linearGain:.1768}],pan:0,panDelay:10,chorus:14,reverb:32,fadeInSeconds:.0938,fadeOutTicks:72,harmonics:[86,86,71,57,57,43,43,43,29,29,14,14,14,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0],unison:"none",pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,envelopes:[{target:"noteFilterAllFreqs",envelope:"pitch"}],isDrum:!1}},{name:"starlight",generalMidi:!1,isNoise:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.0884}],effects:["panning","transition type","vibrato","bitcrusher","echo","reverb"],transition:"continue",clicklessTransition:!1,vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,bitcrusherOctave:5.5,bitcrusherQuantization:29,pan:0,panDelay:10,echoSustain:29,echoDelayBeats:1,reverb:13,fadeInSeconds:0,fadeOutTicks:24,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"distant monument",generalMidi:!1,isNoise:!1,settings:{type:"chip",volume:0,eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1},{type:"peak",cutoffHz:11313.71,linearGain:.25},{type:"peak",cutoffHz:500,linearGain:.125},{type:"peak",cutoffHz:210.22,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:5.6569}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:3363.59,linearGain:1},{type:"peak",cutoffHz:11313.71,linearGain:.25},{type:"peak",cutoffHz:500,linearGain:.125},{type:"peak",cutoffHz:210.22,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:5.6569}],effects:["panning","transition type","chord type","detune","bitcrusher","chorus","echo","reverb"],transition:"normal",clicklessTransition:!1,chord:"strum",fastTwoNoteArp:!1,arpeggioSpeed:12,detuneCents:24,bitcrusherOctave:2.5,bitcrusherQuantization:14,pan:0,panDelay:10,chorus:86,echoSustain:71,echoDelayBeats:1,reverb:35,fadeInSeconds:.0413,fadeOutTicks:12,wave:"modbox pnryshk a (u5)",unison:"detune",isUsingAdvancedLoopControls:!1,chipWaveLoopStart:0,chipWaveLoopEnd:11,chipWaveLoopMode:0,chipWavePlayBackwards:!1,chipWaveStartOffset:0,pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,pitchEnvelopeStart1:0,pitchEnvelopeEnd1:96,envelopeInverse1:!1,envelopes:[{target:"noteVolume",envelope:"punch"},{target:"noteVolume",envelope:"twang 1"}],isDrum:!1}},{name:"mercurial",generalMidi:!1,isNoise:!1,settings:{type:"FM6op",volume:0,eqFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:.5},{type:"peak",cutoffHz:88.39,linearGain:2.8284},{type:"peak",cutoffHz:1189.21,linearGain:.1768}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:11313.71,linearGain:.5},{type:"peak",cutoffHz:88.39,linearGain:2.8284},{type:"peak",cutoffHz:1189.21,linearGain:.1768}],eqSubFilters1:[],effects:["panning","distortion","chorus"],distortion:43,aliases:!1,pan:0,panDelay:10,chorus:43,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"Custom",feedbackType:"1⟲",feedbackAmplitude:8,customAlgorithm:{mods:[[3],[5],[4],[],[6],[]],carrierCount:2},operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"0.5×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:2,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorFrequency",envelope:"linear",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"distortion",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:20,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"air hiss",generalMidi:!1,isNoise:!0,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],eqFilterType:!0,eqSimpleCut:7,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","note filter","distortion","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"high-pass",cutoffHz:2828.43,linearGain:.3536}],noteSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"high-pass",cutoffHz:2828.43,linearGain:.3536}],distortion:71,aliases:!1,pan:0,panDelay:10,reverb:6,fadeInSeconds:0,fadeOutTicks:-24,spectrum:[57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,57,71,86,100,100,100,100,86,71,71,43],unison:"none",envelopes:[],isDrum:!0}},{name:"dead souls",generalMidi:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"high-pass",cutoffHz:353.55,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:1.4142}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!0,eqSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"high-pass",cutoffHz:353.55,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:1.4142}],effects:["panning","transition type","chord type","pitch shift","detune","distortion","chorus","reverb"],transition:"interrupt",clicklessTransition:!1,chord:"arpeggio",fastTwoNoteArp:!1,arpeggioSpeed:12,pitchShiftSemitones:24,detuneCents:-200,distortion:100,aliases:!1,pan:0,panDelay:10,chorus:14,reverb:35,fadeInSeconds:0,fadeOutTicks:-1,spectrum:[100,71,43,43,29,29,29,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,14,14,0,0],unison:"none",envelopes:[{target:"pitchShift",envelope:"random",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:24,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1.2,steps:16,seed:37,waveform:0},{target:"noteVolume",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0},{target:"detune",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0},{target:"distortion",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0}],isDrum:!1}},{name:"spectral phaser",generalMidi:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536},{type:"high-pass",cutoffHz:74.33,linearGain:.25}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:10,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["panning","note filter","distortion","bitcrusher","chorus","echo","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"peak",cutoffHz:9513.66,linearGain:5.6569},{type:"peak",cutoffHz:5656.85,linearGain:.0884},{type:"peak",cutoffHz:2828.43,linearGain:4},{type:"peak",cutoffHz:1414.21,linearGain:.125},{type:"peak",cutoffHz:707.11,linearGain:4},{type:"peak",cutoffHz:353.55,linearGain:.1768},{type:"peak",cutoffHz:148.65,linearGain:4},{type:"peak",cutoffHz:88.39,linearGain:.1768}],noteSubFilters0:[{type:"peak",cutoffHz:9513.66,linearGain:5.6569},{type:"peak",cutoffHz:5656.85,linearGain:.0884},{type:"peak",cutoffHz:2828.43,linearGain:4},{type:"peak",cutoffHz:1414.21,linearGain:.125},{type:"peak",cutoffHz:707.11,linearGain:4},{type:"peak",cutoffHz:353.55,linearGain:.1768},{type:"peak",cutoffHz:148.65,linearGain:4},{type:"peak",cutoffHz:88.39,linearGain:.1768}],distortion:14,aliases:!1,bitcrusherOctave:6,bitcrusherQuantization:14,pan:0,panDelay:10,chorus:100,echoSustain:86,echoDelayBeats:1,reverb:32,fadeInSeconds:0,fadeOutTicks:48,spectrum:[86,0,0,0,57,0,0,71,0,0,0,86,0,0,57,0,43,0,43,0,0,43,0,29,0,29,14,14,29,14],unison:"piano",envelopes:[{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.07,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:0},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.06,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:1},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.05,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.04,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.09,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:4},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.08,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:5},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:6},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.03,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:7},{target:"distortion",envelope:"none",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:.3}],isDrum:!1}},{name:"shaker",generalMidi:!1,isNoise:!0,settings:{type:"noise",volume:0,eqFilter:[{type:"high-pass",cutoffHz:4e3,linearGain:5.6569},{type:"peak",cutoffHz:4756.83,linearGain:.0884},{type:"low-pass",cutoffHz:11313.71,linearGain:8},{type:"peak",cutoffHz:2378.41,linearGain:.25}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:6,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:4e3,linearGain:5.6569},{type:"peak",cutoffHz:4756.83,linearGain:.0884},{type:"low-pass",cutoffHz:11313.71,linearGain:8},{type:"peak",cutoffHz:2378.41,linearGain:.25}],effects:["panning","transition type","detune","distortion","bitcrusher","chorus","echo","reverb"],transition:"interrupt",clicklessTransition:!1,detuneCents:30,distortion:43,aliases:!1,bitcrusherOctave:2.5,bitcrusherQuantization:43,pan:0,panDelay:10,chorus:43,echoSustain:29,echoDelayBeats:1,reverb:23,fadeInSeconds:.0263,fadeOutTicks:96,wave:"deep",unison:"none",envelopes:[{target:"none",envelope:"pitch",pitchEnvelopeStart:37,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"detune",envelope:"tremolo2",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"bitcrusherQuantization",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteVolume",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteVolume",envelope:"flare",pitchEnvelopeStart:0,pitchEnvelopeEnd:12,inverse:!1,perEnvelopeSpeed:64,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!0}},{name:"distant sorrow",generalMidi:!1,settings:{type:"harmonics",volume:0,eqFilter:[{type:"high-pass",cutoffHz:707.11,linearGain:4},{type:"peak",cutoffHz:5656.85,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:707.11,linearGain:4},{type:"peak",cutoffHz:5656.85,linearGain:.5}],effects:["panning","transition type","detune","vibrato","note filter","echo","reverb"],transition:"interrupt",clicklessTransition:!1,detuneCents:0,vibrato:"custom",vibratoDepth:.2,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25}],noteSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25}],pan:0,panDelay:10,echoSustain:100,echoDelayBeats:1,reverb:74,fadeInSeconds:0,fadeOutTicks:24,harmonics:[86,71,57,43,43,29,57,0,14,0,29,29,29,29,29,43,43,43,43,43,57,57,57,0,57,57,0,0],unison:"none",envelopes:[{target:"noteVolume",envelope:"fall",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteFilterAllFreqs",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2.5,perEnvelopeLowerBound:.5,perEnvelopeUpperBound:2}],isDrum:!1}},{name:"metallic kick",generalMidi:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:28,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],effects:["panning"],pan:0,panDelay:0,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3 4)",feedbackType:"1→2→3→4",feedbackAmplitude:15,operators:[{frequency:"8×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"256x",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"128x",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"256x",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorFrequency",envelope:"twang",inverse:!1,perEnvelopeSpeed:16,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:0},{target:"noteVolume",envelope:"twang",inverse:!1,perEnvelopeSpeed:3.5,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"feedbackAmplitude",envelope:"twang",inverse:!1,perEnvelopeSpeed:256,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",inverse:!1,perEnvelopeSpeed:256,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:1},{target:"operatorAmplitude",envelope:"twang",inverse:!1,perEnvelopeSpeed:256,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"operatorAmplitude",envelope:"twang",inverse:!1,perEnvelopeSpeed:256,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2}],isDrum:!1}}])},{name:"Slarmoo's Box Chip Presets",presets:w([{name:"Slarmoo's Pulse",generalMidi:!1,settings:{type:"PWM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[],effects:["panning","transition type","chord type","detune"],transition:"interrupt",clicklessTransition:!1,chord:"arpeggio",fastTwoNoteArp:!0,arpeggioSpeed:8,detuneCents:24,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,pulseWidth:50,decimalOffset:0,unison:"none",pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,envelopes:[{target:"detune",envelope:"pitch"}],isDrum:!1}},{name:"discovery square",generalMidi:!1,settings:{type:"chip",volume:0,eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["panning","bitcrusher"],bitcrusherOctave:5.5,bitcrusherQuantization:57,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,wave:"square",unison:"octave",isUsingAdvancedLoopControls:!1,chipWaveLoopStart:0,chipWaveLoopEnd:2,chipWaveLoopMode:0,chipWavePlayBackwards:!1,chipWaveStartOffset:0,envelopes:[],isDrum:!1}},{name:"VRC6 Sawtooth alt",generalMidi:!1,settings:{type:"custom chip",volume:0,eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:62.5,linearGain:.5}],effects:["panning","transition type","chord type","pitch shift","detune","vibrato","distortion"],transition:"interrupt",clicklessTransition:!1,chord:"arpeggio",fastTwoNoteArp:!0,arpeggioSpeed:12,pitchShiftSemitones:12,detuneCents:0,vibrato:"none",vibratoDepth:0,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,distortion:0,aliases:!1,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,wave:"square",unison:"none",customChipWave:{0:-1,1:-1,2:-1,3:-1,4:-1,5:-1,6:-1,7:-1,8:-1,9:-5,10:-5,11:-5,12:-4,13:-4,14:-4,15:-3,16:-3,17:-3,18:-7,19:-7,20:-6,21:-6,22:-5,23:-5,24:-4,25:-4,26:-4,27:-7,28:-7,29:-6,30:-6,31:-5,32:-5,33:-4,34:-4,35:-4,36:-8,37:-8,38:-7,39:-7,40:-6,41:-6,42:-5,43:-5,44:-4,45:-4,46:21,47:20,48:18,49:17,50:16,51:14,52:13,53:12,54:11,55:7,56:6,57:6,58:5,59:5,60:5,61:4,62:4,63:4},customChipWaveIntegral:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0},envelopes:[],isDrum:!1}}])},{name:"Slarmoo's Box Instrumental Presets",presets:w([{name:"rusty flute",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:13454.34,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"peak",cutoffHz:13454.34,linearGain:2.8284}],effects:["panning","transition type","detune","distortion","reverb"],transition:"normal",clicklessTransition:!1,detuneCents:-7,distortion:14,aliases:!1,pan:0,panDelay:10,reverb:100,fadeInSeconds:0,fadeOutTicks:96,algorithm:"1←2←3←4",feedbackType:"3→4",feedbackAmplitude:8,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:4,waveform:"sine",pulseWidth:5},{frequency:"20×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"bitcrushed piano",generalMidi:!1,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2.8284}],effects:["panning","transition type","detune","distortion","bitcrusher"],transition:"continue",clicklessTransition:!1,detuneCents:0,distortion:29,aliases:!0,bitcrusherOctave:4,bitcrusherQuantization:43,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,wave:"triangle",unison:"none",isUsingAdvancedLoopControls:!1,chipWaveLoopStart:0,chipWaveLoopEnd:32,chipWaveLoopMode:0,chipWavePlayBackwards:!1,chipWaveStartOffset:0,envelopes:[],isDrum:!1}},{name:"detuned piano",generalMidi:!1,settings:{type:"Picked String",volume:0,eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2.8284}],effects:["panning","transition type","detune","vibrato","note filter","bitcrusher"],transition:"continue",clicklessTransition:!1,detuneCents:44,vibrato:"custom",vibratoDepth:.04,vibratoDelay:13,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:420.45,linearGain:1}],noteSubFilters0:[{type:"high-pass",cutoffHz:420.45,linearGain:1}],bitcrusherOctave:4,bitcrusherQuantization:14,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,harmonics:[86,86,71,71,57,57,43,29,14,29,29,29,29,29,29,29,29,43,43,43,43,43,29,14,14,0,0,0],unison:"custom",unisonVoices:2,unisonSpread:.26,unisonOffset:0,unisonExpression:1,unisonSign:1,stringSustain:79,envelopes:[{target:"detune",envelope:"random",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:49,waveform:1},{target:"noteVolume",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1.6667,perEnvelopeLowerBound:.4,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0},{target:"unison",envelope:"random",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:20,waveform:1},{target:"noteFilterAllFreqs",envelope:"pitch",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0}],isDrum:!1}},{name:"pan flute 2",generalMidi:!1,isNoise:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"peak",cutoffHz:2828.43,linearGain:2},{type:"high-pass",cutoffHz:594.6,linearGain:.3536},{type:"low-pass",cutoffHz:8e3,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"peak",cutoffHz:2828.43,linearGain:2},{type:"high-pass",cutoffHz:594.6,linearGain:.3536},{type:"low-pass",cutoffHz:8e3,linearGain:.5}],effects:["panning","transition type","note filter","bitcrusher","reverb"],transition:"continue",clicklessTransition:!1,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],noteSubFilters0:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],noteSubFilters1:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],bitcrusherOctave:6,bitcrusherQuantization:57,pan:0,panDelay:10,reverb:16,fadeInSeconds:.0125,fadeOutTicks:-6,spectrum:[100,29,14,14,57,0,0,71,0,86,57,43,57,71,14,29,14,14,14,100,71,14,14,14,14,86,43,14,0,0],unison:"none",pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,pitchEnvelopeStart1:0,pitchEnvelopeEnd1:96,envelopeInverse1:!1,pitchEnvelopeStart2:0,pitchEnvelopeEnd2:96,envelopeInverse2:!1,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"},{target:"bitcrusherQuantization",envelope:"note size"},{target:"noteVolume",envelope:"note size"}],isDrum:!1}},{name:"trumpet 2",generalMidi:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:3049.17,linearGain:1.4142}],eqFilterType:!0,eqSimpleCut:7,eqSimplePeak:3,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","detune","vibrato","note filter","distortion","chorus","reverb"],detuneCents:-64,vibrato:"custom",vibratoDepth:.68,vibratoDelay:17,vibratoSpeed:12,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:.1768},{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],noteSubFilters0:[{type:"low-pass",cutoffHz:13454.34,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:.1768},{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],distortion:29,aliases:!1,pan:0,panDelay:10,chorus:14,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1 2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:9,operators:[{frequency:"0.75×",amplitude:14,waveform:"pulse width",pulseWidth:2},{frequency:"1×",amplitude:14,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorAmplitude",envelope:"flare",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"feedbackAmplitude",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorFrequency",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:128,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:0},{target:"noteFilterFreq",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2.5,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2},{target:"noteVolume",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"detune",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"harp 2",generalMidi:!1,settings:{type:"FM6op",volume:0,eqFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.0884},{type:"peak",cutoffHz:1e3,linearGain:2.8284},{type:"high-pass",cutoffHz:62.5,linearGain:.25},{type:"high-pass",cutoffHz:148.65,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:13454.34,linearGain:.0884},{type:"peak",cutoffHz:1e3,linearGain:2.8284},{type:"high-pass",cutoffHz:62.5,linearGain:.25},{type:"high-pass",cutoffHz:148.65,linearGain:.5}],eqSubFilters1:[],effects:["panning","detune","note filter","echo","reverb"],detuneCents:-23,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.0884},{type:"peak",cutoffHz:105.11,linearGain:2.8284}],noteSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.0884},{type:"peak",cutoffHz:105.11,linearGain:2.8284}],pan:0,panDelay:10,echoSustain:29,echoDelayBeats:1.083,reverb:74,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←4 2←5 3←6",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"6×",amplitude:12,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:2,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:4,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorFrequency",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:1},{target:"detune",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:7,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteFilterFreq",envelope:"tremolo2",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:0},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:4},{target:"operatorAmplitude",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:8,perEnvelopeLowerBound:.4,perEnvelopeUpperBound:1,index:0},{target:"noteVolume",envelope:"punch",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}}])}]);class C{constructor(){this.i=1,this.o=[void 0],this.l=0,this.p=0,this.h=0}pushFront(e){this.h>=this.i&&this.u(),this.p=this.p-1&this.l,this.o[this.p]=e,this.h++}pushBack(e){this.h>=this.i&&this.u(),this.o[this.p+this.h&this.l]=e,this.h++}popFront(){if(this.h<=0)throw new Error("No elements left to pop.");const e=this.o[this.p];return this.o[this.p]=void 0,this.p=this.p+1&this.l,this.h--,e}popBack(){if(this.h<=0)throw new Error("No elements left to pop.");this.h--;const e=this.p+this.h&this.l,t=this.o[e];return this.o[e]=void 0,t}peakFront(){if(this.h<=0)throw new Error("No elements left to pop.");return this.o[this.p]}peakBack(){if(this.h<=0)throw new Error("No elements left to pop.");return this.o[this.p+this.h-1&this.l]}count(){return this.h}set(e,t){if(e<0||e>=this.h)throw new Error("Invalid index");this.o[this.p+e&this.l]=t}get(e){if(e<0||e>=this.h)throw new Error("Invalid index");return this.o[this.p+e&this.l]}remove(e){if(e<0||e>=this.h)throw new Error("Invalid index");if(e<=this.h>>1){for(;e>0;)this.set(e,this.get(e-1)),e--;this.popFront()}else{for(e++;e<this.h;)this.set(e-1,this.get(e)),e++;this.popBack()}}u(){if(this.i>=1073741824)throw new Error("Capacity too big.");this.i=this.i<<1;const e=this.o,t=new Array(this.i),i=0|this.h,n=0|this.p;for(let s=0;s<i;s++)t[s]=e[n+s&this.l];for(let e=i;e<this.i;e++)t[e]=void 0;this.p=0,this.o=t,this.l=this.i-1}}const A=new class{constructor(){this.activeEvents=[],this.listeners={},this.activeEvents=[],this.listeners={}}raise(e,t,i){if(null!=this.listeners[e]){this.activeEvents.push(e);for(let n=0;n<this.listeners[e].length;n++)this.listeners[e][n](t,i);this.activeEvents.pop()}}listen(e,t){null==this.listeners[e]&&(this.listeners[e]=[]),this.listeners[e].push(t)}unlisten(e,t){if(null==this.listeners[e])return;const i=this.listeners[e].indexOf(t);-1!=i&&this.listeners[e].splice(i,1)}unlistenAll(e){null!=this.listeners[e]&&(this.listeners[e]=[])}};class N{constructor(){this.a=[1],this.b=[1],this.order=0}linearGain0thOrder(e){this.b[0]=e,this.order=0}lowPass1stOrderButterworth(e){const t=1/Math.tan(.5*e),i=1+t;this.a[1]=(1-t)/i,this.b[1]=this.b[0]=1/i,this.order=1}lowPass1stOrderSimplified(e){const t=2*Math.sin(.5*e);this.a[1]=t-1,this.b[0]=t,this.b[1]=0,this.order=1}highPass1stOrderButterworth(e){const t=1/Math.tan(.5*e),i=1+t;this.a[1]=(1-t)/i,this.b[0]=t/i,this.b[1]=-t/i,this.order=1}highShelf1stOrder(e,t){const i=Math.tan(.5*e),n=Math.sqrt(t),s=(i*n-1)/(i*n+1);this.a[1]=s/1,this.b[0]=(1+s+t*(1-s))/2,this.b[1]=(1+s-t*(1-s))/2,this.order=1}allPass1stOrderInvertPhaseAbove(e){const t=(Math.sin(e)-1)/Math.cos(e);this.a[1]=t,this.b[0]=t,this.b[1]=1,this.order=1}allPass1stOrderFractionalDelay(e){const t=(1-e)/(1+e);this.a[1]=t,this.b[0]=t,this.b[1]=1,this.order=1}lowPass2ndOrderButterworth(e,t){const i=Math.sin(e)/(2*t),n=Math.cos(e),s=1+i;this.a[1]=-2*n/s,this.a[2]=(1-i)/s,this.b[2]=this.b[0]=(1-n)/(2*s),this.b[1]=(1-n)/s,this.order=2}lowPass2ndOrderSimplified(e,t){const i=2*Math.sin(e/2),n=1-1/(2*t),s=n+n/(1-i);this.a[1]=2*i+(i-1)*i*s-2,this.a[2]=(i-1)*(i-i*s-1),this.b[0]=i*i,this.b[1]=0,this.b[2]=0,this.order=2}highPass2ndOrderButterworth(e,t){const i=Math.sin(e)/(2*t),n=Math.cos(e),s=1+i;this.a[1]=-2*n/s,this.a[2]=(1-i)/s,this.b[2]=this.b[0]=(1+n)/(2*s),this.b[1]=-(1+n)/s,this.order=2}highShelf2ndOrder(e,t,i){const n=Math.sqrt(t),s=Math.cos(e),a=n+1,r=n-1,o=.5*Math.sin(e)*Math.sqrt(a/n*(1/i-1)+2),l=2*Math.sqrt(n)*o,p=a-r*s+l;this.a[1]=2*(r-a*s)/p,this.a[2]=(a-r*s-l)/p,this.b[0]=n*(a+r*s+l)/p,this.b[1]=-2*n*(r+a*s)/p,this.b[2]=n*(a+r*s-l)/p,this.order=2}peak2ndOrder(e,t,i){const n=Math.sqrt(t),s=i*e/(n>=1?n:1/n),a=Math.tan(.5*s),r=1+a/n;this.b[0]=(1+a*n)/r,this.b[1]=this.a[1]=-2*Math.cos(e)/r,this.b[2]=(1-a*n)/r,this.a[2]=(1-a/n)/r,this.order=2}}class B{constructor(){this.real=0,this.imag=0,this.denom=1}analyze(e,t){this.analyzeComplex(e,Math.cos(t),Math.sin(t))}analyzeComplex(e,t,i){const n=e.a,s=e.b,a=t,r=-i;let o=s[0]+s[1]*a,l=s[1]*r,p=1+n[1]*a,h=n[1]*r,u=a,c=r;for(let t=2;t<=e.order;t++){const e=u*r+c*a;u=u*a-c*r,c=e,o+=s[t]*u,l+=s[t]*c,p+=n[t]*u,h+=n[t]*c}this.denom=p*p+h*h,this.real=o*p+l*h,this.imag=l*p-o*h}magnitude(){return Math.sqrt(this.real*this.real+this.imag*this.imag)/this.denom}angle(){return Math.atan2(this.imag,this.real)}}class W{constructor(){this.a1=0,this.a2=0,this.b0=1,this.b1=0,this.b2=0,this.a1Delta=0,this.a2Delta=0,this.b0Delta=0,this.b1Delta=0,this.b2Delta=0,this.output1=0,this.output2=0,this.useMultiplicativeInputCoefficients=!1}resetOutput(){this.output1=0,this.output2=0}loadCoefficientsWithGradient(e,t,i,n){if(2!=e.order||2!=t.order)throw new Error;this.a1=e.a[1],this.a2=e.a[2],this.b0=e.b[0],this.b1=e.b[1],this.b2=e.b[2],this.a1Delta=(t.a[1]-e.a[1])*i,this.a2Delta=(t.a[2]-e.a[2])*i,n?(this.b0Delta=Math.pow(t.b[0]/e.b[0],i),this.b1Delta=Math.pow(t.b[1]/e.b[1],i),this.b2Delta=Math.pow(t.b[2]/e.b[2],i)):(this.b0Delta=(t.b[0]-e.b[0])*i,this.b1Delta=(t.b[1]-e.b[1])*i,this.b2Delta=(t.b[2]-e.b[2])*i),this.useMultiplicativeInputCoefficients=n}}function V(e){return 2*Math.atan(.5*e)}const $=2654435761,U=2246822519,j=3266489917,Q=668265263,_=374761393;let K;function J(e,t=0){const i="string"==typeof e?(K??=new TextEncoder).encode(e):e,n=i;let s=t+_&4294967295,a=0;if(n.length>=16){const e=[t+$+U&4294967295,t+U&4294967295,t+0&4294967295,t-$&4294967295],n=i,r=n.length-16;let o=0;for(a=0;(4294967280&a)<=r;a+=4){const t=a,i=n[t+0]+(n[t+1]<<8),s=n[t+2]+(n[t+3]<<8),r=i*U+(s*U<<16);let l=e[o]+r&4294967295;l=l<<13|l>>>19;const p=65535&l,h=l>>>16;e[o]=p*$+(h*$<<16)&4294967295,o=o+1&3}s=(e[0]<<1|e[0]>>>31)+(e[1]<<7|e[1]>>>25)+(e[2]<<12|e[2]>>>20)+(e[3]<<18|e[3]>>>14)&4294967295}s=s+i.length&4294967295;const r=i.length-4;for(;a<=r;a+=4){const e=a,t=n[e+0]+(n[e+1]<<8),i=n[e+2]+(n[e+3]<<8);s=s+(t*j+(i*j<<16))&4294967295,s=s<<17|s>>>15,s=(65535&s)*Q+((s>>>16)*Q<<16)&4294967295}for(;a<n.length;++a){s+=n[a]*_,s=s<<11|s>>>21,s=(65535&s)*$+((s>>>16)*$<<16)&4294967295}return s^=s>>>15,s=((65535&s)*U&4294967295)+((s>>>16)*U<<16),s^=s>>>13,s=((65535&s)*j&4294967295)+((s>>>16)*j<<16),s^=s>>>16,s<0?s+4294967296:s}const Y=1e-24;function X(e,t,i){return i<=(t-=1)?i>=e?i:e:t}function Z(e,t,i){if(e<=i&&i<=t)return i;throw new Error(`Value ${i} not in range [${e}, ${t}]`)}function ee(e,t){let i=parseFloat(e);return Number.isNaN(i)&&(i=t),i}function te(e,t){let i=parseInt(e);return Number.isNaN(i)&&(i=t),i}function ie(e,t){e.push(re[t>>>30&3]),e.push(re[t>>>24&63]),e.push(re[t>>>18&63]),e.push(re[t>>>12&63]),e.push(re[t>>>6&63]),e.push(re[t>>>0&63])}function ne(e,t){let i=0;return i|=oe[e.charCodeAt(t++)]<<30,i|=oe[e.charCodeAt(t++)]<<24,i|=oe[e.charCodeAt(t++)]<<18,i|=oe[e.charCodeAt(t++)]<<12,i|=oe[e.charCodeAt(t++)]<<6,i|=oe[e.charCodeAt(t++)]<<0,i}function se(e,t,i,n,s,a){e.push(re[t]),e.push(re[Number(i>0)]);let r=Math.round(1e3*Math.abs(i)),o=Math.floor(r/63);e.push(re[r%63],re[o%63],re[Math.floor(o/63)]),e.push(re[Number(n>0)]);let l=Math.round(1e3*Math.abs(n)),p=Math.floor(l/63);e.push(re[l%63],re[p%63],re[Math.floor(p/63)]),e.push(re[Number(s>0)]);let h=Math.round(1e3*Math.abs(s));e.push(re[h%63],re[Math.floor(h/63)]),e.push(re[Number(a>0)]);let u=Math.round(1e3*Math.abs(a));e.push(re[u%63],re[Math.floor(u/63)])}function ae(e){let t=X(0,h.keys.length,e),i=0;return 12===e?(t=0,i=1):13===e?(t=6,i=-1):14===e?(t=0,i=-1):15===e&&(t=5,i=-1),[t,i]}const re=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],oe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class le{constructor(e,t,i){this.m=[],this.v=0;for(let n=t;n<i;n++){const t=oe[e.charCodeAt(n)];this.m.push(t>>5&1),this.m.push(t>>4&1),this.m.push(t>>3&1),this.m.push(t>>2&1),this.m.push(t>>1&1),this.m.push(1&t)}}read(e){let t=0;for(;e>0;)t<<=1,t+=this.m[this.v++],e--;return t}readLongTail(e,t){let i=e,n=t;for(;this.m[this.v++];)i+=1<<n,n++;for(;n>0;)n--,this.m[this.v++]&&(i+=1<<n);return i}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class pe{constructor(){this.g=0,this.m=[]}clear(){this.g=0}write(e,t){for(e--;e>=0;)this.m[this.g++]=t>>>e&1,e--}writeLongTail(e,t,i){if(i<e)throw new Error("value out of bounds");i-=e;let n=t;for(;i>=1<<n;)this.m[this.g++]=1,i-=1<<n,n++;for(this.m[this.g++]=0;n>0;)n--,this.m[this.g++]=i>>>n&1}writePartDuration(e){this.writeLongTail(1,3,e)}writePinCount(e){this.writeLongTail(1,0,e)}writePitchInterval(e){e<0?(this.write(1,1),this.writeLongTail(1,3,-e)):(this.write(1,0),this.writeLongTail(1,3,e))}concat(e){for(let t=0;t<e.g;t++)this.m[this.g++]=e.m[t]}encodeBase64(e){for(let t=0;t<this.g;t+=6){const i=this.m[t]<<5|this.m[t+1]<<4|this.m[t+2]<<3|this.m[t+3]<<2|this.m[t+4]<<1|this.m[t+5];e.push(re[i])}return e}lengthBase64(){return Math.ceil(this.g/6)}}function he(e,t,i){return{interval:e,time:t,size:i}}class ue{constructor(e,t,i,n,s=!1,a=0){this.pitches=[e],this.pins=[he(0,0,n),he(0,i-t,s?0:n)],this.start=t,this.end=i,this.continuesLastPattern=!1,this.chipWaveStartOffset=a}pickMainInterval(){let e=0,t=0;for(let i=1;i<this.pins.length;i++){const n=this.pins[i-1],s=this.pins[i];if(n.interval==s.interval){const i=s.time-n.time;e<i&&(e=i,t=n.interval)}}if(0==e){let e=0;for(let i=0;i<this.pins.length;i++){const n=this.pins[i];e<n.size&&(e=n.size,t=n.interval)}}return t}clone(){const e=new ue(-1,this.start,this.end,3);e.pitches=this.pitches.concat(),e.pins=[];for(const t of this.pins)e.pins.push(he(t.interval,t.time,t.size));return e.continuesLastPattern=this.continuesLastPattern,e}getEndPinIndex(e){let t;for(t=1;t<this.pins.length-1&&!(this.pins[t].time+this.start>e);t++);return t}}class ce{constructor(){this.notes=[],this.instruments=[0]}cloneNotes(){const e=[];for(const t of this.notes)e.push(t.clone());return e}reset(){this.notes.length=0,this.instruments[0]=0,this.instruments.length=1}toJsonObject(e,t,i){const n=[];for(const s of this.notes){let a=t.instruments[this.instruments[0]],r=Math.max(0,h.modCount-s.pitches[0]-1),o=e.getVolumeCapForSetting(i,a.modulators[r],a.modFilterTypes[r]);const l=[];for(const t of s.pins){let n=i?Math.round(t.size):Math.round(100*t.size/o);l.push({tick:(t.time+s.start)*h.rhythms[e.rhythm].stepsPerBeat/h.partsPerBeat,pitchBend:t.interval,volume:n,forMod:i})}const p={pitches:s.pitches,points:l};0==s.start&&(p.continuesLastPattern=s.continuesLastPattern),n.push(p)}const s={notes:n};return e.patternInstruments&&(s.instruments=this.instruments.map((e=>e+1))),s}fromJsonObject(e,t,i,n,s,a,r="auto"){const o=r.toLowerCase();if(t.patternInstruments)if(Array.isArray(e.instruments)){const n=e.instruments,s=X(h.instrumentCountMin,t.getMaxInstrumentsPerPatternForChannel(i)+1,n.length);for(let e=0;e<s;e++)this.instruments[e]=X(0,i.instruments.length,(0|n[e])-1);this.instruments.length=s}else this.instruments[0]=X(0,i.instruments.length,(0|e.instrument)-1),this.instruments.length=1;if(e.notes&&e.notes.length>0){const r=Math.min(t.beatsPerBar*h.partsPerBeat*(a?h.modCount:1),e.notes.length>>>0);for(let l=0;l<e.notes.length&&!(l>=r);l++){const r=e.notes[l];if(!(r&&r.pitches&&r.pitches.length>=1&&r.points&&r.points.length>=2))continue;const p=new ue(0,0,0,0);p.pitches=[],p.pins=[];for(let e=0;e<r.pitches.length;e++){const t=0|r.pitches[e];if(-1==p.pitches.indexOf(t)&&(p.pitches.push(t),p.pitches.length>=h.maxChordSize))break}if(p.pitches.length<1)continue;let u=0,c=i.instruments[this.instruments[0]],f=Math.max(0,h.modCount-p.pitches[0]-1);for(let e=0;e<r.points.length;e++){const i=r.points[e];if(null==i||null==i.tick)continue;const s=null==i.pitchBend?0:0|i.pitchBend,o=Math.round(+i.tick*h.partsPerBeat/n);let l,d=t.getVolumeCapForSetting(a,c.modulators[f],c.modFilterTypes[f]);l=null==i.volume?d:null==i.forMod?Math.max(0,Math.min(d,Math.round((0|i.volume)*d/100))):(0|i.forMod)>0?Math.round(0|i.volume):Math.max(0,Math.min(d,Math.round((0|i.volume)*d/100))),o>t.beatsPerBar*h.partsPerBeat||(0==p.pins.length&&(p.start=o,u=s),p.pins.push(he(s-u,o-p.start,l)))}if(p.pins.length<2)continue;p.end=p.pins[p.pins.length-1].time+p.start;const d=s?h.drumCount-1:h.maxPitch;let m=d,v=0;for(let e=0;e<p.pitches.length;e++)p.pitches[e]+=u,(p.pitches[e]<0||p.pitches[e]>d)&&(p.pitches.splice(e,1),e--),p.pitches[e]<m&&(m=p.pitches[e]),p.pitches[e]>v&&(v=p.pitches[e]);if(!(p.pitches.length<1)){for(let e=0;e<p.pins.length;e++){const t=p.pins[e];t.interval+m<0&&(t.interval=-m),t.interval+v>d&&(t.interval=d-v),e>=2&&t.interval==p.pins[e-1].interval&&t.interval==p.pins[e-2].interval&&t.size==p.pins[e-1].size&&t.size==p.pins[e-2].size&&(p.pins.splice(e-1,1),e--)}if(0==p.start?p.continuesLastPattern=!0===r.continuesLastPattern:p.continuesLastPattern=!1,"ultrabox"!=o&&"slarmoosbox"!=o&&c.modulators[f]==h.modulators.dictionary.tempo.index)for(const e of p.pins){const t=30,i=1,n=e.size+t;e.size=n-i}this.notes.push(p)}}}}}class fe{constructor(e){this.frequency=4,this.amplitude=0,this.waveform=0,this.pulseWidth=.5,this.reset(e)}reset(e){this.frequency=4,this.amplitude=e<=1?h.operatorAmplitudeMax:0,this.waveform=0,this.pulseWidth=5}copy(e){this.frequency=e.frequency,this.amplitude=e.amplitude,this.waveform=e.waveform,this.pulseWidth=e.pulseWidth}}class de{constructor(){this.name="",this.carrierCount=0,this.modulatedBy=[[],[],[],[],[],[]],this.associatedCarrier=[],this.fromPreset(1)}set(e,t){this.reset(),this.carrierCount=e;for(let i=0;i<this.modulatedBy.length;i++){this.modulatedBy[i]=t[i],i<e&&(this.associatedCarrier[i]=i+1),this.name+=i+1;for(let n=0;n<t[i].length;n++)this.name+=t[i][n],t[i][n]>e-1&&(this.associatedCarrier[t[i][n]-1]=i+1),this.name+=",";this.name+=i<e?"|":"."}}reset(){this.name="",this.carrierCount=1,this.modulatedBy=[[2,3,4,5,6],[],[],[],[],[]],this.associatedCarrier=[1,1,1,1,1,1]}copy(e){this.name=e.name,this.carrierCount=e.carrierCount,this.modulatedBy=e.modulatedBy,this.associatedCarrier=e.associatedCarrier}fromPreset(e){this.reset();let t=h.algorithms6Op[e];this.name=t.name,this.carrierCount=t.carrierCount;for(var i=0;i<t.modulatedBy.length;i++)this.modulatedBy[i]=Array.from(t.modulatedBy[i]),this.associatedCarrier[i]=t.associatedCarrier[i]}}class me{constructor(){this.name="",this.indices=[[],[],[],[],[],[]],this.fromPreset(1)}set(e){this.reset();for(let t=0;t<this.indices.length;t++){this.indices[t]=e[t];for(let i=0;i<e[t].length;i++)this.name+=e[t][i],this.name+=",";this.name+="."}}reset(){this.reset,this.name="",this.indices=[[1],[],[],[],[],[]]}copy(e){this.name=e.name,this.indices=e.indices}fromPreset(e){this.reset();let t=h.feedbacks6Op[e];for(var i=0;i<t.indices.length;i++){this.indices[i]=Array.from(t.indices[i]);for(let e=0;e<t.indices[i].length;e++)this.name+=t.indices[i][e],this.name+=",";this.name+="."}}}class ve{constructor(e){this.spectrum=[],this.hash=-1,this.reset(e)}reset(e){for(let t=0;t<h.spectrumControlPoints;t++)if(e)this.spectrum[t]=Math.round(h.spectrumMax*(1/Math.sqrt(1+t/3)));else{const e=0==t||7==t||11==t||14==t||16==t||18==t||21==t||23==t||t>=25;this.spectrum[t]=e?Math.max(0,Math.round(h.spectrumMax*(1-t/30))):0}this.markCustomWaveDirty()}markCustomWaveDirty(){const e=He.fittingPowerOfTwo(h.spectrumMax+2)-1;let t=0;for(const i of this.spectrum)t=t*e+i>>>0;this.hash=t}}class ye{constructor(){this.wave=null,this.S=-1}getCustomWave(e,t){if(this.S==e.hash)return this.wave;this.S=e.hash;const i=h.spectrumNoiseLength;null!=this.wave&&this.wave.length==i+1||(this.wave=new Float32Array(i+1));const n=this.wave;for(let e=0;e<i;e++)n[e]=0;const s=[0,1/7,Math.log2(5/4),3/7,Math.log2(1.5),5/7,6/7];function a(e){return t+Math.floor(e/h.spectrumControlPointsPerOctave)+s[(e+h.spectrumControlPointsPerOctave)%h.spectrumControlPointsPerOctave]}let r=1;for(let t=0;t<h.spectrumControlPoints+1;t++){const s=t<=0?0:e.spectrum[t-1],o=t>=h.spectrumControlPoints?e.spectrum[h.spectrumControlPoints-1]:e.spectrum[t],l=a(t-1);let p=a(t);t>=h.spectrumControlPoints&&(p=14+.25*(p-14)),0==s&&0==o||(r+=.02*y(n,i,l,p,s/h.spectrumMax,o/h.spectrumMax,-.5))}return e.spectrum[h.spectrumControlPoints-1]>0&&(r+=.02*y(n,i,14+.25*(a(h.spectrumControlPoints)-14),14,e.spectrum[h.spectrumControlPoints-1]/h.spectrumMax,0,-.5)),G(n,i),R(n,5/(Math.sqrt(i)*Math.pow(r,.75))),n[i]=n[0],n}}class be{constructor(){this.harmonics=[],this.hash=-1,this.reset()}reset(){for(let e=0;e<h.harmonicsControlPoints;e++)this.harmonics[e]=0;this.harmonics[0]=h.harmonicsMax,this.harmonics[3]=h.harmonicsMax,this.harmonics[6]=h.harmonicsMax,this.markCustomWaveDirty()}markCustomWaveDirty(){const e=He.fittingPowerOfTwo(h.harmonicsMax+2)-1;let t=0;for(const i of this.harmonics)t=t*e+i>>>0;this.hash=t}}class ge{constructor(){this.wave=null,this.S=-1}getCustomWave(e,t){if(this.S==e.hash&&this.M==t)return this.wave;this.S=e.hash,this.M=t;const i=7==t?h.harmonicsRenderedForPickedString:h.harmonicsRendered,n=h.harmonicsWavelength,s=v(0,null,null);null!=this.wave&&this.wave.length==n+1||(this.wave=new Float32Array(n+1));const a=this.wave;for(let e=0;e<n;e++)a[e]=0;let r=1;for(let t=0;t<i;t++){const o=t+1;let l=t<h.harmonicsControlPoints?e.harmonics[t]:e.harmonics[h.harmonicsControlPoints-1];t>=h.harmonicsControlPoints&&(l*=1-(t-h.harmonicsControlPoints)/(i-h.harmonicsControlPoints));const p=l/h.harmonicsMax;let u=Math.pow(2,l-h.harmonicsMax+1)*Math.sqrt(p);t<h.harmonicsControlPoints&&(r+=u),u*=Math.pow(o,-.25),u*=s[t+589],a[n-o]=u}G(a,n);const o=1/Math.pow(r,.7);for(let e=0;e<a.length;e++)a[e]*=o;return d(a),a[n]=a[0],a}}class Se{constructor(){this.additives=[],this.hash=-1,this.waveTypes=[],this.reset()}reset(){for(let e=0;e<h.additiveControlPoints;e++)this.additives[e]=0,this.waveTypes[e]=2;this.additives[0]=h.harmonicsMax,this.additives[3]=h.harmonicsMax,this.additives[6]=h.harmonicsMax,this.markCustomWaveDirty()}markCustomWaveDirty(){const e=He.fittingPowerOfTwo(h.additiveMax+2)-1;let t=0;for(const i of this.additives)t=t*e+i>>>0;this.hash=t}}class we{constructor(){this.wave=null,this.S=-1}getCustomWave(e){if(this.S==e.hash)return this.wave;this.S=e.hash;const t=h.additiveRendered,i=h.additiveWavelength;null!=this.wave&&this.wave.length==i+1||(this.wave=new Float32Array(i+1));const n=this.wave;for(let e=0;e<i;e++)n[e]=1;for(let s=1;s<t;s++){const t=s+1;for(let a=0;a<i;a++){let r=this.waveExpressions(e.waveTypes[s],a/i,t)*(null!=e.additives[s]?e.additives[s]/h.additiveMax:1);r*=Math.pow(t,-.25),n[a]+=r}}const s=1/Math.pow(1,.7);for(let e=0;e<n.length;e++)n[e]*=s;return d(n),n[i]=n[0],n}waveExpressions(e,t,i){switch(e){case 0:default:return Math.sin(t*i*Math.PI*2)/i;case 1:return(Math.floor((t*i-1)%2+2)%2*2-1)/i;case 2:return(2*(2*Math.abs(((t*i/2+.5)%1+1)%1)-1)-1)/i;case 3:return(2*Math.abs(((t*i/2+.5)%1+1)%1)-1)/i}}}class Me{constructor(){this.freq=0,this.gain=h.filterGainCenter,this.type=2}set(e,t){this.freq=e,this.gain=t}getHz(){return Me.getHzFromSettingValue(this.freq)}static getHzFromSettingValue(e){return h.filterFreqReferenceHz*Math.pow(2,(e-h.filterFreqReferenceSetting)*h.filterFreqStep)}static getSettingValueFromHz(e){return Math.log2(e/h.filterFreqReferenceHz)/h.filterFreqStep+h.filterFreqReferenceSetting}static getRoundedSettingValueFromHz(e){return Math.max(0,Math.min(h.filterFreqRange-1,Math.round(Me.getSettingValueFromHz(e))))}getLinearGain(e=1){const t=(this.gain-h.filterGainCenter)*h.filterGainStep,i=2==this.type?0:-.5,n=i+(t-i)*e;return Math.pow(2,n)}static getRoundedSettingValueFromLinearGain(e){return Math.max(0,Math.min(h.filterGainRange-1,Math.round(Math.log2(e)/h.filterGainStep+h.filterGainCenter)))}toCoefficients(e,t,i=1,n=1){const s=2*Math.PI*Math.max(h.filterFreqMinHz,Math.min(h.filterFreqMaxHz,i*this.getHz()))/t,a=this.getLinearGain(n);switch(this.type){case 0:e.lowPass2ndOrderButterworth(s,a);break;case 1:e.highPass2ndOrderButterworth(s,a);break;case 2:e.peak2ndOrder(s,a,1);break;default:throw new Error}}getVolumeCompensationMult(){const e=(this.freq-h.filterFreqReferenceSetting)*h.filterFreqStep,t=(this.gain-h.filterGainCenter)*h.filterGainStep;switch(this.type){case 0:const i=Math.pow(2,e)*h.filterFreqReferenceHz/8e3,n=(Math.sqrt(1+4*i)-1)/2,s=Math.log2(n);return Math.pow(.5,.2*Math.max(0,t+1)+Math.min(0,Math.max(-3,.595*s+.35*Math.min(0,t+1))));case 1:return Math.pow(.5,.125*Math.max(0,t+1)+Math.min(0,.3*(-e-Math.log2(h.filterFreqReferenceHz/125))+.2*Math.min(0,t+1)));case 2:const a=e+Math.log2(h.filterFreqReferenceHz/2e3),r=Math.pow(1/(1+Math.pow(a/3,2)),2);return Math.pow(.5,.125*Math.max(0,t)+.1*r*Math.min(0,t));default:throw new Error}}}class ke{constructor(){this.controlPoints=[],this.controlPointCount=0,this.reset()}reset(){this.controlPointCount=0}addPoint(e,t,i){let n;this.controlPoints.length<=this.controlPointCount?(n=new Me,this.controlPoints[this.controlPointCount]=n):n=this.controlPoints[this.controlPointCount],this.controlPointCount++,n.type=e,n.set(t,i)}toJsonObject(){const e=[];for(let t=0;t<this.controlPointCount;t++){const i=this.controlPoints[t];e.push({type:h.filterTypeNames[i.type],cutoffHz:Math.round(100*i.getHz())/100,linearGain:Math.round(1e4*i.getLinearGain())/1e4})}return e}fromJsonObject(e){if(this.controlPoints.length=0,e)for(const t of e){const e=new Me;e.type=h.filterTypeNames.indexOf(t.type),-1==e.type&&(e.type=2),null!=t.cutoffHz?e.freq=Me.getRoundedSettingValueFromHz(t.cutoffHz):e.freq=0,null!=t.linearGain?e.gain=Me.getRoundedSettingValueFromLinearGain(t.linearGain):e.gain=h.filterGainCenter,this.controlPoints.push(e)}this.controlPointCount=this.controlPoints.length}static filtersCanMorph(e,t){if(e.controlPointCount!=t.controlPointCount)return!1;for(let i=0;i<e.controlPointCount;i++)if(e.controlPoints[i].type!=t.controlPoints[i].type)return!1;return!0}static lerpFilters(e,t,i){let n=new ke;if(null==e)return e;if(null==t)return t;if(i=Math.max(0,Math.min(1,i)),this.filtersCanMorph(e,t)){for(let s=0;s<e.controlPointCount;s++)n.controlPoints[s]=new Me,n.controlPoints[s].type=e.controlPoints[s].type,n.controlPoints[s].freq=e.controlPoints[s].freq+(t.controlPoints[s].freq-e.controlPoints[s].freq)*i,n.controlPoints[s].gain=e.controlPoints[s].gain+(t.controlPoints[s].gain-e.controlPoints[s].gain)*i;return n.controlPointCount=e.controlPointCount,n}return i>=1?t:e}convertLegacySettings(e,t,i){this.reset();const n=2*Math.asin(.475),s=t>1,a=0==t,r=10==e,o=5==i.type||6==i.type||10==i.type||1==i.type,l=48e3,p=8e3*Math.pow(2,.5*(e-10)),h=Math.min(n,2*Math.PI*p/l);if(0==i.type&&!s&&r);else if(a){const e=3.5,t=h*Math.pow(2,e),i=l*(t/(1+t/Math.PI))/(2*Math.PI),n=Me.getRoundedSettingValueFromHz(i),s=Me.getHzFromSettingValue(n),a=2*Math.PI*s/l,r=new N;r.lowPass1stOrderSimplified(h);const p=new B;p.analyze(r,a);const u=p.magnitude();let c=Math.log2(u);c=.82*(c+e)-e,o&&(c=Math.min(c,-1));const f=Math.pow(2,c),d=Me.getRoundedSettingValueFromLinearGain(f);this.addPoint(0,n,d)}else{const e=.5/(1-.95*Math.sqrt(Math.max(0,t-1)/6)),i=.5/e,n=h+(h*(h/(2*Math.PI*8e3/l)*Math.pow(i,.9)+1)-h)*i;let a;a=o?l*Math.min(n,h*Math.pow(2,.25))/(2*Math.PI):l*n/(2*Math.PI);const r=Me.getRoundedSettingValueFromHz(a);let p;if(o)p=e;else{const t=new N;t.lowPass2ndOrderSimplified(h,e);const i=new B;i.analyze(t,n),p=i.magnitude()}s||(p=Math.min(p,Math.sqrt(.5)));const u=Me.getRoundedSettingValueFromLinearGain(p);this.addPoint(0,r,u)}this.controlPoints.length=this.controlPointCount}convertLegacySettingsForSynth(e,t,i=!1){this.reset();const n=2*Math.asin(.475),s=0==t&&i,a=48e3,r=8e3*Math.pow(2,.5*(e-10)),o=Math.min(n,2*Math.PI*r/a);if(s){const e=3.5,t=o*Math.pow(2,e),i=a*(t/(1+t/Math.PI))/(2*Math.PI),n=Me.getRoundedSettingValueFromHz(i),s=Me.getHzFromSettingValue(n),r=2*Math.PI*s/a,l=new N;l.lowPass1stOrderSimplified(o);const p=new B;p.analyze(l,r);const h=p.magnitude();let u=Math.log2(h);u=.82*(u+e)-e;const c=Math.pow(2,u),f=Me.getRoundedSettingValueFromLinearGain(c);this.addPoint(0,n,f)}else{const e=.5/(1-.95*Math.sqrt(Math.max(0,t-1)/6)),i=.5/e,n=o+(o*(o/(2*Math.PI*8e3/a)*Math.pow(i,.9)+1)-o)*i;let s;s=a*n/(2*Math.PI);const r=Me.getSettingValueFromHz(s);let l;const p=new N;p.lowPass2ndOrderSimplified(o,e);const h=new B;h.analyze(p,n),l=h.magnitude();const u=Me.getRoundedSettingValueFromLinearGain(l);this.addPoint(0,r,u)}}}class Fe{constructor(e){this.isNoiseEnvelope=e,this.target=0,this.index=0,this.envelope=0,this.perEnvelopeSpeed=h.envelopes[this.envelope].speed,this.perEnvelopeLowerBound=0,this.perEnvelopeUpperBound=1,this.tempEnvelopeSpeed=null,this.steps=2,this.seed=2,this.waveform=0,this.reset()}reset(){this.target=0,this.index=0,this.envelope=0,this.pitchEnvelopeStart=0,this.pitchEnvelopeEnd=this.isNoiseEnvelope?h.drumCount-1:h.maxPitch,this.inverse=!1,this.isNoiseEnvelope=!1,this.perEnvelopeSpeed=h.envelopes[this.envelope].speed,this.perEnvelopeLowerBound=0,this.perEnvelopeUpperBound=1,this.tempEnvelopeSpeed=null,this.steps=2,this.seed=2,this.waveform=0}toJsonObject(){const e={target:h.instrumentAutomationTargets[this.target].name,envelope:h.newEnvelopes[this.envelope].name,inverse:this.inverse,perEnvelopeSpeed:this.perEnvelopeSpeed,perEnvelopeLowerBound:this.perEnvelopeLowerBound,perEnvelopeUpperBound:this.perEnvelopeUpperBound};return h.instrumentAutomationTargets[this.target].maxCount>1&&(e.index=this.index),"pitch"==h.newEnvelopes[this.envelope].name?(e.pitchEnvelopeStart=this.pitchEnvelopeStart,e.pitchEnvelopeEnd=this.pitchEnvelopeEnd):"random"==h.newEnvelopes[this.envelope].name?(e.steps=this.steps,e.seed=this.seed,e.waveform=this.waveform):"lfo"==h.newEnvelopes[this.envelope].name&&(e.waveform=this.waveform),e}fromJsonObject(e,t){this.reset();let i=h.instrumentAutomationTargets.dictionary[e.target];null==i&&(i=h.instrumentAutomationTargets.dictionary.noteVolume),this.target=i.index;let n=h.envelopes.dictionary.none,s=!1;"slarmoosbox"==t?"tremolo2"==e.envelope?(n=h.newEnvelopes[8],s=!0):"tremolo"==e.envelope?(n=h.newEnvelopes[8],s=!1):n=h.newEnvelopes.dictionary[e.envelope]:9==h.envelopes.dictionary[e.envelope].type?(n=h.newEnvelopes[8],s=!0):n=h.newEnvelopes[Math.max(h.envelopes.dictionary[e.envelope].type-1,0)].index>8?h.newEnvelopes[h.envelopes.dictionary[e.envelope].type-1]:h.newEnvelopes[h.envelopes.dictionary[e.envelope].type],null==n&&(9==h.envelopes.dictionary[e.envelope].type?(n=h.newEnvelopes[8],s=!0):n=h.newEnvelopes[Math.max(h.envelopes.dictionary[e.envelope].type-1,0)].index>8?h.newEnvelopes[h.envelopes.dictionary[e.envelope].type-1]:h.newEnvelopes[h.envelopes.dictionary[e.envelope].type]),null==n&&(n=h.envelopes.dictionary.none),this.envelope=n.index,null!=e.index?this.index=X(0,h.instrumentAutomationTargets[this.target].maxCount,0|e.index):this.index=0,null!=e.pitchEnvelopeStart?this.pitchEnvelopeStart=X(0,this.isNoiseEnvelope?h.drumCount:h.maxPitch+1,e.pitchEnvelopeStart):this.pitchEnvelopeStart=0,null!=e.pitchEnvelopeEnd?this.pitchEnvelopeEnd=X(0,this.isNoiseEnvelope?h.drumCount:h.maxPitch+1,e.pitchEnvelopeEnd):this.pitchEnvelopeEnd=this.isNoiseEnvelope?h.drumCount:h.maxPitch,this.inverse=Boolean(e.inverse),null!=e.perEnvelopeSpeed?this.perEnvelopeSpeed=e.perEnvelopeSpeed:this.perEnvelopeSpeed=h.envelopes.dictionary[e.envelope].speed,null!=e.perEnvelopeLowerBound?this.perEnvelopeLowerBound=X(h.perEnvelopeBoundMin,h.perEnvelopeBoundMax+1,e.perEnvelopeLowerBound):this.perEnvelopeLowerBound=0,null!=e.perEnvelopeUpperBound?this.perEnvelopeUpperBound=X(h.perEnvelopeBoundMin,h.perEnvelopeBoundMax+1,e.perEnvelopeUpperBound):this.perEnvelopeUpperBound=1,s&&(this.inverse?(this.perEnvelopeUpperBound=Math.floor(this.perEnvelopeUpperBound/2*10)/10,this.perEnvelopeLowerBound=Math.floor(this.perEnvelopeLowerBound/2*10)/10):(this.perEnvelopeUpperBound=Math.floor(10*(.5+(this.perEnvelopeUpperBound-this.perEnvelopeLowerBound)/2))/10,this.perEnvelopeLowerBound=.5)),null!=e.steps?this.steps=X(1,h.randomEnvelopeStepsMax+1,e.steps):this.steps=2,null!=e.seed?this.seed=X(1,h.randomEnvelopeSeedMax+1,e.seed):this.seed=2,null!=e.waveform?this.waveform=e.waveform:this.waveform=0}}class xe{constructor(e,t){if(this.type=0,this.preset=0,this.chipWave=2,this.isUsingAdvancedLoopControls=!1,this.chipWaveLoopStart=0,this.chipWaveLoopEnd=h.rawRawChipWaves[this.chipWave].samples.length-1,this.chipWaveLoopMode=0,this.chipWavePlayBackwards=!1,this.chipWaveStartOffset=0,this.chipWaveInStereo=!1,this.chipNoise=1,this.eqFilter=new ke,this.eqFilterType=!1,this.eqFilterSimpleCut=h.filterSimpleCutRange-1,this.eqFilterSimplePeak=0,this.noteFilter=new ke,this.noteFilterType=!1,this.noteFilterSimpleCut=h.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.eqSubFilters=[],this.noteSubFilters=[],this.envelopes=[],this.fadeIn=0,this.fadeOut=h.fadeOutNeutral,this.envelopeCount=0,this.transition=h.transitions.dictionary.normal.index,this.pitchShift=0,this.detune=0,this.vibrato=0,this.interval=0,this.vibratoDepth=0,this.vibratoSpeed=10,this.vibratoDelay=0,this.vibratoType=0,this.envelopeSpeed=12,this.discreteEnvelope=!1,this.unison=0,this.unisonVoices=1,this.unisonSpread=0,this.unisonOffset=0,this.unisonExpression=1.4,this.unisonSign=1,this.effects=0,this.effectOrder=[2,10,11,7,8,9,5,3,4,1,6,0],this.chord=1,this.volume=0,this.pan=h.panCenter,this.panDelay=0,this.arpeggioSpeed=12,this.fastTwoNoteArp=!1,this.legacyTieOver=!1,this.clicklessTransition=!1,this.aliases=!1,this.pulseWidth=h.pulseWidthRange,this.decimalOffset=0,this.supersawDynamism=h.supersawDynamismMax,this.supersawSpread=Math.ceil(h.supersawSpreadMax/2),this.supersawShape=0,this.stringSustain=10,this.stringSustainType=1,this.distortion=0,this.bitcrusherFreq=0,this.bitcrusherQuantization=0,this.chorus=0,this.reverb=0,this.echoSustain=0,this.echoDelay=0,this.algorithm=0,this.feedbackType=0,this.algorithm6Op=1,this.feedbackType6Op=1,this.customAlgorithm=new de,this.customFeedbackType=new me,this.feedbackAmplitude=0,this.customChipWave=new Float32Array(64),this.customChipWaveIntegral=new Float32Array(65),this.operators=[],this.harmonicsWave=new be,this.additiveWave=new Se,this.drumsetEnvelopes=[],this.drumsetSpectrumWaves=[],this.modChannels=[],this.modInstruments=[],this.modulators=[],this.modFilterTypes=[],this.modEnvelopeNumbers=[],this.invalidModulators=[],this.isNoiseInstrument=!1,t)for(let e=0;e<h.modCount;e++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(h.modulators.dictionary.none.index);this.spectrumWave=new ve(e);for(let e=0;e<h.operatorCount+2;e++)this.operators[e]=new fe(e);for(let e=0;e<h.drumCount;e++)this.drumsetEnvelopes[e]=h.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[e]=new ve(!0);for(let e=0;e<64;e++)this.customChipWave[e]=24-Math.floor(.75*e);let i=0;for(let e=0;e<this.customChipWave.length;e++)i+=this.customChipWave[e];const n=i/this.customChipWave.length;let s=0,a=0;for(let e=0;e<this.customChipWave.length;e++)s+=a,a=this.customChipWave[e]-n,this.customChipWaveIntegral[e]=s;this.customChipWaveIntegral[64]=0,this.isNoiseInstrument=e}setTypeAndReset(e,t,i){i&&(e=10),this.type=e,this.preset=e,this.volume=0,this.effects=4,this.chorus=h.chorusRange-1,this.reverb=0,this.echoSustain=Math.floor(.5*(h.echoSustainRange-1)),this.echoDelay=Math.floor(.5*(h.echoDelayRange-1)),this.eqFilter.reset(),this.eqFilterType=!1,this.eqFilterSimpleCut=h.filterSimpleCutRange-1,this.eqFilterSimplePeak=0;for(let e=0;e<h.filterMorphCount;e++)this.eqSubFilters[e]=null,this.noteSubFilters[e]=null;switch(this.noteFilter.reset(),this.noteFilterType=!1,this.noteFilterSimpleCut=h.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.distortion=Math.floor(.75*(h.distortionRange-1)),this.bitcrusherFreq=Math.floor(.5*(h.bitcrusherFreqRange-1)),this.bitcrusherQuantization=Math.floor(.5*(h.bitcrusherQuantizationRange-1)),this.pan=h.panCenter,this.panDelay=0,this.pitchShift=h.pitchShiftCenter,this.detune=h.detuneCenter,this.vibrato=0,this.unison=0,this.stringSustain=10,this.stringSustainType=h.enableAcousticSustain?1:0,this.clicklessTransition=!1,this.arpeggioSpeed=12,this.envelopeSpeed=12,this.discreteEnvelope=!1,this.legacyTieOver=!1,this.aliases=!1,this.fadeIn=0,this.fadeOut=h.fadeOutNeutral,this.transition=h.transitions.dictionary.normal.index,this.envelopeCount=0,this.isNoiseInstrument=t,e){case 0:this.chipWave=2,this.chord=h.chords.dictionary.arpeggio.index,this.isUsingAdvancedLoopControls=!1,this.chipWaveLoopStart=0,this.chipWaveLoopEnd=h.rawRawChipWaves[this.chipWave].samples.length-1,this.chipWaveLoopMode=0,this.chipWavePlayBackwards=!1,this.chipWaveInStereo=!1,this.chipWaveStartOffset=0;break;case 9:this.chipWave=2,this.chipWaveInStereo=!1,this.chord=h.chords.dictionary.arpeggio.index;for(let e=0;e<64;e++)this.customChipWave[e]=24-Math.floor(.75*e);let i=0;for(let e=0;e<this.customChipWave.length;e++)i+=this.customChipWave[e];const n=i/this.customChipWave.length;let s=0,a=0;for(let e=0;e<this.customChipWave.length;e++)s+=a,a=this.customChipWave[e]-n,this.customChipWaveIntegral[e]=s;this.customChipWaveIntegral[64]=0;break;case 1:this.chord=h.chords.dictionary["custom interval"].index,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0;for(let e=0;e<this.operators.length;e++)this.operators[e].reset(e);break;case 11:this.transition=1,this.vibrato=0,this.effects=1,this.chord=3,this.algorithm=0,this.feedbackType=0,this.algorithm6Op=1,this.feedbackType6Op=1,this.customAlgorithm.fromPreset(1),this.feedbackAmplitude=0;for(let e=0;e<this.operators.length;e++)this.operators[e].reset(e);break;case 2:this.chipNoise=1,this.chord=h.chords.dictionary.arpeggio.index;break;case 3:this.chord=h.chords.dictionary.simultaneous.index,this.spectrumWave.reset(t);break;case 4:this.chord=h.chords.dictionary.simultaneous.index;for(let e=0;e<h.drumCount;e++)this.drumsetEnvelopes[e]=h.envelopes.dictionary["twang 2"].index,null==this.drumsetSpectrumWaves[e]&&(this.drumsetSpectrumWaves[e]=new ve(!0)),this.drumsetSpectrumWaves[e].reset(t);break;case 5:this.chord=h.chords.dictionary.simultaneous.index,this.harmonicsWave.reset();break;case 6:this.chord=h.chords.dictionary.arpeggio.index,this.pulseWidth=h.pulseWidthRange,this.decimalOffset=0;break;case 7:this.chord=h.chords.dictionary.strum.index,this.harmonicsWave.reset();break;case 12:this.chord=h.chords.dictionary.simultaneous.index,this.additiveWave.reset();break;case 10:this.transition=0,this.vibrato=0,this.interval=0,this.effects=0,this.chord=0,this.modChannels=[],this.modInstruments=[],this.modulators=[];for(let e=0;e<h.modCount;e++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(h.modulators.dictionary.none.index),this.invalidModulators[e]=!1,this.modFilterTypes[e]=0,this.modEnvelopeNumbers[e]=0;break;case 8:this.chord=h.chords.dictionary.arpeggio.index,this.supersawDynamism=h.supersawDynamismMax,this.supersawSpread=Math.ceil(h.supersawSpreadMax/2),this.supersawShape=0,this.pulseWidth=h.pulseWidthRange-1,this.decimalOffset=0;break;default:throw new Error("Unrecognized instrument type: "+e)}this.chord!=h.chords.dictionary.simultaneous.index&&(this.effects=2048|this.effects)}convertLegacySettings(e,t){let i=e.filterCutoff,n=e.filterResonance,s=e.filterEnvelope,a=e.pulseEnvelope,r=e.operatorEnvelopes,o=e.feedbackEnvelope;null==i&&(i=0==this.type?6:10),null==n&&(n=0),null==s&&(s=h.envelopes.dictionary.none),null==a&&(a=h.envelopes.dictionary[6==this.type?"twang 2":"none"]),null==r&&(r=[h.envelopes.dictionary[1==this.type?"note size":"none"],h.envelopes.dictionary.none,h.envelopes.dictionary.none,h.envelopes.dictionary.none]),null==o&&(o=h.envelopes.dictionary.none);10==i&&4==s.type&&(s=h.envelopes.dictionary.none);const l=h.algorithms[this.algorithm].carrierCount;let p=!0,u=!0,c=1==s.type||1==a.type;if(1==this.type||11==this.type){c=c||1==o.type;for(let e=0;e<r.length;e++)e<l?1!=r[e].type?u=!1:p=!1:c=c||1==r[e].type}this.envelopeCount=0,1!=this.type&&11!=this.type||(u&&c?this.addEnvelope(h.instrumentAutomationTargets.dictionary.noteVolume.index,0,h.envelopes.dictionary["note size"].index,!1):p&&!c&&this.addEnvelope(h.instrumentAutomationTargets.dictionary.none.index,0,h.envelopes.dictionary["note size"].index,!1)),0==s.type?(this.noteFilter.reset(),this.noteFilterType=!1,this.eqFilter.convertLegacySettings(i,n,s),this.effects&=-33,(t||this.eqFilterType)&&(this.eqFilterType=!0,this.eqFilterSimpleCut=i,this.eqFilterSimplePeak=n)):(this.eqFilter.reset(),this.eqFilterType=!1,this.noteFilterType=!1,this.noteFilter.convertLegacySettings(i,n,s),this.effects|=32,this.addEnvelope(h.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index,0,s.index,!1),(t||this.noteFilterType)&&(this.noteFilterType=!0,this.noteFilterSimpleCut=i,this.noteFilterSimplePeak=n)),0!=a.type&&this.addEnvelope(h.instrumentAutomationTargets.dictionary.pulseWidth.index,0,a.index,!1);for(let e=0;e<r.length;e++)e<l&&u||0!=r[e].type&&this.addEnvelope(h.instrumentAutomationTargets.dictionary.operatorAmplitude.index,e,r[e].index,!1);0!=o.type&&this.addEnvelope(h.instrumentAutomationTargets.dictionary.feedbackAmplitude.index,0,o.index,!1)}toJsonObject(){const e={type:h.instrumentTypeNames[this.type],volume:this.volume,noteFilter:this.noteFilter.toJsonObject(),noteFilterType:this.noteFilterType,noteSimpleCut:this.noteFilterSimpleCut,noteSimplePeak:this.noteFilterSimplePeak,envelopeSpeed:this.envelopeSpeed,discreteEnvelope:this.discreteEnvelope};this.preset!=this.type&&(e.preset=this.preset);for(let t=0;t<h.filterMorphCount;t++)null!=this.noteSubFilters[t]&&(e["noteSubFilters"+t]=this.noteSubFilters[t].toJsonObject());const t=[];for(const e of this.effectOrder)this.effects&1<<e&&t.push(h.effectNames[e]);if(e.effects=t,e.effectOrder=this.effectOrder,M(this.effects)&&(e.transition=h.transitions[this.transition].name,e.clicklessTransition=this.clicklessTransition),k(this.effects)&&(e.chord=this.getChord().name,e.fastTwoNoteArp=this.fastTwoNoteArp,e.arpeggioSpeed=this.arpeggioSpeed),F(this.effects)&&(e.pitchShiftSemitones=this.pitchShift),x(this.effects)&&(e.detuneCents=He.detuneToCents(this.detune)),q(this.effects)&&(-1==this.vibrato&&(this.vibrato=5),5!=this.vibrato?e.vibrato=h.vibratos[this.vibrato].name:e.vibrato="custom",e.vibratoDepth=this.vibratoDepth,e.vibratoDelay=this.vibratoDelay,e.vibratoSpeed=this.vibratoSpeed,e.vibratoType=this.vibratoType),I(this.effects)){e.eqFilterType=this.eqFilterType,e.eqSimpleCut=this.eqFilterSimpleCut,e.eqSimplePeak=this.eqFilterSimplePeak,e.eqFilter=this.eqFilter.toJsonObject();for(let t=0;t<h.filterMorphCount;t++)null!=this.eqSubFilters[t]&&(e["eqSubFilters"+t]=this.eqSubFilters[t].toJsonObject())}if(P(this.effects)&&(e.distortion=Math.round(100*this.distortion/(h.distortionRange-1)),e.aliases=this.aliases),E(this.effects)&&(e.bitcrusherOctave=(h.bitcrusherFreqRange-1-this.bitcrusherFreq)*h.bitcrusherOctaveStep,e.bitcrusherQuantization=Math.round(100*this.bitcrusherQuantization/(h.bitcrusherQuantizationRange-1))),T(this.effects)&&(e.pan=Math.round(100*(this.pan-h.panCenter)/h.panCenter),e.panDelay=this.panDelay),z(this.effects)&&(e.chorus=Math.round(100*this.chorus/(h.chorusRange-1))),D(this.effects)&&(e.echoSustain=Math.round(100*this.echoSustain/(h.echoSustainRange-1)),e.echoDelayBeats=Math.round(1e3*(this.echoDelay+1)*h.echoDelayStepTicks/(h.ticksPerPart*h.partsPerBeat))/1e3),H(this.effects)&&(e.reverb=Math.round(100*this.reverb/(h.reverbRange-1))),4!=this.type&&(e.fadeInSeconds=Math.round(1e4*He.fadeInSettingToSeconds(this.fadeIn))/1e4,e.fadeOutTicks=He.fadeOutSettingToTicks(this.fadeOut)),5==this.type||7==this.type){e.harmonics=[];for(let t=0;t<h.harmonicsControlPoints;t++)e.harmonics[t]=Math.round(100*this.harmonicsWave.harmonics[t]/h.harmonicsMax)}if(12==this.type){e.additive=[],e.additiveWaves=[];for(let t=0;t<h.additiveControlPoints;t++)e.additive[t]=Math.round(100*this.additiveWave.additives[t]/h.additiveMax),e.additiveWaves[t]=this.additiveWave.waveTypes[t]}if(2==this.type)e.wave=h.chipNoises[this.chipNoise].name,e.unison=this.unison==h.unisons.length?"custom":h.unisons[this.unison].name,this.unison==h.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign);else if(3==this.type){e.spectrum=[];for(let t=0;t<h.spectrumControlPoints;t++)e.spectrum[t]=Math.round(100*this.spectrumWave.spectrum[t]/h.spectrumMax);e.unison=this.unison==h.unisons.length?"custom":h.unisons[this.unison].name,this.unison==h.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign)}else if(4==this.type){e.drums=[];for(let t=0;t<h.drumCount;t++){const i=[];for(let e=0;e<h.spectrumControlPoints;e++)i[e]=Math.round(100*this.drumsetSpectrumWaves[t].spectrum[e]/h.spectrumMax);e.drums[t]={filterEnvelope:this.getDrumsetEnvelope(t).name,spectrum:i}}}else if(0==this.type)e.wave=h.chipWaves[this.chipWave].name,e.unison=this.unison==h.unisons.length?"custom":h.unisons[this.unison].name,this.unison==h.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign),e.isUsingAdvancedLoopControls=this.isUsingAdvancedLoopControls,e.chipWaveLoopStart=this.chipWaveLoopStart,e.chipWaveLoopEnd=this.chipWaveLoopEnd,e.chipWaveLoopMode=this.chipWaveLoopMode,e.chipWavePlayBackwards=this.chipWavePlayBackwards,e.chipWaveStartOffset=this.chipWaveStartOffset,e.chipWaveInStereo=this.chipWaveInStereo;else if(6==this.type)e.pulseWidth=this.pulseWidth,e.decimalOffset=this.decimalOffset,e.unison=this.unison==h.unisons.length?"custom":h.unisons[this.unison].name,this.unison==h.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign);else if(8==this.type)e.pulseWidth=this.pulseWidth,e.decimalOffset=this.decimalOffset,e.dynamism=Math.round(100*this.supersawDynamism/h.supersawDynamismMax),e.spread=Math.round(100*this.supersawSpread/h.supersawSpreadMax),e.shape=Math.round(100*this.supersawShape/h.supersawShapeMax);else if(7==this.type)e.unison=this.unison==h.unisons.length?"custom":h.unisons[this.unison].name,this.unison==h.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign),e.stringSustain=Math.round(100*this.stringSustain/(h.stringSustainRange-1)),h.enableAcousticSustain&&(e.stringSustainType=h.sustainTypeNames[this.stringSustainType]);else if(5==this.type)e.unison=this.unison==h.unisons.length?"custom":h.unisons[this.unison].name,this.unison==h.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign);else if(1==this.type||11==this.type){const t=[];for(const e of this.operators)t.push({frequency:h.operatorFrequencies[e.frequency].name,amplitude:e.amplitude,waveform:h.operatorWaves[e.waveform].name,pulseWidth:e.pulseWidth});if(1==this.type)e.algorithm=h.algorithms[this.algorithm].name,e.feedbackType=h.feedbacks[this.feedbackType].name,e.feedbackAmplitude=this.feedbackAmplitude,e.operators=t;else{if(e.algorithm=h.algorithms6Op[this.algorithm6Op].name,e.feedbackType=h.feedbacks6Op[this.feedbackType6Op].name,e.feedbackAmplitude=this.feedbackAmplitude,0==this.algorithm6Op){const t={};t.mods=this.customAlgorithm.modulatedBy,t.carrierCount=this.customAlgorithm.carrierCount,e.customAlgorithm=t}if(0==this.feedbackType6Op){const t={};t.mods=this.customFeedbackType.indices,e.customFeedback=t}e.operators=t}}else if(9==this.type){e.wave=h.chipWaves[this.chipWave].name,e.unison=this.unison==h.unisons.length?"custom":h.unisons[this.unison].name,this.unison==h.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign),e.customChipWave=new Float64Array(64),e.customChipWaveIntegral=new Float64Array(65);for(let t=0;t<this.customChipWave.length;t++)e.customChipWave[t]=this.customChipWave[t]}else{if(10!=this.type)throw new Error("Unrecognized instrument type");e.modChannels=[],e.modInstruments=[],e.modSettings=[],e.modFilterTypes=[],e.modEnvelopeNumbers=[];for(let t=0;t<h.modCount;t++)e.modChannels[t]=this.modChannels[t],e.modInstruments[t]=this.modInstruments[t],e.modSettings[t]=this.modulators[t],e.modFilterTypes[t]=this.modFilterTypes[t],e.modEnvelopeNumbers[t]=this.modEnvelopeNumbers[t]}const i=[];for(let e=0;e<this.envelopeCount;e++)i.push(this.envelopes[e].toJsonObject());return e.envelopes=i,e}fromJsonObject(e,t,i,n,s,a=0,r=h.jsonFormat){null==e&&(e={});const o=r.toLowerCase();let l=h.instrumentTypeNames.indexOf(e.type);if("synthbox"==o&&"FM"==e.type&&(l=h.instrumentTypeNames.indexOf("FM6op")),-1==l&&(l=i?10:t?2:0),this.setTypeAndReset(l,t,i),this.effects&=-5,null!=e.preset&&(this.preset=e.preset>>>0),null!=e.volume?this.volume="jummbox"==o||"midbox"==o||"synthbox"==o||"goldbox"==o||"paandorasbox"==o||"ultrabox"==o||"slarmoosbox"==o?X(-h.volumeRange/2,h.volumeRange/2+1,0|e.volume):Math.round(25*-X(0,8,Math.round(5-(0|e.volume)/20))/7):this.volume=0,this.envelopeSpeed=null!=e.envelopeSpeed?X(0,h.modulators.dictionary["envelope speed"].maxRawVol+1,0|e.envelopeSpeed):12,null!=e.discreteEnvelope?this.discreteEnvelope=e.discreteEnvelope:this.discreteEnvelope=!1,Array.isArray(e.effects)){let t=0;for(let i=0;i<e.effects.length;i++)t|=1<<h.effectNames.indexOf(e.effects[i]);this.effects=4095&t}else{const t=["none","reverb","chorus","chorus & reverb"];this.effects=t.indexOf(e.effects),-1==this.effects&&(this.effects=2==this.type?0:1)}this.transition=h.transitions.dictionary.normal.index;const p=e.transition||e.envelope;if(null!=p){let t=h.transitions.dictionary[p];if(null==e.fadeInSeconds||null==e.fadeOutTicks){const e={binary:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},seamless:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},sudden:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},hard:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},smooth:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},soft:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},slide:{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},"cross fade":{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},"hard fade":{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},"medium fade":{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},"soft fade":{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}}[p];null!=e&&(t=h.transitions.dictionary[e.transition],this.fadeIn=He.secondsToFadeInSetting(e.fadeInSeconds),this.fadeOut=He.ticksToFadeOutSetting(e.fadeOutTicks))}null!=t&&(this.transition=t.index),this.transition!=h.transitions.dictionary.normal.index&&(this.effects=1024|this.effects)}null!=e.fadeInSeconds&&(this.fadeIn=He.secondsToFadeInSetting(+e.fadeInSeconds)),null!=e.fadeOutTicks&&(this.fadeOut=He.ticksToFadeOutSetting(+e.fadeOutTicks));{const t=e.chord,i={harmony:"simultaneous"},n=h.chords.dictionary[i[t]]||h.chords.dictionary[t];null!=n?this.chord=n.index:2==this.type?this.chord=h.chords.dictionary.arpeggio.index:7==this.type?this.chord=h.chords.dictionary.strum.index:0==this.type?this.chord=h.chords.dictionary.arpeggio.index:1==this.type||11==this.type?this.chord=h.chords.dictionary["custom interval"].index:this.chord=h.chords.dictionary.simultaneous.index}this.unison=h.unisons.dictionary.none.index;const u=e.unison||e.interval||e.chorus;if(null!=u){const e={union:"none",fifths:"fifth",octaves:"octave",error:"voiced"},t=h.unisons.dictionary[e[u]]||h.unisons.dictionary[u];null!=t&&(this.unison=t.index),"custom"==u&&(this.unison=h.unisons.length)}if(this.unisonVoices=null==e.unisonVoices?h.unisons[this.unison].voices:e.unisonVoices,this.unisonSpread=null==e.unisonSpread?h.unisons[this.unison].spread:e.unisonSpread,this.unisonOffset=null==e.unisonOffset?h.unisons[this.unison].offset:e.unisonOffset,this.unisonExpression=null==e.unisonExpression?h.unisons[this.unison].expression:e.unisonExpression,this.unisonSign=null==e.unisonSign?h.unisons[this.unison].sign:e.unisonSign,"custom harmony"==e.chorus&&(this.unison=h.unisons.dictionary.hum.index,this.chord=h.chords.dictionary["custom interval"].index),this.chord==h.chords.dictionary.simultaneous.index||Array.isArray(e.effects)||(this.effects=2048|this.effects),null!=e.pitchShiftSemitones&&(this.pitchShift=X(0,h.pitchShiftRange,Math.round(+e.pitchShiftSemitones))),null!=e.octoff){let t=e.octoff;this.effects=128|this.effects,this.pitchShift="+1 (octave)"==t||"+2 (2 octaves)"==t?24:"+1/2 (fifth)"==t||"+1 1/2 (octave and fifth)"==t?18:"-1 (octave)"==t||"-2 (2 octaves"==t?0:"-1/2 (fifth)"==t||"-1 1/2 (octave and fifth)"==t?6:12}null!=e.detuneCents&&(this.detune=X(h.detuneMin,h.detuneMax+1,Math.round(He.centsToDetune(+e.detuneCents)))),this.vibrato=h.vibratos.dictionary.none.index;const c=e.vibrato||e.effect;if(null!=c){const t={"vibrato light":"light","vibrato delayed":"delayed","vibrato heavy":"heavy"},i=h.vibratos.dictionary[t[u]]||h.vibratos.dictionary[c];null!=i?this.vibrato=i.index:"custom"==c&&(this.vibrato=h.vibratos.length),this.vibrato==h.vibratos.length?(this.vibratoDepth=e.vibratoDepth,this.vibratoSpeed=e.vibratoSpeed,this.vibratoDelay=e.vibratoDelay,this.vibratoType=e.vibratoType):(this.vibratoDepth=h.vibratos[this.vibrato].amplitude,this.vibratoDelay=h.vibratos[this.vibrato].delayTicks/2,this.vibratoSpeed=10,this.vibratoType=h.vibratos[this.vibrato].type),i!=h.vibratos.dictionary.none&&(this.effects=512|this.effects)}if(null!=e.pan?this.pan=X(0,h.panMax+1,Math.round(h.panCenter+(0|e.pan)*h.panCenter/100)):null!=e.ipan?this.pan=X(0,h.panMax+1,h.panCenter+-50*e.ipan):this.pan=h.panCenter,this.pan!=h.panCenter&&(this.effects=4|this.effects),null!=e.panDelay?this.panDelay=0|e.panDelay:this.panDelay=0,null!=e.detune?this.detune=X(h.detuneMin,h.detuneMax+1,0|e.detune):null==e.detuneCents&&(this.detune=h.detuneCenter),null!=e.distortion&&(this.distortion=X(0,h.distortionRange,Math.round((h.distortionRange-1)*(0|e.distortion)/100))),null!=e.bitcrusherOctave&&(this.bitcrusherFreq=h.bitcrusherFreqRange-1-+e.bitcrusherOctave/h.bitcrusherOctaveStep),null!=e.bitcrusherQuantization&&(this.bitcrusherQuantization=X(0,h.bitcrusherQuantizationRange,Math.round((h.bitcrusherQuantizationRange-1)*(0|e.bitcrusherQuantization)/100))),null!=e.echoSustain&&(this.echoSustain=X(0,h.echoSustainRange,Math.round((h.echoSustainRange-1)*(0|e.echoSustain)/100))),null!=e.echoDelayBeats&&(this.echoDelay=X(0,h.echoDelayRange,Math.round(+e.echoDelayBeats*(h.ticksPerPart*h.partsPerBeat)/h.echoDelayStepTicks-1))),isNaN(e.chorus)||(this.chorus=X(0,h.chorusRange,Math.round((h.chorusRange-1)*(0|e.chorus)/100))),null!=e.reverb?this.reverb=X(0,h.reverbRange,Math.round((h.reverbRange-1)*(0|e.reverb)/100)):this.reverb=a,null!=e.pulseWidth?this.pulseWidth=X(1,h.pulseWidthRange+1,Math.round(e.pulseWidth)):this.pulseWidth=h.pulseWidthRange,null!=e.decimalOffset?this.decimalOffset=X(0,100,Math.round(e.decimalOffset)):this.decimalOffset=0,null!=e.dynamism?this.supersawDynamism=X(0,h.supersawDynamismMax+1,Math.round(h.supersawDynamismMax*(0|e.dynamism)/100)):this.supersawDynamism=h.supersawDynamismMax,null!=e.spread?this.supersawSpread=X(0,h.supersawSpreadMax+1,Math.round(h.supersawSpreadMax*(0|e.spread)/100)):this.supersawSpread=Math.ceil(h.supersawSpreadMax/2),null!=e.shape?this.supersawShape=X(0,h.supersawShapeMax+1,Math.round(h.supersawShapeMax*(0|e.shape)/100)):this.supersawShape=0,null!=e.harmonics){for(let t=0;t<h.harmonicsControlPoints;t++)this.harmonicsWave.harmonics[t]=Math.max(0,Math.min(h.harmonicsMax,Math.round(h.harmonicsMax*+e.harmonics[t]/100)));this.harmonicsWave.markCustomWaveDirty()}else this.harmonicsWave.reset();if(null!=e.additives)for(let t=0;t<h.additiveControlPoints;t++)this.additiveWave.additives[t]=Math.max(0,Math.min(h.additiveMax,Math.round(h.additiveMax*+e.additive[t]/100))),null!=e.additiveWaves[t]?this.additiveWave.waveTypes[t]=e.additiveWaves[t]:this.additiveWave.waveTypes[t]=0;else this.additiveWave.reset();if(null!=e.spectrum)for(let t=0;t<h.spectrumControlPoints;t++)this.spectrumWave.spectrum[t]=Math.max(0,Math.min(h.spectrumMax,Math.round(h.spectrumMax*+e.spectrum[t]/100))),this.spectrumWave.markCustomWaveDirty();else this.spectrumWave.reset(t);null!=e.stringSustain?this.stringSustain=X(0,h.stringSustainRange,Math.round((h.stringSustainRange-1)*(0|e.stringSustain)/100)):this.stringSustain=10,this.stringSustainType=h.enableAcousticSustain?h.sustainTypeNames.indexOf(e.stringSustainType):0,-1==this.stringSustainType&&(this.stringSustainType=0),2==this.type&&(this.chipNoise=h.chipNoises.findIndex((t=>t.name==e.wave)),"pink noise"==e.wave&&(this.chipNoise=h.chipNoises.findIndex((e=>"pink"==e.name))),"brownian noise"==e.wave&&(this.chipNoise=h.chipNoises.findIndex((e=>"brownian"==e.name))),-1==this.chipNoise&&(this.chipNoise=1));const f={custom:"note size",steady:"none","pluck 1":"twang 1","pluck 2":"twang 2","pluck 3":"twang 3"},d=e=>null!=f[e]?h.envelopes.dictionary[f[e]]:h.envelopes.dictionary[e];if(4==this.type&&null!=e.drums)for(let t=0;t<h.drumCount;t++){const i=e.drums[t];if(null!=i){if(this.drumsetEnvelopes[t]=h.envelopes.dictionary["twang 2"].index,null!=i.filterEnvelope){const e=d(i.filterEnvelope);null!=e&&(this.drumsetEnvelopes[t]=e.index)}if(null!=i.spectrum)for(let e=0;e<h.spectrumControlPoints;e++)this.drumsetSpectrumWaves[t].spectrum[e]=Math.max(0,Math.min(h.spectrumMax,Math.round(h.spectrumMax*+i.spectrum[e]/100)));this.drumsetSpectrumWaves[t].markCustomWaveDirty()}}if(0==this.type){const t={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0},i={"10% pulse":22,"sunsoft bass":23,"loud pulse":24,sax:25,guitar:26,"atari bass":28,"atari pulse":29,"1% pulse":30,"curved sawtooth":31,viola:32,brass:33,"acoustic bass":34,lyre:35,"ramp pulse":36,piccolo:37,squaretooth:38,flatline:39,"pnryshk a (u5)":40,"pnryshk b (riff)":41},n={"shrill lute":42,"shrill bass":44,"nes pulse":45,"saw bass":46,euphonium:47,"shrill pulse":48,"r-sawtooth":49,recorder:50,"narrow saw":51,"deep square":52,"ring pulse":53,"double sine":54,contrabass:55,"double bass":56},s={"semi-square":63,"deep square":64,squaretal:40,"saw wide":65,"saw narrow ":66,"deep sawtooth":67,sawtal:68,pulse:69,"triple pulse":70,"high pulse":71,"deep pulse":72},a={test1:56,"pokey 4bit lfsr":57,"pokey 5step bass":58,"isolated spiky":59,"unnamed 1":60,"unnamed 2":61,"guitar string":75,intense:76,"buzz wave":77,"pokey square":57,"pokey bass":58,"banana wave":83,"test 1":84,"test 2":84,"real snare":85,"earthbound o. guitar":86},r={kick:87,snare:88,piano1:89,WOW:90,overdrive:91,trumpet:92,saxophone:93,orchestrahit:94,"detached violin":95,synth:96,sonic3snare:97,"come on":98,choir:99,overdriveguitar:100,flute:101,"legato violin":102,"tremolo violin":103,"amen break":104,"pizzicato violin":105,"tim allen grunt":106,tuba:107,loopingcymbal:108,standardkick:109,standardsnare:110,closedhihat:111,foothihat:112,openhihat:113,crashcymbal:114,pianoC4:115,"liver pad":116,marimba:117,susdotwav:118,wackyboxtts:119};this.chipWave=-1;const o=e.wave;for(const e of[t,i,n,s,a,r])if(-1==this.chipWave&&null!=e[o]&&null!=h.chipWaves[e[o]]){this.chipWave=e[o];break}if(-1==this.chipWave){const e=h.chipWaves.findIndex((e=>e.name==o));-1!=e&&(this.chipWave=e)}-1==this.chipWave&&(this.chipWave=1)}if(1==this.type||11==this.type){if(1==this.type)this.algorithm=h.algorithms.findIndex((t=>t.name==e.algorithm)),-1==this.algorithm&&(this.algorithm=0),this.feedbackType=h.feedbacks.findIndex((t=>t.name==e.feedbackType)),-1==this.feedbackType&&(this.feedbackType=0);else{if(this.algorithm6Op=h.algorithms6Op.findIndex((t=>t.name==e.algorithm)),-1==this.algorithm6Op&&(this.algorithm6Op=1),0==this.algorithm6Op?this.customAlgorithm.set(e.customAlgorithm.carrierCount,e.customAlgorithm.mods):this.customAlgorithm.fromPreset(this.algorithm6Op),this.feedbackType6Op=h.feedbacks6Op.findIndex((t=>t.name==e.feedbackType)),-1==this.feedbackType6Op){let t=w([{name:"2⟲ 3⟲",indices:[[],[2],[3],[],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4],[],[]]},{name:"4⟲ 5⟲",indices:[[],[],[],[4],[5],[]]},{name:"5⟲ 6⟲",indices:[[],[],[],[],[5],[6]]},{name:"1⟲ 6⟲",indices:[[1],[],[],[],[],[6]]},{name:"1⟲ 3⟲",indices:[[1],[],[3],[],[],[]]},{name:"1⟲ 4⟲",indices:[[1],[],[],[4],[],[]]},{name:"1⟲ 5⟲",indices:[[1],[],[],[],[5],[]]},{name:"4⟲ 6⟲",indices:[[],[],[],[4],[],[6]]},{name:"2⟲ 6⟲",indices:[[],[2],[],[],[],[6]]},{name:"3⟲ 6⟲",indices:[[],[],[3],[],[],[6]]},{name:"4⟲ 5⟲ 6⟲",indices:[[],[],[],[4],[5],[6]]},{name:"1⟲ 3⟲ 6⟲",indices:[[1],[],[3],[],[],[6]]},{name:"2→5",indices:[[],[],[],[],[2],[]]},{name:"2→6",indices:[[],[],[],[],[],[2]]},{name:"3→5",indices:[[],[],[],[],[3],[]]},{name:"3→6",indices:[[],[],[],[],[],[3]]},{name:"4→6",indices:[[],[],[],[],[],[4]]},{name:"5→6",indices:[[],[],[],[],[],[5]]},{name:"1→3→4",indices:[[],[],[1],[],[3],[]]},{name:"2→5→6",indices:[[],[],[],[],[2],[5]]},{name:"2→4→6",indices:[[],[],[],[2],[],[4]]},{name:"4→5→6",indices:[[],[],[],[],[4],[5]]},{name:"3→4→5→6",indices:[[],[],[],[3],[4],[5]]},{name:"2→3→4→5→6",indices:[[],[1],[2],[3],[4],[5]]},{name:"1→2→3→4→5→6",indices:[[],[1],[2],[3],[4],[5]]}]),i=t[t.findIndex((t=>t.name==e.feedbackType))].indices;null!=i?(this.feedbackType6Op=0,this.customFeedbackType.set(i)):this.feedbackType6Op=1}0==this.feedbackType6Op&&null!=e.customFeedback?this.customFeedbackType.set(e.customFeedback.mods):this.customFeedbackType.fromPreset(this.feedbackType6Op)}null!=e.feedbackAmplitude?this.feedbackAmplitude=X(0,h.operatorAmplitudeMax+1,0|e.feedbackAmplitude):this.feedbackAmplitude=0;for(let t=0;t<h.operatorCount+(11==this.type?2:0);t++){const i=this.operators[t];let n;if(null!=e.operators&&(n=e.operators[t]),null==n&&(n={}),i.frequency=h.operatorFrequencies.findIndex((e=>e.name==n.frequency)),-1==i.frequency&&(i.frequency=0),null!=n.amplitude?i.amplitude=X(0,h.operatorAmplitudeMax+1,0|n.amplitude):i.amplitude=0,null!=n.waveform){if("goldbox"==o&&t>3){i.waveform=0;continue}i.waveform=h.operatorWaves.findIndex((e=>e.name==n.waveform)),-1==i.waveform&&("square"==n.waveform?(i.waveform=h.operatorWaves.dictionary["pulse width"].index,i.pulseWidth=5):"rounded"==n.waveform?i.waveform=h.operatorWaves.dictionary["quasi-sine"].index:i.waveform=0)}else i.waveform=0;null!=n.pulseWidth?i.pulseWidth=0|n.pulseWidth:i.pulseWidth=5}}else if(9==this.type){if(e.customChipWave){for(let t=0;t<64;t++)this.customChipWave[t]=e.customChipWave[t];let t=0;for(let e=0;e<this.customChipWave.length;e++)t+=this.customChipWave[e];const i=t/this.customChipWave.length;let n=0,s=0;for(let e=0;e<this.customChipWave.length;e++)n+=s,s=this.customChipWave[e]-i,this.customChipWaveIntegral[e]=n;this.customChipWaveIntegral[64]=0}}else if(10==this.type&&null!=e.modChannels)for(let t=0;t<h.modCount;t++)this.modChannels[t]=e.modChannels[t],this.modInstruments[t]=e.modInstruments[t],this.modulators[t]=e.modSettings[t],null!=e.modFilterTypes&&(this.modFilterTypes[t]=e.modFilterTypes[t]),null!=e.modEnvelopeNumbers&&(this.modEnvelopeNumbers[t]=e.modEnvelopeNumbers[t]);if(10!=this.type){this.chord==h.chords.dictionary.arpeggio.index&&null!=e.arpeggioSpeed?this.arpeggioSpeed=e.arpeggioSpeed:this.arpeggioSpeed=n?9:12,null!=e.fastTwoNoteArp?this.fastTwoNoteArp=e.fastTwoNoteArp:this.fastTwoNoteArp=s,null!=e.clicklessTransition?this.clicklessTransition=e.clicklessTransition:this.clicklessTransition=!1,null!=e.aliases?this.aliases=e.aliases:"modbox"==o?(this.effects=8|this.effects,this.aliases=!0,this.distortion=0):this.aliases=!1,null!=e.noteFilterType&&(this.noteFilterType=e.noteFilterType),null!=e.noteSimpleCut&&(this.noteFilterSimpleCut=e.noteSimpleCut),null!=e.noteSimplePeak&&(this.noteFilterSimplePeak=e.noteSimplePeak),null!=e.noteFilter?this.noteFilter.fromJsonObject(e.noteFilter):this.noteFilter.reset();for(let t=0;t<h.filterMorphCount;t++)Array.isArray(e["noteSubFilters"+t])&&(this.noteSubFilters[t]=new ke,this.noteSubFilters[t].fromJsonObject(e["noteSubFilters"+t]));if(null!=e.eqFilterType&&(this.eqFilterType=e.eqFilterType),null!=e.eqSimpleCut&&(this.eqFilterSimpleCut=e.eqSimpleCut),null!=e.eqSimplePeak&&(this.eqFilterSimplePeak=e.eqSimplePeak),Array.isArray(e.eqFilter))this.eqFilter.fromJsonObject(e.eqFilter);else{this.eqFilter.reset();const t={},i=8e3,n=11,s=8;if(null!=e.filterCutoffHz?t.filterCutoff=X(0,n,Math.round(n-1+2*Math.log((0|e.filterCutoffHz)/i)/Math.LN2)):t.filterCutoff=0==this.type?6:10,null!=e.filterResonance?t.filterResonance=X(0,s,Math.round((s-1)*(0|e.filterResonance)/100)):t.filterResonance=0,t.filterEnvelope=d(e.filterEnvelope),t.pulseEnvelope=d(e.pulseEnvelope),t.feedbackEnvelope=d(e.feedbackEnvelope),Array.isArray(e.operators)){t.operatorEnvelopes=[];for(let i=0;i<h.operatorCount+(11==this.type?2:0);i++){let n;null!=e.operators[i]&&(n=d(e.operators[i].envelope)),t.operatorEnvelopes[i]=null!=n?n:h.envelopes.dictionary.none}}if(null!=e.filter){const i=[10,6,3,0,8,5,2],n=["none","none","none","none","decay 1","decay 2","decay 3"],s=["none","bright","medium","soft","decay bright","decay medium","decay soft"],a={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let r=null!=a[e.filter]?a[e.filter]:s.indexOf(e.filter);-1==r&&(r=0),t.filterCutoff=i[r],t.filterEnvelope=d(n[r]),t.filterResonance=0}this.convertLegacySettings(t,!0)}for(let t=0;t<h.filterMorphCount;t++)Array.isArray(e["eqSubFilters"+t])&&(this.eqSubFilters[t]=new ke,this.eqSubFilters[t].fromJsonObject(e["eqSubFilters"+t]));if(Array.isArray(e.envelopes)){const t=e.envelopes;for(let i=0;i<t.length&&!(this.envelopeCount>=h.maxEnvelopeCount);i++){const n=new Fe(this.isNoiseInstrument);let s,a,r;n.fromJsonObject(t[i],o),s=null!=e.pitchEnvelopeStart&&null!=e.pitchEnvelopeStart?e.pitchEnvelopeStart:null!=e["pitchEnvelopeStart"+i]&&null!=e["pitchEnvelopeStart"+i]?e["pitchEnvelopeStart"+i]:n.pitchEnvelopeStart,a=null!=e.pitchEnvelopeEnd&&null!=e.pitchEnvelopeEnd?e.pitchEnvelopeEnd:null!=e["pitchEnvelopeEnd"+i]&&null!=e["pitchEnvelopeEnd"+i]?e["pitchEnvelopeEnd"+i]:n.pitchEnvelopeEnd,r=null!=e["envelopeInverse"+i]&&null!=e["envelopeInverse"+i]?e["envelopeInverse"+i]:null!=e.pitchEnvelopeInverse&&null!=e.pitchEnvelopeInverse&&"pitch"==h.envelopes[n.envelope].name?e.pitchEnvelopeInverse:n.inverse,this.addEnvelope(n.target,n.index,n.envelope,!0,s,a,r,n.perEnvelopeSpeed,n.perEnvelopeLowerBound,n.perEnvelopeUpperBound,n.steps,n.seed,n.waveform)}}}0===l&&(null!=e.isUsingAdvancedLoopControls?(this.isUsingAdvancedLoopControls=e.isUsingAdvancedLoopControls,this.chipWaveLoopStart=e.chipWaveLoopStart,this.chipWaveLoopEnd=e.chipWaveLoopEnd,this.chipWaveLoopMode=e.chipWaveLoopMode,this.chipWavePlayBackwards=e.chipWavePlayBackwards,this.chipWaveStartOffset=e.chipWaveStartOffset):(this.isUsingAdvancedLoopControls=!1,this.chipWaveLoopStart=0,this.chipWaveLoopEnd=h.rawRawChipWaves[this.chipWave].samples.length-1,this.chipWaveLoopMode=0,this.chipWavePlayBackwards=!1,this.chipWaveStartOffset=0),this.chipWaveInStereo=e.chipWaveInStereo)}getLargestControlPointCount(e){let t;if(e){t=this.noteFilter.controlPointCount;for(let e=0;e<h.filterMorphCount;e++)null!=this.noteSubFilters[e]&&this.noteSubFilters[e].controlPointCount>t&&(t=this.noteSubFilters[e].controlPointCount)}else{t=this.eqFilter.controlPointCount;for(let e=0;e<h.filterMorphCount;e++)null!=this.eqSubFilters[e]&&this.eqSubFilters[e].controlPointCount>t&&(t=this.eqSubFilters[e].controlPointCount)}return t}static frequencyFromPitch(e){return 440*Math.pow(2,(e-69)/12)}addEnvelope(e,t,i,n,s=0,a=-1,r=!1,o=-1,l=0,p=1,u=2,c=2,f=0){a=-1!=a?a:this.isNoiseInstrument?h.drumCount-1:h.maxPitch,o=-1!=o?o:n?1:h.envelopes[i].speed;let d=!1;if(this.supportsEnvelopeTarget(e,t)||(d=!0),this.envelopeCount>=h.maxEnvelopeCount)throw new Error;for(;this.envelopes.length<=this.envelopeCount;)this.envelopes[this.envelopes.length]=new Fe(this.isNoiseInstrument);const m=this.envelopes[this.envelopeCount];m.target=d?h.instrumentAutomationTargets.dictionary.none.index:e,m.index=d?0:t,m.envelope=n?i:X(0,h.newEnvelopes.length,h.envelopes[i].type),m.pitchEnvelopeStart=s,m.pitchEnvelopeEnd=a,m.inverse=r,m.perEnvelopeSpeed=o,m.perEnvelopeLowerBound=l,m.perEnvelopeUpperBound=p,m.steps=u,m.seed=c,m.waveform=f,this.envelopeCount++}supportsEnvelopeTarget(e,t){const i=h.instrumentAutomationTargets[e];if(null==i.computeIndex&&"none"!=i.name)return!1;if(t>=i.maxCount)return!1;if(null!=i.compatibleInstruments&&-1==i.compatibleInstruments.indexOf(this.type))return!1;if(null!=i.effect&&0==(this.effects&1<<i.effect))return!1;if(i.isFilter){let e=this.noteFilter.controlPointCount;if(this.noteFilterType&&(e=1),t>=e)return!1}return"operatorFrequency"!=i.name&&"operatorAmplitude"!=i.name||!(t>=4+(11==this.type?2:0))}clearInvalidEnvelopeTargets(){for(let e=0;e<this.envelopeCount;e++){const t=this.envelopes[e].target,i=this.envelopes[e].index;this.supportsEnvelopeTarget(t,i)||(this.envelopes[e].target=h.instrumentAutomationTargets.dictionary.none.index,this.envelopes[e].index=0)}}getTransition(){return M(this.effects)?h.transitions[this.transition]:10==this.type?h.transitions.dictionary.interrupt:h.transitions.dictionary.normal}getFadeInSeconds(){return 4==this.type?0:He.fadeInSettingToSeconds(this.fadeIn)}getFadeOutTicks(){return 4==this.type?h.drumsetFadeOutTicks:He.fadeOutSettingToTicks(this.fadeOut)}getChord(){return k(this.effects)?h.chords[this.chord]:h.chords.dictionary.simultaneous}getDrumsetEnvelope(e){if(4!=this.type)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return h.envelopes[this.drumsetEnvelopes[e]]}}class qe{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[],this.muted=!1,this.name=""}}class Ie{constructor(e){this.scaleCustom=[],this.channels=[],this.limitDecay=4,this.limitRise=4e3,this.compressionThreshold=1,this.limitThreshold=1,this.compressionRatio=1,this.limitRatio=1,this.masterGain=1,this.inVolumeCap=0,this.outVolumeCap=0,this.eqFilter=new ke,this.eqFilterType=!1,this.eqFilterSimpleCut=h.filterSimpleCutRange-1,this.eqFilterSimplePeak=0,this.eqSubFilters=[],this.getNewNoteVolume=(e,t,i,n)=>{if(e&&null!=t&&null!=i&&null!=n){n=h.modCount-n-1;let e=h.modulators[this.channels[t].instruments[i].modulators[n]].newNoteVol,s=h.modulators.dictionary.tempo.index;return this.channels[t].instruments[i].modulators[n]==s&&(e=this.tempo-h.modulators[s].convertRealFactor),null!=e?e:6}return 6},this.getVolumeCap=(e,t,i,n)=>{if(e&&null!=t&&null!=i&&null!=n){n=h.modCount-n-1;let e=this.channels[t].instruments[i],s=h.modulators[e.modulators[n]],a=s.maxRawVol;return null!=a?("eq filter"!=s.name&&"note filter"!=s.name&&"song eq"!=s.name||(a=h.filterMorphCount-1,e.modFilterTypes[n]>0&&e.modFilterTypes[n]%2?a=h.filterFreqRange:e.modFilterTypes[n]>0&&(a=h.filterGainRange)),a):6}return 6},this.getVolumeCapForSetting=(e,t,i)=>{if(e){let e=h.modulators[t].maxRawVol;return null!=e?(null==i||"eq filter"!=h.modulators[t].name&&"note filter"!=h.modulators[t].name&&"song eq"!=h.modulators[t].name||(e=h.filterMorphCount-1,i>0&&i%2?e=h.filterFreqRange:i>0&&(e=h.filterGainRange)),e):h.noteSizeMax}return h.noteSizeMax},null!=e?this.fromBase64String(e):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount+this.modChannelCount}getMaxInstrumentsPerChannel(){return Math.max(this.layeredInstruments?h.layeredInstrumentCountMax:h.instrumentCountMin,this.patternInstruments?h.patternInstrumentCountMax:h.instrumentCountMin)}getMaxInstrumentsPerPattern(e){return this.getMaxInstrumentsPerPatternForChannel(this.channels[e])}getMaxInstrumentsPerPatternForChannel(e){return this.layeredInstruments?Math.min(h.layeredInstrumentCountMax,e.instruments.length):1}getChannelIsNoise(e){return e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount}getChannelIsMod(e){return e>=this.pitchChannelCount+this.noiseChannelCount}initToDefault(e=!0){this.scale=0,this.scaleCustom=[!0,!1,!0,!0,!1,!1,!1,!0,!0,!1,!0,!0],this.key=0,this.octave=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.reverb=0,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.rhythm=1,this.layeredInstruments=!1,this.patternInstruments=!1,this.eqFilter.reset();for(let e=0;e<h.filterMorphCount-1;e++)this.eqSubFilters[e]=null;if(this.title="Untitled",document.title=this.title+" - "+O.versionDisplayName,e){this.pitchChannelCount=3,this.noiseChannelCount=1,this.modChannelCount=1;for(let e=0;e<this.getChannelCount();e++){const t=e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount,i=e>=this.pitchChannelCount+this.noiseChannelCount;this.channels.length<=e&&(this.channels[e]=new qe);const n=this.channels[e];n.octave=Math.max(3-e,0);for(let e=0;e<this.patternsPerChannel;e++)n.patterns.length<=e?n.patterns[e]=new ce:n.patterns[e].reset();n.patterns.length=this.patternsPerChannel;for(let e=0;e<h.instrumentCountMin;e++)n.instruments.length<=e&&(n.instruments[e]=new xe(t,i)),n.instruments[e].setTypeAndReset(i?10:t?2:0,t,i);n.instruments.length=h.instrumentCountMin;for(let e=0;e<this.barCount;e++)n.bars[e]=e<4?1:0;n.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let e,t=[];t.push(Ie.k),t.push(re[Ie.q]),t.push(78);var i=encodeURIComponent(this.title);t.push(re[i.length>>6],re[63&i.length]);for(let e=0;e<i.length;e++)t.push(i.charCodeAt(e));if(t.push(110,re[this.pitchChannelCount],re[this.noiseChannelCount],re[this.modChannelCount]),t.push(115,re[this.scale]),this.scale==h.scales.dictionary.Custom.index)for(var n=1;n<h.pitchesPerOctave;n++)t.push(re[this.scaleCustom[n]?1:0]);if(t.push(107,re[this.key],re[this.octave-h.octaveMin]),t.push(108,re[this.loopStart>>6],re[63&this.loopStart]),t.push(101,re[this.loopLength-1>>6],re[this.loopLength-1&63]),t.push(116,re[this.tempo>>6],re[63&this.tempo]),t.push(97,re[this.beatsPerBar-1]),t.push(103,re[this.barCount-1>>6],re[this.barCount-1&63]),t.push(106,re[this.patternsPerChannel-1>>6],re[this.patternsPerChannel-1&63]),t.push(114,re[this.rhythm]),t.push(79),1!=this.compressionRatio||1!=this.limitRatio||4e3!=this.limitRise||4!=this.limitDecay||1!=this.limitThreshold||1!=this.compressionThreshold||1!=this.masterGain?(t.push(re[Math.round(this.compressionRatio<1?10*this.compressionRatio:10+60*(this.compressionRatio-1))]),t.push(re[Math.round(this.limitRatio<1?10*this.limitRatio:9+this.limitRatio)]),t.push(re[this.limitDecay]),t.push(re[Math.round((this.limitRise-2e3)/250)]),t.push(re[Math.round(20*this.compressionThreshold)]),t.push(re[Math.round(20*this.limitThreshold)]),t.push(re[Math.round(50*this.masterGain)>>6],re[63&Math.round(50*this.masterGain)])):t.push(re[63]),t.push(99),null==this.eqFilter)t.push(re[0]),console.log("Null EQ filter settings detected in toBase64String for song");else{t.push(re[this.eqFilter.controlPointCount]);for(let e=0;e<this.eqFilter.controlPointCount;e++){const i=this.eqFilter.controlPoints[e];t.push(re[i.type],re[Math.round(i.freq)],re[Math.round(i.gain)])}}let s=0;for(let e=0;e<h.filterMorphCount-1;e++)s|=+(null!=this.eqSubFilters[e+1])<<e;t.push(re[s>>6],re[63&s]);for(let e=0;e<h.filterMorphCount-1;e++)if(s&1<<e){t.push(re[this.eqSubFilters[e+1].controlPointCount]);for(let i=0;i<this.eqSubFilters[e+1].controlPointCount;i++){const n=this.eqSubFilters[e+1].controlPoints[i];t.push(re[n.type],re[Math.round(n.freq)],re[Math.round(n.gain)])}}t.push(85);for(let e=0;e<this.getChannelCount();e++){var a=encodeURIComponent(this.channels[e].name);t.push(re[a.length>>6],re[63&a.length]);for(let e=0;e<a.length;e++)t.push(a.charCodeAt(e))}if(t.push(105,re[this.layeredInstruments<<1|this.patternInstruments]),this.layeredInstruments||this.patternInstruments)for(let e=0;e<this.getChannelCount();e++)t.push(re[this.channels[e].instruments.length-h.instrumentCountMin]);t.push(111);for(let e=0;e<this.pitchChannelCount;e++)t.push(re[this.channels[e].octave]);for(let e=0;e<this.getChannelCount();e++)for(let i=0;i<this.channels[e].instruments.length;i++){const n=this.channels[e].instruments[i];if(t.push(84,re[n.type]),t.push(118,re[n.volume+h.volumeRange/2>>6],re[n.volume+h.volumeRange/2&63]),t.push(117,re[n.preset>>6],re[63&n.preset]),t.push(102),t.push(re[+n.noteFilterType]),n.noteFilterType)t.push(re[n.noteFilterSimpleCut]),t.push(re[n.noteFilterSimplePeak]);else{if(null==n.noteFilter)t.push(re[0]),console.log("Null Note filter settings detected in toBase64String for channelIndex "+e+", instrumentIndex "+i);else{t.push(re[n.noteFilter.controlPointCount]);for(let e=0;e<n.noteFilter.controlPointCount;e++){const i=n.noteFilter.controlPoints[e];t.push(re[i.type],re[Math.round(i.freq)],re[Math.round(i.gain)])}}let s=0;for(let e=0;e<h.filterMorphCount-1;e++)s|=+(null!=n.noteSubFilters[e+1])<<e;t.push(re[s>>6],re[63&s]);for(let e=0;e<h.filterMorphCount-1;e++)if(s&1<<e){t.push(re[n.noteSubFilters[e+1].controlPointCount]);for(let i=0;i<n.noteSubFilters[e+1].controlPointCount;i++){const s=n.noteSubFilters[e+1].controlPoints[i];t.push(re[s.type],re[Math.round(s.freq)],re[Math.round(s.gain)])}}}t.push(113,re[n.effects>>6],re[63&n.effects]);for(let e=0;e<12;e++)t.push(re[n.effectOrder[e]]);if(I(n.effects))if(t.push(re[+n.eqFilterType]),n.eqFilterType)t.push(re[n.eqFilterSimpleCut]),t.push(re[n.eqFilterSimplePeak]);else{if(null==n.eqFilter)t.push(re[0]),console.log("Null eq filter settings detected in toBase64String for channelIndex "+e+", instrumentIndex "+i);else{t.push(re[n.eqFilter.controlPointCount]);for(let e=0;e<n.eqFilter.controlPointCount;e++){const i=n.eqFilter.controlPoints[e];t.push(re[i.type],re[Math.round(i.freq)],re[Math.round(i.gain)])}}let s=0;for(let e=0;e<h.filterMorphCount-1;e++)s|=+(null!=n.eqSubFilters[e+1])<<e;t.push(re[s>>6],re[63&s]);for(let e=0;e<h.filterMorphCount-1;e++)if(s&1<<e){t.push(re[n.eqSubFilters[e+1].controlPointCount]);for(let i=0;i<n.eqSubFilters[e+1].controlPointCount;i++){const s=n.eqSubFilters[e+1].controlPoints[i];t.push(re[s.type],re[Math.round(s.freq)],re[Math.round(s.gain)])}}}if(M(n.effects)&&t.push(re[n.transition]),k(n.effects)&&(t.push(re[n.chord]),n.chord==h.chords.dictionary.arpeggio.index&&(t.push(re[n.arpeggioSpeed]),t.push(re[+n.fastTwoNoteArp]))),F(n.effects)&&t.push(re[n.pitchShift]),x(n.effects)&&t.push(re[n.detune-h.detuneMin>>6],re[n.detune-h.detuneMin&63]),q(n.effects)&&(t.push(re[n.vibrato]),n.vibrato==h.vibratos.length&&(t.push(re[Math.round(25*n.vibratoDepth)]),t.push(re[n.vibratoSpeed]),t.push(re[Math.round(n.vibratoDelay)]),t.push(re[n.vibratoType]))),P(n.effects)&&(t.push(re[n.distortion]),t.push(re[+n.aliases])),E(n.effects)&&t.push(re[n.bitcrusherFreq],re[n.bitcrusherQuantization]),T(n.effects)&&(t.push(re[n.pan>>6],re[63&n.pan]),t.push(re[n.panDelay])),z(n.effects)&&t.push(re[n.chorus]),D(n.effects)&&t.push(re[n.echoSustain],re[n.echoDelay]),H(n.effects)&&t.push(re[n.reverb]),4!=n.type&&(t.push(100,re[n.fadeIn],re[n.fadeOut]),t.push(re[+n.clicklessTransition])),5==n.type||7==n.type){t.push(72);const e=new pe;for(let t=0;t<h.harmonicsControlPoints;t++)e.write(h.harmonicsControlPointBits,n.harmonicsWave.harmonics[t]);e.encodeBase64(t)}if(12==n.type){t.push(89);const e=new pe;for(let t=0;t<h.additiveControlPoints;t++)e.write(h.additiveControlPointBits,n.additiveWave.additives[t]);e.encodeBase64(t);for(let e=0;e<h.additiveControlPoints;e++)t.push(re[n.additiveWave.waveTypes[e]])}if(0==n.type){n.chipWave>186?(t.push(119,re[n.chipWave-186]),t.push(re[3])):n.chipWave>124?(t.push(119,re[n.chipWave-124]),t.push(re[2])):n.chipWave>62?(t.push(119,re[n.chipWave-62]),t.push(re[1])):(t.push(119,re[n.chipWave]),t.push(re[0])),t.push(104,re[n.unison]),n.unison==h.unisons.length&&se(t,n.unisonVoices,n.unisonSpread,n.unisonOffset,n.unisonExpression,n.unisonSign),t.push(121);const e=X(0,32,n.chipWaveLoopMode)<<1|(n.isUsingAdvancedLoopControls?1:0);t.push(re[e]);const i=X(0,32,0)<<2|(n.chipWaveInStereo?1:0)<<1|(n.chipWavePlayBackwards?1:0);t.push(re[i]),ie(t,n.chipWaveLoopStart),ie(t,n.chipWaveLoopEnd),ie(t,n.chipWaveStartOffset)}else if(1==n.type||11==n.type){if(1==n.type)t.push(65,re[n.algorithm]),t.push(70,re[n.feedbackType]);else{if(t.push(65,re[n.algorithm6Op]),0==n.algorithm6Op){t.push(67,re[n.customAlgorithm.carrierCount]),t.push(113);for(let e=0;e<n.customAlgorithm.modulatedBy.length;e++){for(let i=0;i<n.customAlgorithm.modulatedBy[e].length;i++)t.push(re[n.customAlgorithm.modulatedBy[e][i]]);t.push(82)}t.push(113)}if(t.push(70,re[n.feedbackType6Op]),0==n.feedbackType6Op){t.push(113);for(let e=0;e<n.customFeedbackType.indices.length;e++){for(let i=0;i<n.customFeedbackType.indices[e].length;i++)t.push(re[n.customFeedbackType.indices[e][i]]);t.push(82)}t.push(113)}}t.push(66,re[n.feedbackAmplitude]),t.push(81);for(let e=0;e<(11==n.type?6:h.operatorCount);e++)t.push(re[n.operators[e].frequency]);t.push(80);for(let e=0;e<(11==n.type?6:h.operatorCount);e++)t.push(re[n.operators[e].amplitude]);t.push(82);for(let e=0;e<(11==n.type?6:h.operatorCount);e++)t.push(re[n.operators[e].waveform]),2==n.operators[e].waveform&&t.push(re[n.operators[e].pulseWidth])}else if(9==n.type){n.chipWave>186?(t.push(119,re[n.chipWave-186]),t.push(re[3])):n.chipWave>124?(t.push(119,re[n.chipWave-124]),t.push(re[2])):n.chipWave>62?(t.push(119,re[n.chipWave-62]),t.push(re[1])):(t.push(119,re[n.chipWave]),t.push(re[0])),t.push(104,re[n.unison]),n.unison==h.unisons.length&&se(t,n.unisonVoices,n.unisonSpread,n.unisonOffset,n.unisonExpression,n.unisonSign),t.push(77);for(let e=0;e<64;e++)t.push(re[n.customChipWave[e]+24])}else if(2==n.type)t.push(119,re[n.chipNoise]),t.push(104,re[n.unison]),n.unison==h.unisons.length&&se(t,n.unisonVoices,n.unisonSpread,n.unisonOffset,n.unisonExpression,n.unisonSign);else if(3==n.type){t.push(83);const e=new pe;for(let t=0;t<h.spectrumControlPoints;t++)e.write(h.spectrumControlPointBits,n.spectrumWave.spectrum[t]);e.encodeBase64(t),t.push(104,re[n.unison]),n.unison==h.unisons.length&&se(t,n.unisonVoices,n.unisonSpread,n.unisonOffset,n.unisonExpression,n.unisonSign)}else if(4==n.type){t.push(122);for(let e=0;e<h.drumCount;e++)t.push(re[n.drumsetEnvelopes[e]]);t.push(83);const e=new pe;for(let t=0;t<h.drumCount;t++)for(let i=0;i<h.spectrumControlPoints;i++)e.write(h.spectrumControlPointBits,n.drumsetSpectrumWaves[t].spectrum[i]);e.encodeBase64(t)}else if(5==n.type)t.push(104,re[n.unison]),n.unison==h.unisons.length&&se(t,n.unisonVoices,n.unisonSpread,n.unisonOffset,n.unisonExpression,n.unisonSign);else if(6==n.type)t.push(87,re[n.pulseWidth]),t.push(re[n.decimalOffset>>6],re[63&n.decimalOffset]),t.push(104,re[n.unison]),n.unison==h.unisons.length&&se(t,n.unisonVoices,n.unisonSpread,n.unisonOffset,n.unisonExpression,n.unisonSign);else if(8==n.type)t.push(120,re[n.supersawDynamism],re[n.supersawSpread],re[n.supersawShape]),t.push(87,re[n.pulseWidth]),t.push(re[n.decimalOffset>>6],re[63&n.decimalOffset]);else if(7==n.type){if(h.stringSustainRange>32)throw new Error("Not enough bits to represent sustain value and type in same base64 character.");t.push(104,re[n.unison]),n.unison==h.unisons.length&&se(t,n.unisonVoices,n.unisonSpread,n.unisonOffset,n.unisonExpression,n.unisonSign),t.push(73,re[n.stringSustain|n.stringSustainType<<5])}else if(10==n.type);else if(12!=n.type)throw new Error("Unknown instrument type.");t.push(69,re[n.envelopeCount]),t.push(re[n.envelopeSpeed]),t.push(re[+n.discreteEnvelope]);for(let e=0;e<n.envelopeCount;e++)t.push(re[n.envelopes[e].target]),h.instrumentAutomationTargets[n.envelopes[e].target].maxCount>1&&t.push(re[n.envelopes[e].index]),t.push(re[n.envelopes[e].envelope]),"pitch"==h.newEnvelopes[n.envelopes[e].envelope].name?n.isNoiseInstrument?(t.push(re[n.envelopes[e].pitchEnvelopeStart]),t.push(re[n.envelopes[e].pitchEnvelopeEnd])):(t.push(re[n.envelopes[e].pitchEnvelopeStart>>6],re[63&n.envelopes[e].pitchEnvelopeStart]),t.push(re[n.envelopes[e].pitchEnvelopeEnd>>6],re[63&n.envelopes[e].pitchEnvelopeEnd])):"random"==h.newEnvelopes[n.envelopes[e].envelope].name?(t.push(re[n.envelopes[e].steps]),t.push(re[n.envelopes[e].seed]),t.push(re[n.envelopes[e].waveform])):"lfo"==h.newEnvelopes[n.envelopes[e].envelope].name&&t.push(re[n.envelopes[e].waveform]),t.push(re[+n.envelopes[e].inverse]?re[+n.envelopes[e].inverse]:re[0]),"pitch"!=h.newEnvelopes[n.envelopes[e].envelope].name&&"note size"!=h.newEnvelopes[n.envelopes[e].envelope].name&&"punch"!=h.newEnvelopes[n.envelopes[e].envelope].name&&"none"!=h.newEnvelopes[n.envelopes[e].envelope].name&&t.push(re[h.perEnvelopeSpeedToIndices[n.envelopes[e].perEnvelopeSpeed]]),t.push(re[10*n.envelopes[e].perEnvelopeLowerBound]),t.push(re[10*n.envelopes[e].perEnvelopeUpperBound])}t.push(98),e=new pe;let r=0;for(;1<<r<this.patternsPerChannel+1;)r++;for(let t=0;t<this.getChannelCount();t++)for(let i=0;i<this.barCount;i++)e.write(r,this.channels[t].bars[i]);e.encodeBase64(t),t.push(112),e=new pe;const o=new pe,l=Ie.getNeededBits(h.noteSizeMax);for(let t=0;t<this.getChannelCount();t++){const i=this.channels[t],n=this.getMaxInstrumentsPerPattern(t),s=this.getChannelIsNoise(t),a=this.getChannelIsMod(t),r=Ie.getNeededBits(n-h.instrumentCountMin),p=Ie.getNeededBits(i.instruments.length-1);if(a){const n=Ie.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let s=0;s<i.instruments.length;s++){let i=this.channels[t].instruments[s];for(let t=0;t<h.modCount;t++){const s=i.modChannels[t],a=i.modInstruments[t],r=i.modulators[t],o=i.modFilterTypes[t],l=i.modEnvelopeNumbers[t];let p=h.modulators[r].forSong?2:0;r==h.modulators.dictionary.none.index&&(p=3),e.write(2,p),0!=p&&1!=p||(e.write(8,s),e.write(n,a)),3!=p&&e.write(6,r),"eq filter"!=h.modulators[i.modulators[t]].name&&"note filter"!=h.modulators[i.modulators[t]].name&&"song eq"!=h.modulators[i.modulators[t]].name||e.write(6,o),"individual envelope speed"==h.modulators[i.modulators[t]].name&&e.write(6,l)}}}const u=s||a?0:i.octave*h.pitchesPerOctave;let c=s?4:u;const f=a?[0,1,2,3,4,5]:s?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],d=[];for(let e=0;e<f.length;e++)f[e]+=u;for(const t of i.patterns){if(this.patternInstruments){const i=Z(h.instrumentCountMin,n,t.instruments.length);e.write(r,i-h.instrumentCountMin);for(let n=0;n<i;n++)e.write(p,t.instruments[n])}if(t.notes.length>0){e.write(1,1);let i=0;for(const n of t.notes){n.start<i&&a&&(e.write(2,0),e.write(1,1),e.writePartDuration(i-n.start)),n.start>i&&(e.write(2,0),a&&e.write(1,0),e.writePartDuration(n.start-i)),o.clear(),1==n.pitches.length?o.write(1,0):(o.write(1,1),o.write(3,n.pitches.length-2)),0==n.chipWaveStartOffset?o.write(1,0):(o.write(1,1),o.write(31,n.chipWaveStartOffset)),o.writePinCount(n.pins.length-1),a?o.write(11,n.pins[0].size):o.write(l,n.pins[0].size);let t=0,s=n.pitches[0],r=s;const p=[];for(let e=1;e<n.pins.length;e++){const i=n.pins[e],h=s+i.interval;r!=h?(o.write(1,1),p.push(h),r=h):o.write(1,0),o.writePartDuration(i.time-t),t=i.time,a?o.write(11,i.size):o.write(l,i.size)}const h=String.fromCharCode.apply(null,o.encodeBase64([])),u=d.indexOf(h);-1==u?(e.write(2,1),e.concat(o)):(e.write(1,1),e.writeLongTail(0,0,u),d.splice(u,1)),d.unshift(h),d.length>10&&d.pop();const m=n.pitches.concat(p);for(let t=0;t<m.length;t++){const i=m[t],s=f.indexOf(i);if(-1==s){let t=0,n=c;if(n<i)for(;n!=i;)n++,-1==f.indexOf(n)&&t++;else for(;n!=i;)n--,-1==f.indexOf(n)&&t--;e.write(1,0),e.writePitchInterval(t)}else e.write(1,1),e.write(4,s),f.splice(s,1);f.unshift(i),f.length>16&&f.pop(),c=t==n.pitches.length-1?n.pitches[0]:i}0==n.start&&e.write(1,n.continuesLastPattern?1:0),i=n.end}i<this.beatsPerBar*h.partsPerBeat+ +a&&(e.write(2,0),a&&e.write(1,0),e.writePartDuration(this.beatsPerBar*h.partsPerBeat+ +a-i))}else e.write(1,0)}}let p=e.lengthBase64(),u=[];for(;p>0;)u.unshift(re[63&p]),p>>=6;t.push(re[u.length]),Array.prototype.push.apply(t,u),e.encodeBase64(t);const c=64e3;let f="";if(null!=O.customSamples&&O.customSamples.length>0&&(f="|"+O.customSamples.join("|")),t.length<c)return String.fromCharCode.apply(null,t)+f;{let e="";for(let i=0;i<t.length;i+=c)e+=String.fromCharCode.apply(null,t.slice(i,i+c));return e+f}}static I(e){return 0==e?e=1:1==e&&(e=0),h.envelopes[X(0,h.envelopes.length,e)]}fromBase64String(e,t="auto"){if(null==e||""==e)return Ie.P(),void this.initToDefault(!0);let i=0;for(;e.charCodeAt(i)<=32;)i++;if(35==e.charCodeAt(i)&&i++,123==e.charCodeAt(i))return void this.fromJsonObject(JSON.parse(0==i?e:e.substring(i)),t);const a=e.charCodeAt(i);let o=!1,l=!1,u=!1,c=!1,f=!1,d=!1;116==a?(d=!0,f=!0,i++):106==a?(l=!0,i++):103==a?(u=!0,i++):117==a?(c=!0,i++):100==a?(l=!0,i++):97==a?(c=!0,i++):115==a?(f=!0,i++):o=!0;const m=oe[e.charCodeAt(i++)];if(o&&(-1==m||m>Ie.T||m<Ie.H))return;if(l&&(-1==m||m>Ie.O||m<Ie.R))return;if(u&&(-1==m||m>Ie.L||m<Ie.N))return;if(c&&(-1==m||m>Ie.W||m<Ie.V))return;if((f||d)&&(-1==m||m>Ie.q||m<Ie.$))return;const v=m<2,y=m<3,b=m<4,g=m<5,S=m<6,R=m<7,L=m<8,G=m<9;this.initToDefault(o&&G||l&&g||b&&u);const C=o&&G||l&&g;let A=!1;if(f||c||u){var N=(e=e.replaceAll("%7C","|")).split("|");if(e=N.shift(),null==O.customSamples||O.customSamples.join(", ")!=N.join(", ")){Ie.U();let e=!1,t=!1,i=!1;const a=[],o=[];n.statusTable={},n.urlTable={},n.totalSamples=0,n.samplesLoaded=0,r.dispatchEvent(new s(n.totalSamples,n.samplesLoaded));for(const s of N)if("legacysamples"===s.toLowerCase())e||(e=!0,a.push(s),p(0));else if("nintariboxsamples"===s.toLowerCase())t||(t=!0,a.push(s),p(1));else if("mariopaintboxsamples"===s.toLowerCase())i||(i=!0,a.push(s),p(2));else{const e=y;if(!Ie.j(s,a,o,n,e))continue}if(a.length>0&&(O.customSamples=a),o.length>0){const e=w(o);O.presetCategories[O.presetCategories.length]={name:"Custom Sample Presets",presets:e,index:O.presetCategories.length}}}}if(y&&o){for(const e of this.channels)e.instruments[0].transition=h.transitions.dictionary.interrupt.index,e.instruments[0].effects|=1024;this.channels[3].instruments[0].chipNoise=0}let B=null;if(o&&G||l&&g||b&&u){B=[];for(let e=B.length;e<this.getChannelCount();e++){B[e]=[];for(let t=0;t<h.instrumentCountMin;t++)B[e][t]={}}}let W,V=0,$=0,U=-1,j=!1,Q=!1;for(;i<e.length;)switch(W=e.charCodeAt(i++)){case 78:var _=(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)];this.title=decodeURIComponent(e.substring(i,i+_)),document.title=this.title+" - "+O.versionDisplayName,i+=_;break;case 110:this.pitchChannelCount=oe[e.charCodeAt(i++)],this.noiseChannelCount=oe[e.charCodeAt(i++)],this.modChannelCount=o||l&&v?0:oe[e.charCodeAt(i++)],this.pitchChannelCount=Z(h.pitchChannelCountMin,h.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=Z(h.noiseChannelCountMin,h.noiseChannelCountMax,this.noiseChannelCount),this.modChannelCount=Z(h.modChannelCountMin,h.modChannelCountMax,this.modChannelCount);for(let e=this.channels.length;e<this.getChannelCount();e++)this.channels[e]=new qe;if(this.channels.length=this.getChannelCount(),o&&G||l&&g||b&&u)for(let e=B.length;e<this.getChannelCount();e++){B[e]=[];for(let t=0;t<h.instrumentCountMin;t++)B[e][t]={}}break;case 115:if(this.scale=X(0,h.scales.length,oe[e.charCodeAt(i++)]),this.scale==h.scales.dictionary.Custom.index)for(var K=1;K<h.pitchesPerOctave;K++)this.scaleCustom[K]=1==oe[e.charCodeAt(i++)];o&&(this.scale=0);break;case 107:if(R&&o)this.key=X(0,h.keys.length,11-oe[e.charCodeAt(i++)]),this.octave=0;else if(o||l)this.key=X(0,h.keys.length,oe[e.charCodeAt(i++)]),this.octave=0;else if(u||y&&c){const t=oe[e.charCodeAt(i++)],[n,s]=ae(t);this.key=n,this.octave=s}else this.key=X(0,h.keys.length,oe[e.charCodeAt(i++)]),this.octave=X(h.octaveMin,h.octaveMax+1,oe[e.charCodeAt(i++)]+h.octaveMin);break;case 108:this.loopStart=g&&o?oe[e.charCodeAt(i++)]:(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)];break;case 101:this.loopLength=g&&o?oe[e.charCodeAt(i++)]:(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)]+1;break;case 116:this.tempo=b&&o?[95,120,151,190][oe[e.charCodeAt(i++)]]:R&&o?[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][oe[e.charCodeAt(i++)]]:oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)],this.tempo=X(h.tempoMin,h.tempoMax+1,this.tempo);break;case 109:G&&o?(V=12*oe[e.charCodeAt(i++)],V=X(0,h.reverbRange,V)):(l&&g||b&&u)&&(V=oe[e.charCodeAt(i++)],V=X(0,h.reverbRange,V));break;case 97:this.beatsPerBar=y&&o?[6,7,8,9,10][oe[e.charCodeAt(i++)]]:oe[e.charCodeAt(i++)]+1,this.beatsPerBar=Math.max(h.beatsPerBarMin,Math.min(h.beatsPerBarMax,this.beatsPerBar));break;case 103:{const t=(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)]+1;this.barCount=Z(h.barCountMin,h.barCountMax,t);for(let e=0;e<this.getChannelCount();e++){for(let t=this.channels[e].bars.length;t<this.barCount;t++)this.channels[e].bars[t]=t<4?1:0;this.channels[e].bars.length=this.barCount}}break;case 106:{let t;t=L&&o?oe[e.charCodeAt(i++)]+1:(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)]+1,this.patternsPerChannel=Z(1,h.barCountMax,t);const n=this.getChannelCount();for(let e=0;e<n;e++){const t=this.channels[e].patterns;for(let e=t.length;e<this.patternsPerChannel;e++)t[e]=new ce;t.length=this.patternsPerChannel}}break;case 105:if(G&&o||l&&g||b&&u){const t=Z(h.instrumentCountMin,h.patternInstrumentCountMax,oe[e.charCodeAt(i++)]+h.instrumentCountMin);this.layeredInstruments=!1,this.patternInstruments=t>1;for(let e=0;e<this.getChannelCount();e++){const i=e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount,n=e>=this.pitchChannelCount+this.noiseChannelCount;for(let s=this.channels[e].instruments.length;s<t;s++)this.channels[e].instruments[s]=new xe(i,n);if(this.channels[e].instruments.length=t,S&&o)for(let s=0;s<t;s++)this.channels[e].instruments[s].setTypeAndReset(i?2:0,i,n);for(let i=B[e].length;i<t;i++)B[e][i]={}}}else{const t=oe[e.charCodeAt(i++)];this.layeredInstruments=0!=(2&t),this.patternInstruments=0!=(1&t);for(let t=0;t<this.getChannelCount();t++){let n=1;(this.layeredInstruments||this.patternInstruments)&&(n=Z(h.instrumentCountMin,this.getMaxInstrumentsPerChannel(),oe[e.charCodeAt(i++)]+h.instrumentCountMin));const s=this.channels[t],a=this.getChannelIsNoise(t),r=this.getChannelIsMod(t);for(let e=s.instruments.length;e<n;e++)s.instruments[e]=new xe(a,r);s.instruments.length=n}}break;case 114:if(c||f)if(f&&b||c&&S){const t=[1,1,0,1,2,3,4,5];this.rhythm=t[oe[e.charCodeAt(i++)]]}else this.rhythm=oe[e.charCodeAt(i++)];else{let t=oe[e.charCodeAt(i++)];this.rhythm=X(0,h.rhythms.length,t),(l&&y||o)&&(this.rhythm!=h.rhythms.dictionary["÷3 (triplets)"].index&&this.rhythm!=h.rhythms.dictionary["÷6"].index||(j=!0),this.rhythm>=h.rhythms.dictionary["÷6"].index&&(Q=!0))}break;case 111:if(y&&o){const t=oe[e.charCodeAt(i++)];this.channels[t].octave=X(0,h.pitchOctaves,oe[e.charCodeAt(i++)]+1),t>=this.pitchChannelCount&&(this.channels[t].octave=0)}else if(G&&o||l&&g||b&&u)for(let t=0;t<this.getChannelCount();t++)this.channels[t].octave=X(0,h.pitchOctaves,oe[e.charCodeAt(i++)]+1),t>=this.pitchChannelCount&&(this.channels[t].octave=0);else{for(let t=0;t<this.pitchChannelCount;t++)this.channels[t].octave=X(0,h.pitchOctaves,oe[e.charCodeAt(i++)]);for(let e=this.pitchChannelCount;e<this.getChannelCount();e++)this.channels[e].octave=0}break;case 84:{U++,U>=this.channels[$].instruments.length&&($++,U=0),Z(0,this.channels.length-1,$);const t=this.channels[$].instruments[U];let n=Z(0,12,oe[e.charCodeAt(i++)]);l&&g||b&&u?7!=n&&8!=n||(n+=2):(l&&S||u&&!b||c&&g)&&(8!=n&&9!=n&&10!=n||(n+=1)),t.setTypeAndReset(n,$>=this.pitchChannelCount&&$<this.pitchChannelCount+this.noiseChannelCount,$>=this.pitchChannelCount+this.noiseChannelCount),!(R&&o||v&&l)||0!=n&&9!=n&&6!=n||(t.aliases=!0,t.distortion=0,t.effects|=8),j&&(t.arpeggioSpeed=9),Q&&(t.fastTwoNoteArp=!0),R&&o&&t.chord!=h.chords.dictionary.simultaneous.index&&(t.effects|=2048)}break;case 117:{const t=oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)];this.channels[$].instruments[U].preset=t,l&&g||b&&u?7==this.channels[$].instruments[U].preset&&(this.channels[$].instruments[U].preset=9,this.channels[$].instruments[U].type=9):l&&S||c&&g?(8==this.channels[$].instruments[U].preset&&(this.channels[$].instruments[U].preset=9,this.channels[$].instruments[U].type=9),10==this.channels[$].instruments[U].preset&&(this.channels[$].instruments[U].preset=11,this.channels[$].instruments[U].type=11)):(!f||f&&v)&&10==this.channels[$].instruments[U].preset&&(this.channels[$].instruments[U].preset=12,this.channels[$].instruments[U].type=12),o&&t==O.nameToPresetValue("grand piano 1")&&(this.channels[$].instruments[U].preset=O.nameToPresetValue("grand piano 3"))}break;case 119:if(y&&o){const t=[1,2,3,4,5,6,7,8,0],n=oe[e.charCodeAt(i++)],s=this.channels[n].instruments[0];s.chipWave=X(0,h.chipWaves.length,0|t[oe[e.charCodeAt(i++)]]),s.convertLegacySettings(B[n][0],C)}else if(S&&o){const t=[1,2,3,4,5,6,7,8,0];for(let n=0;n<this.getChannelCount();n++)for(const s of this.channels[n].instruments)n>=this.pitchChannelCount?s.chipNoise=X(0,h.chipNoises.length,oe[e.charCodeAt(i++)]):s.chipWave=X(0,h.chipWaves.length,0|t[oe[e.charCodeAt(i++)]])}else if(R&&o){const t=[1,2,3,4,5,6,7,8,0];$>=this.pitchChannelCount?this.channels[$].instruments[U].chipNoise=X(0,h.chipNoises.length,oe[e.charCodeAt(i++)]):this.channels[$].instruments[U].chipWave=X(0,h.chipWaves.length,0|t[oe[e.charCodeAt(i++)]])}else if(2==this.channels[$].instruments[U].type)this.channels[$].instruments[U].chipNoise=X(0,h.chipNoises.length,oe[e.charCodeAt(i++)]);else if(f||c){const t=oe[e.charCodeAt(i++)],n=oe[e.charCodeAt(i++)];this.channels[$].instruments[U].chipWave=X(0,h.chipWaves.length,3==n?t+186:2==n?t+124:1==n?t+62:t)}else this.channels[$].instruments[U].chipWave=X(0,h.chipWaves.length,oe[e.charCodeAt(i++)]);break;case 102:if(G&&o||g&&l||b&&u)if(R&&o){const t=[10,6,3,0,8,5,2],n=["none","none","none","none","decay 1","decay 2","decay 3"];if(y&&o){const s=oe[e.charCodeAt(i++)],a=this.channels[s].instruments[0],r=B[s][0],o=[1,3,4,5][X(0,t.length,oe[e.charCodeAt(i++)])];r.filterCutoff=t[o],r.filterResonance=0,r.filterEnvelope=h.envelopes.dictionary[n[o]],a.convertLegacySettings(r,C)}else if(S&&o)for(let s=0;s<this.getChannelCount();s++)for(let a=0;a<this.channels[s].instruments.length;a++){const r=this.channels[s].instruments[a],o=B[s][a],l=X(0,t.length,oe[e.charCodeAt(i++)]+1);s<this.pitchChannelCount?(o.filterCutoff=t[l],o.filterResonance=0,o.filterEnvelope=h.envelopes.dictionary[n[l]]):(o.filterCutoff=10,o.filterResonance=0,o.filterEnvelope=h.envelopes.dictionary.none),r.convertLegacySettings(o,C)}else{const s=X(0,t.length,oe[e.charCodeAt(i++)]),a=this.channels[$].instruments[U],r=B[$][U];r.filterCutoff=t[s],r.filterResonance=0,r.filterEnvelope=h.envelopes.dictionary[n[s]],a.convertLegacySettings(r,C)}}else{const t=11,n=this.channels[$].instruments[U],s=B[$][U];s.filterCutoff=X(0,t,oe[e.charCodeAt(i++)]),n.convertLegacySettings(s,C)}else{const t=this.channels[$].instruments[U];let n=oe[e.charCodeAt(i++)];if(d)if(0==n){t.noteFilterType=!1,n=oe[e.charCodeAt(i++)];const s=n;t.noteFilter.controlPointCount=X(0,h.filterMaxPoints+1,s);for(let e=t.noteFilter.controlPoints.length;e<t.noteFilter.controlPointCount;e++)t.noteFilter.controlPoints[e]=new Me;for(let n=0;n<t.noteFilter.controlPointCount;n++){const s=t.noteFilter.controlPoints[n];s.type=X(0,3,oe[e.charCodeAt(i++)]),s.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),s.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=t.noteFilter.controlPointCount;e<s;e++)i+=3;t.noteSubFilters[0]=t.noteFilter;let a=oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)];for(let n=0;n<h.filterMorphCount-1;n++)if(a&1<<n){const s=oe[e.charCodeAt(i++)];null==t.noteSubFilters[n+1]&&(t.noteSubFilters[n+1]=new ke),t.noteSubFilters[n+1].controlPointCount=X(0,h.filterMaxPoints+1,s);for(let e=t.noteSubFilters[n+1].controlPoints.length;e<t.noteSubFilters[n+1].controlPointCount;e++)t.noteSubFilters[n+1].controlPoints[e]=new Me;for(let s=0;s<t.noteSubFilters[n+1].controlPointCount;s++){const a=t.noteSubFilters[n+1].controlPoints[s];a.type=X(0,3,oe[e.charCodeAt(i++)]),a.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),a.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=t.noteSubFilters[n+1].controlPointCount;e<s;e++)i+=3}}else t.noteFilterType=!0,t.noteFilterSimpleCut=X(0,h.filterSimpleCutRange,oe[e.charCodeAt(i++)]),t.noteFilterSimplePeak=X(0,h.filterSimplePeakRange,oe[e.charCodeAt(i++)]);else if(o||0==n){t.eqFilterType=!1,(l||u||c||f)&&(n=oe[e.charCodeAt(i++)]);const s=n;t.eqFilter.controlPointCount=X(0,h.filterMaxPoints+1,s);for(let e=t.eqFilter.controlPoints.length;e<t.eqFilter.controlPointCount;e++)t.eqFilter.controlPoints[e]=new Me;for(let n=0;n<t.eqFilter.controlPointCount;n++){const s=t.eqFilter.controlPoints[n];s.type=X(0,3,oe[e.charCodeAt(i++)]),s.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),s.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=t.eqFilter.controlPointCount;e<s;e++)i+=3;if(t.eqSubFilters[0]=t.eqFilter,l&&!g||u&&!b||c||f){let n=oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)];for(let s=0;s<h.filterMorphCount-1;s++)if(n&1<<s){const n=oe[e.charCodeAt(i++)];null==t.eqSubFilters[s+1]&&(t.eqSubFilters[s+1]=new ke),t.eqSubFilters[s+1].controlPointCount=X(0,h.filterMaxPoints+1,n);for(let e=t.eqSubFilters[s+1].controlPoints.length;e<t.eqSubFilters[s+1].controlPointCount;e++)t.eqSubFilters[s+1].controlPoints[e]=new Me;for(let n=0;n<t.eqSubFilters[s+1].controlPointCount;n++){const a=t.eqSubFilters[s+1].controlPoints[n];a.type=X(0,3,oe[e.charCodeAt(i++)]),a.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),a.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=t.eqSubFilters[s+1].controlPointCount;e<n;e++)i+=3}}}else t.eqFilterType=!0,t.eqFilterSimpleCut=X(0,h.filterSimpleCutRange,oe[e.charCodeAt(i++)]),t.eqFilterSimplePeak=X(0,h.filterSimplePeakRange,oe[e.charCodeAt(i++)])}break;case 121:if(f||c)if(y&&c){const t=ne(e,i);i+=6;const n=e.slice(i,i+t);i+=t;const s=JSON.parse(atob(n));for(const e of s){const t=e.channel,i=e.instrument,n=e.info,s=this.channels[t].instruments[i];s.isUsingAdvancedLoopControls=n.isUsingAdvancedLoopControls,s.chipWaveLoopStart=n.chipWaveLoopStart,s.chipWaveLoopEnd=n.chipWaveLoopEnd,s.chipWaveLoopMode=n.chipWaveLoopMode,s.chipWavePlayBackwards=n.chipWavePlayBackwards,s.chipWaveStartOffset=n.chipWaveStartOffset}}else{const t=oe[e.charCodeAt(i++)],n=Boolean(1&t),s=t>>1,a=oe[e.charCodeAt(i++)],r=Boolean(2&a),o=Boolean(1&a),l=ne(e,i);i+=6;const p=ne(e,i);i+=6;const h=ne(e,i);i+=6;const u=this.channels[$].instruments[U];u.isUsingAdvancedLoopControls=n,u.chipWaveLoopStart=l,u.chipWaveLoopEnd=p,u.chipWaveLoopMode=s,u.chipWavePlayBackwards=o,u.chipWaveStartOffset=h,u.chipWaveInStereo=r}else if(u&&!b&&S)"legacysamples"!=document.URL.substring(document.URL.length-13).toLowerCase()&&(A||(A=!0,h.willReloadForCustomSamples=!0,O.customSamples=["legacySamples"],p(0))),this.channels[$].instruments[U].chipWave=X(0,h.chipWaves.length,oe[e.charCodeAt(i++)]+125);else if(G&&o||l&&g||b&&u){const t=8,n=this.channels[$].instruments[U],s=B[$][U];s.filterResonance=X(0,t,oe[e.charCodeAt(i++)]),n.convertLegacySettings(s,C)}break;case 122:{const t=this.channels[$].instruments[U],n=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11];if(G&&o||g&&l||b&&u)if(4==t.type)for(let s=0;s<h.drumCount;s++){let a=oe[e.charCodeAt(i++)];(v&&u||!u&&!c&&!f)&&(a=n[a]),t.drumsetEnvelopes[s]=Ie.I(a).index}else{const s=B[$][U];let a=oe[e.charCodeAt(i++)];(v&&u||!u&&!c&&!f)&&(a=n[a]),s.filterEnvelope=Ie.I(a),t.convertLegacySettings(s,C)}else for(let s=0;s<h.drumCount;s++){let a=oe[e.charCodeAt(i++)];(v&&u||!u&&!c&&!f)&&(a=n[a]),!f&&a>=2&&a++,t.drumsetEnvelopes[s]=X(0,h.envelopes.length,a)}}break;case 87:{const t=this.channels[$].instruments[U];if(t.pulseWidth=X(0,h.pulseWidthRange+ +l+1,oe[e.charCodeAt(i++)]),o&&(t.pulseWidth=Math.round(Math.pow(.5,(7-t.pulseWidth)*h.pulseWidthStepPower)*h.pulseWidthRange)),G&&o||g&&l||b&&u){const n=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],s=B[$][U];let a=oe[e.charCodeAt(i++)];(v&&u||!u&&!c&&!f)&&(a=n[a]),s.pulseEnvelope=Ie.I(a),t.convertLegacySettings(s,C)}(c&&!b||f)&&(t.decimalOffset=X(0,100,(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)]))}break;case 73:{const t=this.channels[$].instruments[U],n=oe[e.charCodeAt(i++)];t.stringSustain=X(0,h.stringSustainRange,31&n),t.stringSustainType=h.enableAcousticSustain?X(0,2,n>>5):0}break;case 100:if(G&&o||l&&g||b&&u){const t=[{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3}];if(y&&o){const n=oe[e.charCodeAt(i++)],s=t[X(0,t.length,oe[e.charCodeAt(i++)])],a=this.channels[n].instruments[0];a.fadeIn=He.secondsToFadeInSetting(s.fadeInSeconds),a.fadeOut=He.ticksToFadeOutSetting(s.fadeOutTicks),a.transition=h.transitions.dictionary[s.transition].index,a.transition!=h.transitions.dictionary.normal.index&&(a.effects|=1024)}else if(S&&o)for(let n=0;n<this.getChannelCount();n++)for(const s of this.channels[n].instruments){const n=t[X(0,t.length,oe[e.charCodeAt(i++)])];s.fadeIn=He.secondsToFadeInSetting(n.fadeInSeconds),s.fadeOut=He.ticksToFadeOutSetting(n.fadeOutTicks),s.transition=h.transitions.dictionary[n.transition].index,s.transition!=h.transitions.dictionary.normal.index&&(s.effects|=1024)}else if(b&&!u&&!c&&!f||o){const n=t[X(0,t.length,oe[e.charCodeAt(i++)])],s=this.channels[$].instruments[U];s.fadeIn=He.secondsToFadeInSetting(n.fadeInSeconds),s.fadeOut=He.ticksToFadeOutSetting(n.fadeOutTicks),s.transition=h.transitions.dictionary[n.transition].index,s.transition!=h.transitions.dictionary.normal.index&&(s.effects|=1024)}else{const n=t[X(0,t.length,oe[e.charCodeAt(i++)])],s=this.channels[$].instruments[U];s.fadeIn=He.secondsToFadeInSetting(n.fadeInSeconds),s.fadeOut=He.ticksToFadeOutSetting(n.fadeOutTicks),s.transition=h.transitions.dictionary[n.transition].index,oe[e.charCodeAt(i++)]>0&&(s.legacyTieOver=!0),s.clicklessTransition=!!oe[e.charCodeAt(i++)],(s.transition!=h.transitions.dictionary.normal.index||s.clicklessTransition)&&(s.effects|=1024)}}else{const t=this.channels[$].instruments[U];t.fadeIn=X(0,h.fadeInRange,oe[e.charCodeAt(i++)]),t.fadeOut=X(0,h.fadeOutTicks.length,oe[e.charCodeAt(i++)]),(l||u||c||f)&&(t.clicklessTransition=!!oe[e.charCodeAt(i++)])}break;case 99:if(G&&o||l&&g||b&&u)if(R&&o)if(y&&o){const t=[0,3,2,0],n=["none","none","none","tremolo2"],s=oe[e.charCodeAt(i++)],a=X(0,t.length,oe[e.charCodeAt(i++)]),r=this.channels[s].instruments[0],o=B[s][0];r.vibrato=t[a],null!=o.filterEnvelope&&0!=o.filterEnvelope.type||(o.filterEnvelope=h.envelopes.dictionary[n[a]],r.convertLegacySettings(o,C)),r.vibrato!=h.vibratos.dictionary.none.index&&(r.effects|=512)}else if(S&&o){const t=[0,1,2,3,0,0],n=["none","none","none","none","tremolo5","tremolo2"];for(let s=0;s<this.getChannelCount();s++)for(let a=0;a<this.channels[s].instruments.length;a++){const r=X(0,t.length,oe[e.charCodeAt(i++)]),o=this.channels[s].instruments[a],p=B[s][a];o.vibrato=t[r],null!=p.filterEnvelope&&0!=p.filterEnvelope.type||(p.filterEnvelope=h.envelopes.dictionary[n[r]],o.convertLegacySettings(p,C)),o.vibrato!=h.vibratos.dictionary.none.index&&(o.effects|=512),(0!=V||l&&g||b&&u)&&!this.getChannelIsNoise(s)&&(o.effects|=1,o.reverb=V)}}else{const t=[0,1,2,3,0,0],n=["none","none","none","none","tremolo5","tremolo2"],s=X(0,t.length,oe[e.charCodeAt(i++)]),a=this.channels[$].instruments[U],r=B[$][U];a.vibrato=t[s],null!=r.filterEnvelope&&0!=r.filterEnvelope.type||(r.filterEnvelope=h.envelopes.dictionary[n[s]],a.convertLegacySettings(r,C)),a.vibrato!=h.vibratos.dictionary.none.index&&(a.effects|=512),(0!=V||l&&g||b&&u)&&(a.effects|=1,a.reverb=V)}else{const t=this.channels[$].instruments[U],n=X(0,h.vibratos.length+1,oe[e.charCodeAt(i++)]);t.vibrato=n,t.vibrato!=h.vibratos.dictionary.none.index&&(t.effects|=512),n==h.vibratos.length?(t.vibratoDepth=X(0,h.modulators.dictionary["vibrato depth"].maxRawVol+1,oe[e.charCodeAt(i++)])/50,t.vibratoSpeed=X(0,h.modulators.dictionary["vibrato speed"].maxRawVol+1,oe[e.charCodeAt(i++)]),t.vibratoDelay=X(0,h.modulators.dictionary["vibrato delay"].maxRawVol+1,oe[e.charCodeAt(i++)])/2,t.vibratoType=X(0,h.vibratoTypes.length,oe[e.charCodeAt(i++)]),t.effects|=512):(t.vibratoDepth=h.vibratos[t.vibrato].amplitude,t.vibratoSpeed=10,t.vibratoDelay=h.vibratos[t.vibrato].delayTicks/2,t.vibratoType=h.vibratos[t.vibrato].type)}else if(f&&!b){const t=oe[e.charCodeAt(i++)];this.eqFilter.controlPointCount=X(0,h.filterMaxPoints+1,t);for(let e=this.eqFilter.controlPoints.length;e<this.eqFilter.controlPointCount;e++)this.eqFilter.controlPoints[e]=new Me;for(let t=0;t<this.eqFilter.controlPointCount;t++){const n=this.eqFilter.controlPoints[t];n.type=X(0,3,oe[e.charCodeAt(i++)]),n.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),n.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=this.eqFilter.controlPointCount;e<t;e++)i+=3;this.eqSubFilters[0]=this.eqFilter;let n=oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)];for(let t=0;t<h.filterMorphCount-1;t++)if(n&1<<t){const n=oe[e.charCodeAt(i++)];null==this.eqSubFilters[t+1]&&(this.eqSubFilters[t+1]=new ke),this.eqSubFilters[t+1].controlPointCount=X(0,h.filterMaxPoints+1,n);for(let e=this.eqSubFilters[t+1].controlPoints.length;e<this.eqSubFilters[t+1].controlPointCount;e++)this.eqSubFilters[t+1].controlPoints[e]=new Me;for(let n=0;n<this.eqSubFilters[t+1].controlPointCount;n++){const s=this.eqSubFilters[t+1].controlPoints[n];s.type=X(0,3,oe[e.charCodeAt(i++)]),s.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),s.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=this.eqSubFilters[t+1].controlPointCount;e<n;e++)i+=3}}break;case 71:if(l&&g||b&&u){const t=this.channels[$].instruments[U];t.arpeggioSpeed=X(0,h.modulators.dictionary["arp speed"].maxRawVol+1,oe[e.charCodeAt(i++)]),t.fastTwoNoteArp=!!oe[e.charCodeAt(i++)]}break;case 104:if(y&&o){const t=oe[e.charCodeAt(i++)];this.channels[t].instruments[0].unison=X(0,h.unisons.length,oe[e.charCodeAt(i++)]);const n=this.channels[t].instruments[0];n.unisonVoices=h.unisons[n.unison].voices,n.unisonSpread=h.unisons[n.unison].spread,n.unisonOffset=h.unisons[n.unison].offset,n.unisonExpression=h.unisons[n.unison].expression,n.unisonSign=h.unisons[n.unison].sign}else if(S&&o)for(let t=0;t<this.getChannelCount();t++)for(const n of this.channels[t].instruments){const t=oe[e.charCodeAt(i++)];let s=X(0,h.unisons.length,t);8==t&&(s=2,n.chord=3),n.unison=s,n.unisonVoices=h.unisons[n.unison].voices,n.unisonSpread=h.unisons[n.unison].spread,n.unisonOffset=h.unisons[n.unison].offset,n.unisonExpression=h.unisons[n.unison].expression,n.unisonSign=h.unisons[n.unison].sign}else if(R&&o){const t=oe[e.charCodeAt(i++)];let n=X(0,h.unisons.length,t);8==t&&(n=2,this.channels[$].instruments[U].chord=3),this.channels[$].instruments[U].unison=n;const s=this.channels[$].instruments[U];s.unisonVoices=h.unisons[s.unison].voices,s.unisonSpread=h.unisons[s.unison].spread,s.unisonOffset=h.unisons[s.unison].offset,s.unisonExpression=h.unisons[s.unison].expression,s.unisonSign=h.unisons[s.unison].sign}else{this.channels[$].instruments[U].unison=X(0,h.unisons.length+1,oe[e.charCodeAt(i++)]);const t=this.channels[$].instruments[U];if((c&&!g||f)&&t.unison==h.unisons.length){t.unisonVoices=oe[e.charCodeAt(i++)];const n=oe[e.charCodeAt(i++)],s=oe[e.charCodeAt(i++)]+63*(oe[e.charCodeAt(i++)]+63*oe[e.charCodeAt(i++)]),a=oe[e.charCodeAt(i++)],r=oe[e.charCodeAt(i++)]+63*(oe[e.charCodeAt(i++)]+63*oe[e.charCodeAt(i++)]),o=oe[e.charCodeAt(i++)],l=oe[e.charCodeAt(i++)]+63*oe[e.charCodeAt(i++)],p=oe[e.charCodeAt(i++)],h=oe[e.charCodeAt(i++)]+63*oe[e.charCodeAt(i++)];t.unisonSpread=s/1e3,0==n&&(t.unisonSpread*=-1),t.unisonOffset=r/1e3,0==a&&(t.unisonOffset*=-1),t.unisonExpression=l/1e3,0==o&&(t.unisonExpression*=-1),t.unisonSign=h/1e3,0==p&&(t.unisonSign*=-1)}else t.unisonVoices=h.unisons[t.unison].voices,t.unisonSpread=h.unisons[t.unison].spread,t.unisonOffset=h.unisons[t.unison].offset,t.unisonExpression=h.unisons[t.unison].expression,t.unisonSign=h.unisons[t.unison].sign}break;case 67:if(G&&o||l&&g||b&&u){const t=this.channels[$].instruments[U];t.chord=X(0,h.chords.length,oe[e.charCodeAt(i++)]),t.chord!=h.chords.dictionary.simultaneous.index&&(t.effects|=2048)}break;case 113:{const t=this.channels[$].instruments[U];if(G&&o||l&&g||b&&u){t.effects=4095&oe[e.charCodeAt(i++)],0!=V||l&&g||b&&u?H(t.effects)&&(t.reverb=V):t.effects&=-2,t.effects|=4,t.vibrato!=h.vibratos.dictionary.none.index&&(t.effects|=512),t.detune!=h.detuneCenter&&(t.effects|=256),t.aliases?t.effects|=8:t.effects&=-9,t.effects|=32;const n=B[$][U];t.convertLegacySettings(n,C)}else{if(t.effects=oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)],d)for(let n=0;n<12;n++)t.effectOrder[n]=oe[e.charCodeAt(i++)];else t.effectOrder=[2,10,11,7,8,9,5,3,4,1,6,0];if(I(t.effects)){let n=oe[e.charCodeAt(i++)];if(d)if(0==n){t.eqFilterType=!1,n=oe[e.charCodeAt(i++)],t.eqFilter.controlPointCount=X(0,h.filterMaxPoints+1,n);for(let e=t.eqFilter.controlPoints.length;e<t.eqFilter.controlPointCount;e++)t.eqFilter.controlPoints[e]=new Me;for(let n=0;n<t.eqFilter.controlPointCount;n++){const s=t.eqFilter.controlPoints[n];s.type=X(0,3,oe[e.charCodeAt(i++)]),s.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),s.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=t.eqFilter.controlPointCount;e<n;e++)i+=3;t.eqSubFilters[0]=t.eqFilter;let s=oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)];for(let n=0;n<h.filterMorphCount-1;n++)if(s&1<<n){const s=oe[e.charCodeAt(i++)];null==t.eqSubFilters[n+1]&&(t.eqSubFilters[n+1]=new ke),t.eqSubFilters[n+1].controlPointCount=X(0,h.filterMaxPoints+1,s);for(let e=t.eqSubFilters[n+1].controlPoints.length;e<t.eqSubFilters[n+1].controlPointCount;e++)t.eqSubFilters[n+1].controlPoints[e]=new Me;for(let s=0;s<t.eqSubFilters[n+1].controlPointCount;s++){const a=t.eqSubFilters[n+1].controlPoints[s];a.type=X(0,3,oe[e.charCodeAt(i++)]),a.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),a.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=t.eqSubFilters[n+1].controlPointCount;e<s;e++)i+=3}}else t.eqFilterType=!0,t.eqFilter.reset(),t.eqFilterSimpleCut=X(0,h.filterSimpleCutRange,oe[e.charCodeAt(i++)]),t.eqFilterSimplePeak=X(0,h.filterSimplePeakRange,oe[e.charCodeAt(i++)]);else if(t.effects|=32,o||0==n){t.noteFilterType=!1,(l||u||c||f)&&(n=oe[e.charCodeAt(i++)]),t.noteFilter.controlPointCount=X(0,h.filterMaxPoints+1,n);for(let e=t.noteFilter.controlPoints.length;e<t.noteFilter.controlPointCount;e++)t.noteFilter.controlPoints[e]=new Me;for(let n=0;n<t.noteFilter.controlPointCount;n++){const s=t.noteFilter.controlPoints[n];s.type=X(0,3,oe[e.charCodeAt(i++)]),s.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),s.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=t.noteFilter.controlPointCount;e<n;e++)i+=3;if(t.noteSubFilters[0]=t.noteFilter,l&&!g||u||c||f){let n=oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)];for(let s=0;s<h.filterMorphCount-1;s++)if(n&1<<s){const n=oe[e.charCodeAt(i++)];null==t.noteSubFilters[s+1]&&(t.noteSubFilters[s+1]=new ke),t.noteSubFilters[s+1].controlPointCount=X(0,h.filterMaxPoints+1,n);for(let e=t.noteSubFilters[s+1].controlPoints.length;e<t.noteSubFilters[s+1].controlPointCount;e++)t.noteSubFilters[s+1].controlPoints[e]=new Me;for(let n=0;n<t.noteSubFilters[s+1].controlPointCount;n++){const a=t.noteSubFilters[s+1].controlPoints[n];a.type=X(0,3,oe[e.charCodeAt(i++)]),a.freq=X(0,h.filterFreqRange,oe[e.charCodeAt(i++)]),a.gain=X(0,h.filterGainRange,oe[e.charCodeAt(i++)])}for(let e=t.noteSubFilters[s+1].controlPointCount;e<n;e++)i+=3}}}else t.noteFilterType=!0,t.noteFilter.reset(),t.noteFilterSimpleCut=X(0,h.filterSimpleCutRange,oe[e.charCodeAt(i++)]),t.noteFilterSimplePeak=X(0,h.filterSimplePeakRange,oe[e.charCodeAt(i++)])}M(t.effects)&&(t.transition=X(0,h.transitions.length,oe[e.charCodeAt(i++)])),k(t.effects)&&(t.chord=X(0,h.chords.length,oe[e.charCodeAt(i++)]),t.chord==h.chords.dictionary.arpeggio.index&&(l||u||c||f)&&(t.arpeggioSpeed=oe[e.charCodeAt(i++)],t.fastTwoNoteArp=!!oe[e.charCodeAt(i++)])),F(t.effects)&&(t.pitchShift=X(0,h.pitchShiftRange,oe[e.charCodeAt(i++)])),x(t.effects)&&(o?(t.detune=X(h.detuneMin,h.detuneMax+1,oe[e.charCodeAt(i++)]),t.detune=Math.round((t.detune-9)*(Math.abs(t.detune-9)+1)/2+h.detuneCenter)):t.detune=X(h.detuneMin,h.detuneMax+1,(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)])),q(t.effects)&&(t.vibrato=X(0,h.vibratos.length+1,oe[e.charCodeAt(i++)]),t.vibrato==h.vibratos.length&&(l||u||c||f)?(t.vibratoDepth=X(0,h.modulators.dictionary["vibrato depth"].maxRawVol+1,oe[e.charCodeAt(i++)])/25,t.vibratoSpeed=X(0,h.modulators.dictionary["vibrato speed"].maxRawVol+1,oe[e.charCodeAt(i++)]),t.vibratoDelay=X(0,h.modulators.dictionary["vibrato delay"].maxRawVol+1,oe[e.charCodeAt(i++)]),t.vibratoType=X(0,h.vibratoTypes.length,oe[e.charCodeAt(i++)])):(t.vibratoDepth=h.vibratos[t.vibrato].amplitude,t.vibratoSpeed=10,t.vibratoDelay=h.vibratos[t.vibrato].delayTicks/2,t.vibratoType=h.vibratos[t.vibrato].type)),P(t.effects)&&(t.distortion=X(0,h.distortionRange,oe[e.charCodeAt(i++)]),(l&&!g||u||c||f)&&(t.aliases=!!oe[e.charCodeAt(i++)])),E(t.effects)&&(t.bitcrusherFreq=X(0,h.bitcrusherFreqRange,oe[e.charCodeAt(i++)]),t.bitcrusherQuantization=X(0,h.bitcrusherQuantizationRange,oe[e.charCodeAt(i++)])),T(t.effects)&&(t.pan=X(0,h.panMax+1,o?Math.round(oe[e.charCodeAt(i++)]*(h.panMax/8)):(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)]),(l&&!v||u||c||f)&&(t.panDelay=oe[e.charCodeAt(i++)])),z(t.effects)&&(t.chorus=o?2*X(0,h.chorusRange/2+1,oe[e.charCodeAt(i++)]):X(0,h.chorusRange,oe[e.charCodeAt(i++)])),D(t.effects)&&(t.echoSustain=X(0,h.echoSustainRange,oe[e.charCodeAt(i++)]),t.echoDelay=X(0,h.echoDelayRange,oe[e.charCodeAt(i++)])),H(t.effects)&&(t.reverb=X(0,h.reverbRange,o?Math.round(oe[e.charCodeAt(i++)]*h.reverbRange/3):oe[e.charCodeAt(i++)]))}t.effects&=4095}break;case 118:if(y&&o){const t=oe[e.charCodeAt(i++)];this.channels[t].instruments[0].volume=Math.round(X(-h.volumeRange/2,1,5*-oe[e.charCodeAt(i++)]))}else if(S&&o)for(let t=0;t<this.getChannelCount();t++)for(const n of this.channels[t].instruments)n.volume=Math.round(X(-h.volumeRange/2,1,5*-oe[e.charCodeAt(i++)]));else if(R&&o){this.channels[$].instruments[U].volume=Math.round(X(-h.volumeRange/2,1,5*-oe[e.charCodeAt(i++)]))}else if(o){this.channels[$].instruments[U].volume=Math.round(X(-h.volumeRange/2,1,25*-oe[e.charCodeAt(i++)]/7))}else{this.channels[$].instruments[U].volume=Math.round(X(-h.volumeRange/2,h.volumeRange/2+1,(oe[e.charCodeAt(i++)]<<6|oe[e.charCodeAt(i++)])-h.volumeRange/2))}break;case 76:if(G&&o){this.channels[$].instruments[U].pan=X(0,h.panMax+1,oe[e.charCodeAt(i++)]*(h.panMax/8))}else if(l&&g||b&&u){const t=this.channels[$].instruments[U];t.pan=X(0,h.panMax+1,(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)]),(l&&!y||u||c||f)&&(t.panDelay=oe[e.charCodeAt(i++)])}break;case 68:{const t=this.channels[$].instruments[U];(l&&g||b&&u)&&(t.detune=X(h.detuneMin,h.detuneMax+1,4*((oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)])),t.effects|=256)}break;case 77:{let t=this.channels[$].instruments[U];for(let n=0;n<64;n++)t.customChipWave[n]=X(-24,25,oe[e.charCodeAt(i++)]-24);let n=0;for(let e=0;e<t.customChipWave.length;e++)n+=t.customChipWave[e];const s=n/t.customChipWave.length;let a=0,r=0;for(let e=0;e<t.customChipWave.length;e++)a+=r,r=t.customChipWave[e]-s,t.customChipWaveIntegral[e]=a;t.customChipWaveIntegral[64]=0}break;case 79:{let t=oe[e.charCodeAt(i++)];63==t?this.restoreLimiterDefaults():(this.compressionRatio=t<10?t/10:1+(t-10)/60,t=oe[e.charCodeAt(i++)],this.limitRatio=t<10?t/10:t-9,this.limitDecay=oe[e.charCodeAt(i++)],this.limitRise=250*oe[e.charCodeAt(i++)]+2e3,this.compressionThreshold=oe[e.charCodeAt(i++)]/20,this.limitThreshold=oe[e.charCodeAt(i++)]/20,this.masterGain=((oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)])/50)}break;case 85:for(let t=0;t<this.getChannelCount();t++){var J;J=!b||u||c||f?(oe[e.charCodeAt(i++)]<<6)+oe[e.charCodeAt(i++)]:oe[e.charCodeAt(i++)],this.channels[t].name=decodeURIComponent(e.substring(i,i+J)),i+=J}break;case 65:{const t=this.channels[$].instruments[U];if(1==t.type)t.algorithm=X(0,h.algorithms.length,oe[e.charCodeAt(i++)]);else if(t.algorithm6Op=X(0,h.algorithms6Op.length,oe[e.charCodeAt(i++)]),t.customAlgorithm.fromPreset(t.algorithm6Op),67==e.charCodeAt(i)){let n=X(1,h.operatorCount+2+1,oe[e.charCodeAt(i+1)]);i++;let s=[];if(113==e.charCodeAt(i+1)){i++;let a=0;for(i++;113!=e.charCodeAt(i);){s[a]=[];let t=0;for(;82!=e.charCodeAt(i);)s[a][t]=X(1,h.operatorCount+3,oe[e.charCodeAt(i)]),t++,i++;a++,i++}t.customAlgorithm.set(n,s),i++}}if(G&&o||g&&l||b&&u){const e=B[$][U];t.convertLegacySettings(e,C)}}break;case 120:if(u&&!b&&S){const t=oe[e.charCodeAt(i++)];t+62>85&&"legacysamples"!=document.URL.substring(document.URL.length-13).toLowerCase()&&(A||(A=!0,h.willReloadForCustomSamples=!0,O.customSamples=["legacySamples"],p(0))),this.channels[$].instruments[U].chipWave=t+62>78?X(0,h.chipWaves.length,t+63):t+62>67?X(0,h.chipWaves.length,t+61):t+62==67?40:X(0,h.chipWaves.length,t+62)}else{const t=this.channels[$].instruments[U];t.supersawDynamism=X(0,h.supersawDynamismMax+1,oe[e.charCodeAt(i++)]),t.supersawSpread=X(0,h.supersawSpreadMax+1,oe[e.charCodeAt(i++)]),t.supersawShape=X(0,h.supersawShapeMax+1,oe[e.charCodeAt(i++)])}break;case 70:{const t=this.channels[$].instruments[U];if(1==t.type)t.feedbackType=X(0,h.feedbacks.length,oe[e.charCodeAt(i++)]);else{t.feedbackType6Op=X(0,h.feedbacks6Op.length,oe[e.charCodeAt(i++)]),t.customFeedbackType.fromPreset(t.feedbackType6Op);let n=[];if(113==e.charCodeAt(i)){let s=0;for(i++;113!=e.charCodeAt(i);){n[s]=[];let t=0;for(;82!=e.charCodeAt(i);)n[s][t]=X(1,h.operatorCount+2,oe[e.charCodeAt(i)]),t++,i++;s++,i++}t.customFeedbackType.set(n),i++}}}break;case 66:this.channels[$].instruments[U].feedbackAmplitude=X(0,h.operatorAmplitudeMax+1,oe[e.charCodeAt(i++)]);break;case 86:if(G&&o||g&&l||b&&u){const t=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],n=this.channels[$].instruments[U],s=B[$][U];let a=oe[e.charCodeAt(i++)];(v&&u||!u&&!c&&!f)&&(a=t[a]),s.feedbackEnvelope=Ie.I(oe[a]),n.convertLegacySettings(s,C)}break;case 81:{const t=this.channels[$].instruments[U];if(y&&u){const n=[4,5,6,7,8,10,12,13,14,15,16,18,20,22,24,2,1,9,17,19,21,23,0,3];for(let s=0;s<(11==t.type?6:h.operatorCount);s++)t.operators[s].frequency=n[X(0,n.length,oe[e.charCodeAt(i++)])]}else if(u||c||f)for(let n=0;n<(11==t.type?6:h.operatorCount);n++)t.operators[n].frequency=X(0,h.operatorFrequencies.length,oe[e.charCodeAt(i++)]);else{const n=[4,5,6,7,8,10,12,13,14,15,16,18,20,23,27,2,1,9,17,19,21,23,0,3];for(let s=0;s<(11==t.type?6:h.operatorCount);s++)t.operators[s].frequency=n[X(0,n.length,oe[e.charCodeAt(i++)])]}}break;case 80:{const t=this.channels[$].instruments[U];for(let n=0;n<(11==t.type?6:h.operatorCount);n++)t.operators[n].amplitude=X(0,h.operatorAmplitudeMax+1,oe[e.charCodeAt(i++)])}break;case 69:{const t=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],n=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,58,59,60],s=[0,1,2,3,4,5,6,7,8,8,9,10,11,12,13,14],a=this.channels[$].instruments[U];if(G&&o||g&&l||b&&u){const s=B[$][U];s.operatorEnvelopes=[];for(let r=0;r<(11==a.type?6:h.operatorCount);r++){let a=oe[e.charCodeAt(i++)];(v&&u||o)&&(a=t[a]),l&&(a=n[a]),s.operatorEnvelopes[r]=Ie.I(a)}a.convertLegacySettings(s,C)}else{const r=X(0,h.maxEnvelopeCount+1,oe[e.charCodeAt(i++)]);(l&&!S||c&&!g||f)&&(a.envelopeSpeed=X(0,h.modulators.dictionary["envelope speed"].maxRawVol+1,oe[e.charCodeAt(i++)]),a.discreteEnvelope=!!oe[e.charCodeAt(i++)]);for(let p=0;p<r;p++){const r=X(0,h.instrumentAutomationTargets.length,oe[e.charCodeAt(i++)]);let c=0;const d=h.instrumentAutomationTargets[r].maxCount;d>1&&(c=X(0,d,oe[e.charCodeAt(i++)]));let m=oe[e.charCodeAt(i++)];(v&&u||o)&&(m=t[m]),l&&(m=n[m]),!f&&m>=2&&m++;let g=!1,S=1;!f||y?(g=!0,S=h.envelopes[m].speed,m=h.envelopes[m].type):b&&m>=3&&m++;let w=!1;(f&&!y&&b||g)&&(9==m&&(w=!0),m=s[m]);const M=X(0,f&&!y||g?h.newEnvelopes.length:h.envelopes.length,m);let k=0,F=h.maxPitch,x=!1;S=f&&!y?h.newEnvelopes[M].speed:S;let q=0,I=1,P=2,E=2,T=0;if(f&&!b&&("lfo"==h.newEnvelopes[M].name?T=oe[e.charCodeAt(i++)]:"random"==h.newEnvelopes[M].name&&(P=X(1,h.randomEnvelopeStepsMax+1,oe[e.charCodeAt(i++)]),E=X(1,h.randomEnvelopeSeedMax+1,oe[e.charCodeAt(i++)]),T=oe[e.charCodeAt(i++)])),f&&!y){if("pitch"==h.newEnvelopes[M].name)if(a.isNoiseInstrument)k=oe[e.charCodeAt(i++)],F=oe[e.charCodeAt(i++)];else{let t=oe[e.charCodeAt(i++)];k=64*t+oe[e.charCodeAt(i++)],t=oe[e.charCodeAt(i++)],F=64*t+oe[e.charCodeAt(i++)]}x=1==oe[e.charCodeAt(i++)],"pitch"!=h.newEnvelopes[M].name&&"note size"!=h.newEnvelopes[M].name&&"punch"!=h.newEnvelopes[M].name&&"none"!=h.newEnvelopes[M].name&&(S=h.perEnvelopeSpeedIndices[oe[e.charCodeAt(i++)]]),q=oe[e.charCodeAt(i++)]/10,I=oe[e.charCodeAt(i++)]/10}if(f&&!b||w&&(T=0,x?(I=Math.floor(I/2*10)/10,q=Math.floor(q/2*10)/10):(I=Math.floor(10*(.5+(I-q)/2))/10,q=.5)),a.addEnvelope(r,c,M,!0,k,F,x,S,q,I,P,E,T),f&&y&&!v){let t=oe[e.charCodeAt(i++)];a.envelopes[p].pitchEnvelopeStart=64*t+oe[e.charCodeAt(i++)],t=oe[e.charCodeAt(i++)],a.envelopes[p].pitchEnvelopeEnd=64*t+oe[e.charCodeAt(i++)],a.envelopes[p].inverse=1==oe[e.charCodeAt(i++)]}}let p=0,d=h.maxPitch,m=!1;if(f&&v){let t=oe[e.charCodeAt(i++)];p=64*t+oe[e.charCodeAt(i++)],t=oe[e.charCodeAt(i++)],d=64*t+oe[e.charCodeAt(i++)],m=1===oe[e.charCodeAt(i++)];for(let e=0;e<r;e++)a.envelopes[e].pitchEnvelopeStart=p,a.envelopes[e].pitchEnvelopeEnd=d,a.envelopes[e].inverse="pitch"==h.envelopes[a.envelopes[e].envelope].name&&m}}}break;case 82:{const t=this.channels[$].instruments[U];if(y&&u)for(let n=0;n<h.operatorCount;n++){const s=[0,1,3,2,2,2,4,5],a=X(0,s.length,oe[e.charCodeAt(i++)]);3==a?t.operators[n].pulseWidth=5:4==a?t.operators[n].pulseWidth=4:5==a&&(t.operators[n].pulseWidth=6),t.operators[n].waveform=s[a]}else for(let n=0;n<(11==t.type?6:h.operatorCount);n++){if(l){const s=[0,1,3,2,4,5];t.operators[n].waveform=s[X(0,h.operatorWaves.length,oe[e.charCodeAt(i++)])]}else t.operators[n].waveform=X(0,h.operatorWaves.length,oe[e.charCodeAt(i++)]);2==t.operators[n].waveform&&(t.operators[n].pulseWidth=X(0,h.pwmOperatorWaves.length,oe[e.charCodeAt(i++)]))}}break;case 83:{const t=this.channels[$].instruments[U];if(3==t.type){const n=Math.ceil(h.spectrumControlPoints*h.spectrumControlPointBits/6),s=new le(e,i,i+n);for(let e=0;e<h.spectrumControlPoints;e++)t.spectrumWave.spectrum[e]=s.read(h.spectrumControlPointBits);t.spectrumWave.markCustomWaveDirty(),i+=n}else{if(4!=t.type)throw new Error("Unhandled instrument type for spectrum song tag code.");{const n=Math.ceil(h.drumCount*h.spectrumControlPoints*h.spectrumControlPointBits/6),s=new le(e,i,i+n);for(let e=0;e<h.drumCount;e++){for(let i=0;i<h.spectrumControlPoints;i++)t.drumsetSpectrumWaves[e].spectrum[i]=s.read(h.spectrumControlPointBits);t.drumsetSpectrumWaves[e].markCustomWaveDirty()}i+=n}}}break;case 72:{const t=this.channels[$].instruments[U],n=Math.ceil(h.harmonicsControlPoints*h.harmonicsControlPointBits/6),s=new le(e,i,i+n);for(let e=0;e<h.harmonicsControlPoints;e++)t.harmonicsWave.harmonics[e]=s.read(h.harmonicsControlPointBits);t.harmonicsWave.markCustomWaveDirty(),i+=n}break;case 89:{const t=this.channels[$].instruments[U],n=Math.ceil(h.additiveControlPoints*h.additiveControlPointBits/6),s=new le(e,i,i+n);for(let e=0;e<h.additiveControlPoints;e++)t.additiveWave.additives[e]=s.read(h.additiveControlPointBits);t.additiveWave.markCustomWaveDirty(),i+=n;for(let n=0;n<h.additiveControlPoints;n++)t.additiveWave.waveTypes[n]=oe[e.charCodeAt(i++)]}break;case 88:if(l&&g||u&&b){const t=this.channels[$].instruments[U];t.aliases=!!oe[e.charCodeAt(i++)],t.aliases&&(t.distortion=0,t.effects|=8)}else if(c||f){this.channels[$].instruments[U].decimalOffset=X(0,51,oe[e.charCodeAt(i++)])}break;case 98:{let t;if(y&&o){const n=oe[e.charCodeAt(i++)],s=oe[e.charCodeAt(i++)];t=Math.ceil(.5*s);const a=new le(e,i,i+t);for(let e=0;e<s;e++)this.channels[n].bars[e]=a.read(3)+1}else if(g&&o){let n=0;for(;1<<n<this.patternsPerChannel;)n++;t=Math.ceil(this.getChannelCount()*this.barCount*n/6);const s=new le(e,i,i+t);for(let e=0;e<this.getChannelCount();e++)for(let t=0;t<this.barCount;t++)this.channels[e].bars[t]=s.read(n)+1}else{let n=0;for(;1<<n<this.patternsPerChannel+1;)n++;t=Math.ceil(this.getChannelCount()*this.barCount*n/6);const s=new le(e,i,i+t);for(let e=0;e<this.getChannelCount();e++)for(let t=0;t<this.barCount;t++)this.channels[e].bars[t]=s.read(n)}i+=t}break;case 112:{let t,n=0,s=!(b&&l||o),a=s?4:3,r=s?16:8;if(y&&o)t=oe[e.charCodeAt(i++)],i++,n=oe[e.charCodeAt(i++)],n<<=6,n+=oe[e.charCodeAt(i++)];else{t=0;let s=Z(1,4,oe[e.charCodeAt(i++)]);for(;s>0;)n<<=6,n+=oe[e.charCodeAt(i++)],s--}const p=new le(e,i,i+n);i+=n;const m=Ie.getNeededBits(h.noteSizeMax);let v=-1,S=-1,w=-1;const M=l,k=30;for(;;){const e=this.channels[t],i=this.getChannelIsNoise(t),n=this.getChannelIsMod(t),F=this.getMaxInstrumentsPerPattern(t),x=Ie.getNeededBits(F-h.instrumentCountMin),q=Ie.getNeededBits(e.instruments.length-1);if(n){let i=g&&l||b&&u;const n=i?q:Ie.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let s=0;s<e.instruments.length;s++){let a=e.instruments[s];for(let e=0;e<h.modCount;e++){let r=p.read(2);switch(r){case 0:a.modChannels[e]=X(0,this.pitchChannelCount+this.noiseChannelCount+1,p.read(8)),a.modInstruments[e]=X(0,this.channels[a.modChannels[e]].instruments.length+2,p.read(n));break;case 1:a.modChannels[e]=this.pitchChannelCount+X(0,this.noiseChannelCount+1,p.read(8)),a.modInstruments[e]=X(0,this.channels[a.modChannels[e]].instruments.length+2,p.read(q));break;case 2:a.modChannels[e]=-1;break;case 3:a.modChannels[e]=-2}if(3!=r&&(a.modulators[e]=p.read(6)),i||"eq filter"!=h.modulators[a.modulators[e]].name&&"note filter"!=h.modulators[a.modulators[e]].name&&"song eq"!=h.modulators[a.modulators[e]].name||(a.modFilterTypes[e]=p.read(6)),"individual envelope speed"==h.modulators[a.modulators[e]].name&&(a.modEnvelopeNumbers[e]=p.read(6)),i&&a.modChannels[e]>=0){let t=I(this.channels[a.modChannels[e]].instruments[a.modInstruments[e]].effects);7==a.modulators[e]?(a.modulators[e]=t?h.modulators.dictionary["note filt cut"].index:h.modulators.dictionary["eq filt cut"].index,a.modFilterTypes[e]=1):8==a.modulators[e]&&(a.modulators[e]=t?h.modulators.dictionary["note filt peak"].index:h.modulators.dictionary["eq filt peak"].index,a.modFilterTypes[e]=2)}else i&&a.modulators[e]==h.modulators.dictionary["song reverb"].index&&(v=t,S=s,w=e);i&&12!=h.modulators[a.modulators[e]].associatedEffect&&(this.channels[a.modChannels[e]].instruments[a.modInstruments[e]].effects|=1<<h.modulators[a.modulators[e]].associatedEffect)}}}const P=[];for(let t=0;t<e.instruments.length;t++){P[t]=[];for(let i=0;i<h.modCount;i++)P[t][h.modCount-1-i]=1+3*+((g&&l||b&&u)&&n&&e.instruments[t].modulators[i]==h.modulators.dictionary.detune.index)}const E=i||n?0:12*e.octave;let T=i||n?4:E;const z=n?[0,1,2,3,4,5]:i?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],D=[];for(let e=0;e<z.length;e++)z[e]+=E;for(let t=0;t<this.patternsPerChannel;t++){const i=e.patterns[t];if(G&&o||g&&l||b&&u)i.instruments[0]=Z(0,e.instruments.length-1,p.read(q)),i.instruments.length=1;else if(this.patternInstruments){const t=Z(h.instrumentCountMin,F,p.read(x)+h.instrumentCountMin);for(let s=0;s<t;s++)i.instruments[s]=Z(0,e.instruments.length-1+2*+n,p.read(q));i.instruments.length=t}else i.instruments[0]=0,i.instruments.length=h.instrumentCountMin;if(!(o&&y||0!=p.read(1))){i.notes.length=0;continue}let v=0;const S=i.notes;let w=0;for(;v<this.beatsPerBar*h.partsPerBeat+ +n;){const t=1==p.read(1);let y=!1,F=0;if(t?F=Z(0,D.length-1,p.readLongTail(0,0)):y=1==p.read(1),t||y){let y,x,q;if(t)y=D[F],D.splice(F,1);else{if(y={},s)1==p.read(1)?y.pitchCount=p.read(3)+2:y.pitchCount=1;else for(y.pitchCount=1;y.pitchCount<4&&1==p.read(1);)y.pitchCount++;d?1==p.read(1)&&(y.startOffset=p.read(31)):y.startOffset=0,y.pinCount=p.readPinCount(),y.initialSize=o?2*p.read(2):n?p.read(11):p.read(m),y.pins=[],y.length=0,y.bendCount=0;for(let e=0;e<y.pinCount;e++){let e={};e.pitchBend=1==p.read(1),e.pitchBend&&y.bendCount++,y.length+=R&&o?p.readLegacyPartDuration()*h.partsPerBeat/h.rhythms[this.rhythm].stepsPerBeat:p.readPartDuration(),e.time=y.length,e.size=o?2*p.read(2):n?p.read(9):p.read(m),y.pins.push(e)}}D.unshift(y),D.length>10&&D.pop(),S.length<=w?(x=new ue(0,v,v+y.length,y.initialSize,!1,y.startOffset),S[w++]=x):(x=S[w++],x.start=v,x.end=v+y.length,x.pins[0].size=y.initialSize);let I=0;const E=[];for(let e=0;e<y.pitchCount+y.bendCount;e++){if(1==p.read(1)){const e=Z(0,z.length-1,p.read(a));q=z[e],z.splice(e,1)}else{q=T;let e=p.readPitchInterval();for(;e>0;){for(q++;-1!=z.indexOf(q);)q++;e--}for(;e<0;){for(q--;-1!=z.indexOf(q);)q--;e++}}z.unshift(q),z.length>r&&z.pop(),e<y.pitchCount?x.pitches[I++]=q:E.push(q),T=e==y.pitchCount-1?x.pitches[0]:q}x.pitches.length=I,E.unshift(x.pitches[0]);const H=n&&e.instruments[i.instruments[0]].modulators[h.modCount-1-x.pitches[0]]===h.modulators.dictionary.tempo.index;let O=0;M&&H&&(O=k-h.tempoMin),n&&(x.pins[0].size+=O,x.pins[0].size*=P[i.instruments[0]][x.pitches[0]]);let L=1;for(const e of y.pins){e.pitchBend&&E.shift();const t=E[0]-x.pitches[0];if(x.pins.length<=L)x.pins[L++]=he(t,e.time,n?e.size*P[i.instruments[0]][x.pitches[0]]+O:e.size);else{const s=x.pins[L++];s.interval=t,s.time=e.time,s.size=n?e.size*P[i.instruments[0]][x.pitches[0]]+O:e.size}}x.pins.length=L,0==x.start&&(x.continuesLastPattern=G&&o||g&&l||b&&u?!(b&&!c&&!f||o)&&e.instruments[i.instruments[0]].legacyTieOver:1==p.read(1)),v=Z(0,this.beatsPerBar*h.partsPerBeat,x.end)}else if(n){const e=1==p.read(1),t=p.readPartDuration();e?v-=t:v+=t}else{v+=R&&o?p.readLegacyPartDuration()*h.partsPerBeat/h.rhythms[this.rhythm].stepsPerBeat:p.readPartDuration()}}S.length=w}if(y&&o)break;if(t++,t>=this.getChannelCount())break}if((l&&g||b&&u)&&w>=0)for(let e=0;e<this.channels.length;e++)for(let t=0;t<this.channels[e].instruments.length;t++){const i=this.channels[e].instruments[t];if(H(i.effects)&&(i.reverb=h.reverbRange-1),v==e&&S==t){const t=this.channels[e].bars[0];if(t>0){const i=this.channels[e].patterns[t-1];let n=6;for(const e of i.notes)e.pitches[0]==h.modCount-1-w&&(n=Math.min(n,e.start));n>0&&i.notes.push(new ue(h.modCount-1-w,0,n,V))}else if(this.channels[e].patterns.length<h.barCountMax){const t=new ce;if(this.channels[e].patterns.push(t),this.channels[e].bars[0]=this.channels[e].patterns.length,this.channels[e].patterns.length>this.patternsPerChannel){for(let e=0;e<this.channels.length;e++)this.channels[e].patterns.length<=this.patternsPerChannel&&this.channels[e].patterns.push(new ce);this.patternsPerChannel++}t.instruments.length=1,t.instruments[0]=S,t.notes.length=0,t.notes.push(new ue(h.modCount-1-w,0,6,V))}}}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode(W)+" at index "+(i-1)+" "+e.substring(0,i))}h.willReloadForCustomSamples&&(window.location.hash=this.toBase64String(),setTimeout((()=>{location.reload()}),50))}static _(e){try{return Boolean(new URL(e))}catch(e){return!1}}static j(e,t,i,n,s){const a=h.chipWaves[0].samples,r=h.chipWaves[0].samplesR||h.chipWaves[0].samples,l=h.rawRawChipWaves[0].samples,p=h.rawRawChipWaves[0].samplesR||h.chipWaves[0].samples,u=t.length;t.push(e);const c=h.chipWaves.length;let f=e,d=44100,m=!1,v=60,y=!1,b=null,g=null,S=null,w=null,M=!1,k=!1,F=!1,x=e.indexOf("!"),q=-1;if(0===x&&(q=e.indexOf("!",x+1),-1!==q)){const P=e.slice(x+1,q).split(",");for(const E of P){const T=E.charAt(0),z=E.slice(1,E.length);"s"===T?d=X(8e3,96001,ee(z,44100)):"r"===T?v=ee(z,60):"p"===T?m=!0:"a"===T?(b=te(z,null),null!=b&&(y=!0)):"b"===T?(g=te(z,null),null!=g&&(y=!0)):"c"===T?(S=te(z,null),null!=S&&(y=!0)):"d"===T?(w=te(z,null),null!=w&&(w=X(0,4,w),y=!0)):"e"===T?(M=!0,y=!0):"f"===T&&(k=!0,y=!0)}f=e.slice(q+1,e.length),F=!0}let I=null;if(!Ie._(f))return alert(e+" is not a valid url"),!1;if(I=new URL(f),s&&!F&&null!=I){function D(){f=e.slice(0,e.indexOf(",")),I=new URL(f),d=X(8e3,96001,ee(e.slice(e.indexOf(",")+1),44100))}function H(){f=e.slice(0,e.indexOf("!")),I=new URL(f),v=ee(e.slice(e.indexOf("!")+1),60)}-1!=e.indexOf("@")&&(f=e.replaceAll("@",""),I=new URL(f),m=!0),-1!=e.indexOf(",")&&-1!=e.indexOf("!")?e.indexOf(",")<e.indexOf("!")?(H(),D()):(D(),H()):(-1!=e.indexOf(",")&&D(),-1!=e.indexOf("!")&&H())}if(null!=I){let O=f;const R=[];let L;44100!==d&&R.push("s"+d),60!==v&&R.push("r"+v),m&&R.push("p"),y&&(null!=b&&R.push("a"+b),null!=g&&R.push("b"+g),null!=S&&R.push("c"+S),null!=w&&R.push("d"+w),M&&R.push("e"),k&&R.push("f")),R.length>0&&(O="!"+R.join(",")+"!"+f),t[u]=O,L=decodeURIComponent(I.pathname.replace(/^([^\/]*\/)+/,""));const G=1;h.chipWaves[c]={name:L,expression:G,isCustomSampled:!0,isPercussion:m,rootKey:v,sampleRate:d,samples:a,samplesR:r,index:c},h.rawChipWaves[c]={name:L,expression:G,isCustomSampled:!0,isPercussion:m,rootKey:v,sampleRate:d,samples:l,samplesR:p,index:c},h.rawRawChipWaves[c]={name:L,expression:G,isCustomSampled:!0,isPercussion:m,rootKey:v,sampleRate:d,samples:l,samplesR:p,index:c};const C={type:"chip",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"harmony",wave:L,unison:"none",envelopes:[],chipWaveInStereo:!1};y&&(C.isUsingAdvancedLoopControls=!0,C.chipWaveLoopStart=null!=b?b:0,C.chipWaveLoopEnd=null!=g?g:2,C.chipWaveLoopMode=null!=w?w:0,C.chipWavePlayBackwards=M,C.chipWaveStartOffset=null!=S?S:0);const A={index:0,name:L,midiProgram:80,settings:C};if(i.push(A),!h.willReloadForCustomSamples){o(f,c,C,{isUsingAdvancedLoopControls:y,chipWaveLoopStart:b,chipWaveLoopEnd:g,chipWaveLoopMode:w,chipWavePlayBackwards:M,chipWaveStartOffset:S},d)}n.statusTable[c]=0,n.urlTable[c]=f,n.totalSamples++}return!0}static U(){h.chipWaves=w(h.chipWaves.slice(0,h.firstIndexForSamplesInChipWaveList)),h.rawChipWaves=w(h.rawChipWaves.slice(0,h.firstIndexForSamplesInChipWaveList)),h.rawRawChipWaves=w(h.rawRawChipWaves.slice(0,h.firstIndexForSamplesInChipWaveList))}static P(){O.customSamples=null,Ie.U(),n.statusTable={},n.urlTable={},n.totalSamples=0,n.samplesLoaded=0,r.dispatchEvent(new s(n.totalSamples,n.samplesLoaded))}toJsonObject(e=!0,t=1,i=!0){const n=[];for(let s=0;s<this.getChannelCount();s++){const a=this.channels[s],r=[],o=this.getChannelIsNoise(s),l=this.getChannelIsMod(s);for(const e of a.instruments)r.push(e.toJsonObject());const p=[];for(const e of a.patterns)p.push(e.toJsonObject(this,a,l));const h=[];if(e)for(let e=0;e<this.loopStart;e++)h.push(a.bars[e]);for(let e=0;e<t;e++)for(let e=this.loopStart;e<this.loopStart+this.loopLength;e++)h.push(a.bars[e]);if(i)for(let e=this.loopStart+this.loopLength;e<this.barCount;e++)h.push(a.bars[e]);const u={type:l?"mod":o?"drum":"pitch",name:a.name,instruments:r,patterns:p,sequence:h};o||(u.octaveScrollBar=a.octave-1),n.push(u)}const s={name:this.title,format:Ie.K,version:Ie.q,scale:h.scales[this.scale].name,customScale:this.scaleCustom,key:h.keys[this.key].name,keyOctave:this.octave,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:h.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,reverb:this.reverb,masterGain:this.masterGain,compressionThreshold:this.compressionThreshold,limitThreshold:this.limitThreshold,limitDecay:this.limitDecay,limitRise:this.limitRise,limitRatio:this.limitRatio,compressionRatio:this.compressionRatio,songEq:this.eqFilter.toJsonObject(),layeredInstruments:this.layeredInstruments,patternInstruments:this.patternInstruments,channels:n};for(let e=0;e<h.filterMorphCount-1;e++)s["songEq"+e]=this.eqSubFilters[e];return null!=O.customSamples&&O.customSamples.length>0&&(s.customSamples=O.customSamples),s}fromJsonObject(e,t="auto"){if(this.initToDefault(!0),!e)return;"auto"==t&&"BeepBox"==e.format&&(null!=e.riff&&(t="modbox"),null!=e.masterGain&&(t="jummbox"));const i=("auto"==t?e.format:t).toLowerCase();if(null!=e.name&&(this.title=e.name),null!=e.customSamples){const t=e.customSamples;if(null==O.customSamples||O.customSamples.join(", ")!=t.join(", ")){h.willReloadForCustomSamples=!0,Ie.U();let e=!1,i=!1,s=!1;const a=[],r=[];for(const o of t)if("legacysamples"===o.toLowerCase())e||(e=!0,a.push(o),p(0));else if("nintariboxsamples"===o.toLowerCase())i||(i=!0,a.push(o),p(1));else if("mariopaintboxsamples"===o.toLowerCase())s||(s=!0,a.push(o),p(2));else{const e=!1;Ie.j(o,a,r,n,e)}if(a.length>0&&(O.customSamples=a),r.length>0){const e=w(r);O.presetCategories[O.presetCategories.length]={name:"Custom Sample Presets",presets:e,index:O.presetCategories.length}}}}else{let t=!1;if(null!=e.channels)for(let n=0;n<e.channels.length;n++){const s=e.channels[n];if("pitch"===s.type&&Array.isArray(s.instruments)){const e=s.instruments;for(let n=0;n<e.length;n++){const s=e[n];if("chip"!==s.type)continue;if(null==s.wave)continue;const a=s.wave,r=["paandorasbox kick","paandorasbox snare","paandorasbox piano1","paandorasbox WOW","paandorasbox overdrive","paandorasbox trumpet","paandorasbox saxophone","paandorasbox orchestrahit","paandorasbox detatched violin","paandorasbox synth","paandorasbox sonic3snare","paandorasbox come on","paandorasbox choir","paandorasbox overdriveguitar","paandorasbox flute","paandorasbox legato violin","paandorasbox tremolo violin","paandorasbox amen break","paandorasbox pizzicato violin","paandorasbox tim allen grunt","paandorasbox tuba","paandorasbox loopingcymbal","paandorasbox standardkick","paandorasbox standardsnare","paandorasbox closedhihat","paandorasbox foothihat","paandorasbox openhihat","paandorasbox crashcymbal","paandorasbox pianoC4","paandorasbox liver pad","paandorasbox marimba","paandorasbox susdotwav","paandorasbox wackyboxtts","paandorasbox peppersteak_1","paandorasbox peppersteak_2","paandorasbox vinyl_noise","paandorasbeta slap bass","paandorasbeta HD EB overdrive guitar","paandorasbeta sunsoft bass","paandorasbeta masculine choir","paandorasbeta feminine choir","paandorasbeta tololoche","paandorasbeta harp","paandorasbeta pan flute","paandorasbeta krumhorn","paandorasbeta timpani","paandorasbeta crowd hey","paandorasbeta wario land 4 brass","paandorasbeta wario land 4 rock organ","paandorasbeta wario land 4 DAOW","paandorasbeta wario land 4 hour chime","paandorasbeta wario land 4 tick","paandorasbeta kirby kick","paandorasbeta kirby snare","paandorasbeta kirby bongo","paandorasbeta kirby click","paandorasbeta sonor kick","paandorasbeta sonor snare","paandorasbeta sonor snare (left hand)","paandorasbeta sonor snare (right hand)","paandorasbeta sonor high tom","paandorasbeta sonor low tom","paandorasbeta sonor hihat (closed)","paandorasbeta sonor hihat (half opened)","paandorasbeta sonor hihat (open)","paandorasbeta sonor hihat (open tip)","paandorasbeta sonor hihat (pedal)","paandorasbeta sonor crash","paandorasbeta sonor crash (tip)","paandorasbeta sonor ride"],o=["pandoraasbox kick","pandoraasbox snare","pandoraasbox piano1","pandoraasbox WOW","pandoraasbox overdrive","pandoraasbox trumpet","pandoraasbox saxophone","pandoraasbox orchestrahit","pandoraasbox detatched violin","pandoraasbox synth","pandoraasbox sonic3snare","pandoraasbox come on","pandoraasbox choir","pandoraasbox overdriveguitar","pandoraasbox flute","pandoraasbox legato violin","pandoraasbox tremolo violin","pandoraasbox amen break","pandoraasbox pizzicato violin","pandoraasbox tim allen grunt","pandoraasbox tuba","pandoraasbox loopingcymbal","pandoraasbox standardkick","pandoraasbox standardsnare","pandoraasbox closedhihat","pandoraasbox foothihat","pandoraasbox openhihat","pandoraasbox crashcymbal","pandoraasbox pianoC4","pandoraasbox liver pad","pandoraasbox marimba","pandoraasbox susdotwav","pandoraasbox wackyboxtts","pandoraasbox peppersteak_1","pandoraasbox peppersteak_2","pandoraasbox vinyl_noise","pandoraasbeta slap bass","pandoraasbeta HD EB overdrive guitar","pandoraasbeta sunsoft bass","pandoraasbeta masculine choir","pandoraasbeta feminine choir","pandoraasbeta tololoche","pandoraasbeta harp","pandoraasbeta pan flute","pandoraasbeta krumhorn","pandoraasbeta timpani","pandoraasbeta crowd hey","pandoraasbeta wario land 4 brass","pandoraasbeta wario land 4 rock organ","pandoraasbeta wario land 4 DAOW","pandoraasbeta wario land 4 hour chime","pandoraasbeta wario land 4 tick","pandoraasbeta kirby kick","pandoraasbeta kirby snare","pandoraasbeta kirby bongo","pandoraasbeta kirby click","pandoraasbeta sonor kick","pandoraasbeta sonor snare","pandoraasbeta sonor snare (left hand)","pandoraasbeta sonor snare (right hand)","pandoraasbeta sonor high tom","pandoraasbeta sonor low tom","pandoraasbeta sonor hihat (closed)","pandoraasbeta sonor hihat (half opened)","pandoraasbeta sonor hihat (open)","pandoraasbeta sonor hihat (open tip)","pandoraasbeta sonor hihat (pedal)","pandoraasbeta sonor crash","pandoraasbeta sonor crash (tip)","pandoraasbeta sonor ride"],l=["kick","snare","piano1","WOW","overdrive","trumpet","saxophone","orchestrahit","detatched violin","synth","sonic3snare","come on","choir","overdriveguitar","flute","legato violin","tremolo violin","amen break","pizzicato violin","tim allen grunt","tuba","loopingcymbal","standardkick","standardsnare","closedhihat","foothihat","openhihat","crashcymbal","pianoC4","liver pad","marimba","susdotwav","wackyboxtts"];r.includes(a)?t=!0:o.includes(a)?(t=!0,s.wave=r[o.findIndex((e=>e===a))]):l.includes(a)&&("trumpet"!==a&&"flute"!==a||"paandorasbox"==i)&&(t=!0,s.wave=r[l.findIndex((e=>e===a))])}}}t?(h.willReloadForCustomSamples=!0,Ie.U(),p(0),O.customSamples=["legacySamples"]):null!=O.customSamples&&O.customSamples.length>0&&(h.willReloadForCustomSamples=!0,Ie.P())}if(this.scale=0,null!=e.scale){const t={"romani :)":"double harmonic :)","romani :(":"double harmonic :(","dbl harmonic :)":"double harmonic :)","dbl harmonic :(":"double harmonic :(",enigma:"strange"},i=null!=t[e.scale]?t[e.scale]:e.scale,n=h.scales.findIndex((e=>e.name==i));if(-1!=n&&(this.scale=n),this.scale==h.scales.dictionary.Custom.index&&null!=e.customScale)for(var s of e.customScale.keys())this.scaleCustom[s]=e.customScale[s]}if(null!=e.key)if("number"==typeof e.key)this.key=(e.key+1200>>>0)%h.keys.length;else if("string"==typeof e.key){const t=e.key;if("C+"===t)this.key=0,this.octave=1;else if("G- (actually F#-)"===t)this.key=6,this.octave=-1;else if("C-"===t)this.key=0,this.octave=-1;else if("oh no (F-)"===t)this.key=5,this.octave=-1;else{const e=t.charAt(0).toUpperCase(),i=t.charAt(1).toLowerCase();let n={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[e];const s={"#":1,"♯":1,b:-1,"♭":-1}[i];null!=n&&(null!=s&&(n+=s),n<0&&(n+=12),n%=12,this.key=n)}}null!=e.beatsPerMinute&&(this.tempo=X(h.tempoMin,h.tempoMax+1,0|e.beatsPerMinute)),null!=e.keyOctave&&(this.octave=X(h.octaveMin,h.octaveMax+1,0|e.keyOctave));let a=0;null!=e.reverb&&(a=X(0,32,0|e.reverb)),null!=e.beatsPerBar&&(this.beatsPerBar=Math.max(h.beatsPerBarMin,Math.min(h.beatsPerBarMax,0|e.beatsPerBar)));let r=4;null!=e.ticksPerBeat&&(r=0|e.ticksPerBeat||4,this.rhythm=h.rhythms.findIndex((e=>e.stepsPerBeat==r)),-1==this.rhythm&&(this.rhythm=1)),null!=e.masterGain?this.masterGain=Math.max(0,Math.min(5,e.masterGain||0)):this.masterGain=1,null!=e.limitThreshold?this.limitThreshold=Math.max(0,Math.min(2,e.limitThreshold||0)):this.limitThreshold=1,null!=e.compressionThreshold?this.compressionThreshold=Math.max(0,Math.min(1.1,e.compressionThreshold||0)):this.compressionThreshold=1,null!=e.limitRise?this.limitRise=Math.max(2e3,Math.min(1e4,e.limitRise||0)):this.limitRise=4e3,null!=e.limitDecay?this.limitDecay=Math.max(1,Math.min(30,e.limitDecay||0)):this.limitDecay=4,null!=e.limitRatio?this.limitRatio=Math.max(0,Math.min(11,e.limitRatio||0)):this.limitRatio=1,null!=e.compressionRatio?this.compressionRatio=Math.max(0,Math.min(1.168,e.compressionRatio||0)):this.compressionRatio=1,null!=e.songEq?this.eqFilter.fromJsonObject(e.songEq):this.eqFilter.reset();for(let t=0;t<h.filterMorphCount-1;t++)e["songEq"+t]?this.eqSubFilters[t]=e["songEq"+t]:this.eqSubFilters[t]=null;let o=1,l=1,u=1;if(null!=e.channels)for(const t of e.channels)t.instruments&&(o=Math.max(o,0|t.instruments.length)),t.patterns&&(l=Math.max(l,0|t.patterns.length)),t.sequence&&(u=Math.max(u,0|t.sequence.length));null!=e.layeredInstruments?this.layeredInstruments=!!e.layeredInstruments:this.layeredInstruments=!1,null!=e.patternInstruments?this.patternInstruments=!!e.patternInstruments:this.patternInstruments=o>1,this.patternsPerChannel=Math.min(l,h.barCountMax),this.barCount=Math.min(u,h.barCountMax),null!=e.introBars&&(this.loopStart=X(0,this.barCount,0|e.introBars)),null!=e.loopBars&&(this.loopLength=X(1,this.barCount-this.loopStart+1,0|e.loopBars));const c=[],f=[],d=[];if(null!=e.channels)for(let t=0;t<e.channels.length;t++){let n=e.channels[t];const s=new qe;let o=!1,l=!1;if(null!=n.type?(o="drum"==n.type,l="mod"==n.type):o=t>=3,o?f.push(s):l?d.push(s):c.push(s),null!=n.octaveScrollBar&&(s.octave=X(0,h.pitchOctaves,1+(0|n.octaveScrollBar)),o&&(s.octave=0)),null!=n.name?s.name=n.name:s.name="",Array.isArray(n.instruments)){const e=n.instruments;for(let t=0;t<e.length&&!(t>=this.getMaxInstrumentsPerChannel());t++){const n=new xe(o,l);s.instruments[t]=n,n.fromJsonObject(e[t],o,l,!1,!1,a,i)}}for(let e=0;e<this.patternsPerChannel;e++){const t=new ce;let a;s.patterns[e]=t,n.patterns&&(a=n.patterns[e]),null!=a&&t.fromJsonObject(a,this,s,r,o,l,i)}s.patterns.length=this.patternsPerChannel;for(let e=0;e<this.barCount;e++)s.bars[e]=null!=n.sequence?Math.min(this.patternsPerChannel,n.sequence[e]>>>0):0;s.bars.length=this.barCount}c.length>h.pitchChannelCountMax&&(c.length=h.pitchChannelCountMax),f.length>h.noiseChannelCountMax&&(f.length=h.noiseChannelCountMax),d.length>h.modChannelCountMax&&(d.length=h.modChannelCountMax),this.pitchChannelCount=c.length,this.noiseChannelCount=f.length,this.modChannelCount=d.length,this.channels.length=0,Array.prototype.push.apply(this.channels,c),Array.prototype.push.apply(this.channels,f),Array.prototype.push.apply(this.channels,d),h.willReloadForCustomSamples&&(window.location.hash=this.toBase64String(),setTimeout((()=>{location.reload()}),50))}getPattern(e,t){if(t<0||t>=this.barCount)return null;const i=this.channels[e].bars[t];return 0==i?null:this.channels[e].patterns[i-1]}getBeatsPerMinute(){return this.tempo}static getNeededBits(e){return 32-Math.clz32(Math.ceil(e+1)-1)}restoreLimiterDefaults(){this.compressionRatio=1,this.limitRatio=1,this.limitRise=4e3,this.limitDecay=4,this.limitThreshold=1,this.compressionThreshold=1,this.masterGain=1}}Ie.K=h.jsonFormat,Ie.H=2,Ie.T=9,Ie.R=1,Ie.O=6,Ie.N=1,Ie.L=4,Ie.V=1,Ie.W=5,Ie.$=1,Ie.q=4,Ie.k=116;class Pe{constructor(){this.delayLine=null,this.allPassG=0,this.allPassGDelta=0,this.sustainFilterA1=0,this.sustainFilterA1Delta=0,this.sustainFilterA2=0,this.sustainFilterA2Delta=0,this.sustainFilterB0=0,this.sustainFilterB0Delta=0,this.sustainFilterB1=0,this.sustainFilterB1Delta=0,this.sustainFilterB2=0,this.sustainFilterB2Delta=0,this.reset()}reset(){this.delayIndex=-1,this.allPassSample=0,this.allPassPrevInput=0,this.sustainFilterSample=0,this.sustainFilterPrevOutput2=0,this.sustainFilterPrevInput1=0,this.sustainFilterPrevInput2=0,this.fractionalDelaySample=0,this.prevDelayLength=-1,this.delayResetOffset=0}update(e,t,i,n,s,a,r,o){const l=2*Math.PI*h.pickedStringDispersionCenterFreq/e.samplesPerSecond,p=this.prevDelayLength,u=i.phaseDeltas[n],c=i.phaseDeltaScales[n],f=u*Math.pow(c,s),d=2*Math.PI*u,m=2*Math.PI*f,v=2*d,y=2*m,b=Math.min(Math.PI,d*h.pickedStringDispersionFreqMult*Math.pow(l/d,h.pickedStringDispersionFreqScale)),g=Math.min(Math.PI,m*h.pickedStringDispersionFreqMult*Math.pow(l/m,h.pickedStringDispersionFreqScale)),S=2*Math.PI*h.pickedStringShelfHz/e.samplesPerSecond,w=(Math.pow(100,a)-1)/99,M=(Math.pow(100,r)-1)/99,k=1==o?.25:0,F=15.6,x=3*e.samplesPerSecond/48e3,q=Math.pow(.5,w*Math.pow(S/(d*F),1+2*k)*F),I=Math.pow(.5,M*Math.pow(S/(m*F),1+2*k)*F),P=Math.pow(q,.002),E=Math.pow(I,.002);He.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(b),e.tempFrequencyResponse.analyze(He.tempFilterStartCoefficients,v);const T=He.tempFilterStartCoefficients.b[0],z=-e.tempFrequencyResponse.angle()/v;He.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(g),e.tempFrequencyResponse.analyze(He.tempFilterEndCoefficients,y);const D=He.tempFilterEndCoefficients.b[0],H=-e.tempFrequencyResponse.angle()/y,O=0==o?0:1;if(0==O){const e=Math.pow(q,h.stringDecayRate),t=Math.pow(I,h.stringDecayRate);He.tempFilterStartCoefficients.highShelf2ndOrder(S,e,.5),He.tempFilterEndCoefficients.highShelf2ndOrder(S,t,.5)}else{const t=Math.pow(1==O?0:1,.25),i=Math.pow(x*x*d*3.3*48e3/e.samplesPerSecond,.5+k)/x/Math.pow(w,.5),n=Math.pow(x*x*m*3.3*48e3/e.samplesPerSecond,.5+k)/x/Math.pow(M,.5),s=i*Math.pow(2,.5-1.75*(1-Math.pow(1-t,.85))),a=n*Math.pow(2,.5-1.75*(1-Math.pow(1-t,.85))),r=Math.pow(2,-Math.pow(2,-Math.pow(t,.9))),o=Math.pow(2,-Math.pow(2,-Math.pow(t,.9)));He.tempFilterStartCoefficients.lowPass2ndOrderButterworth(V(s),r),He.tempFilterEndCoefficients.lowPass2ndOrderButterworth(V(a),o)}e.tempFrequencyResponse.analyze(He.tempFilterStartCoefficients,v);const R=He.tempFilterStartCoefficients.a[1],L=He.tempFilterStartCoefficients.a[2],G=He.tempFilterStartCoefficients.b[0]*P,C=He.tempFilterStartCoefficients.b[1]*P,A=He.tempFilterStartCoefficients.b[2]*P,N=-e.tempFrequencyResponse.angle()/v;e.tempFrequencyResponse.analyze(He.tempFilterEndCoefficients,y);const B=He.tempFilterEndCoefficients.a[1],W=He.tempFilterEndCoefficients.a[2],$=He.tempFilterEndCoefficients.b[0]*E,U=He.tempFilterEndCoefficients.b[1]*E,j=He.tempFilterEndCoefficients.b[2]*E,Q=-e.tempFrequencyResponse.angle()/y,_=1/u,K=1/f,J=Math.ceil(2*Math.max(_,K)),Y=_-z-N,X=K-H-Q;this.prevDelayLength=Y,this.delayLengthDelta=(X-Y)/s,this.allPassG=T,this.sustainFilterA1=R,this.sustainFilterA2=L,this.sustainFilterB0=G,this.sustainFilterB1=C,this.sustainFilterB2=A,this.allPassGDelta=(D-T)/s,this.sustainFilterA1Delta=(B-R)/s,this.sustainFilterA2Delta=(W-L)/s,this.sustainFilterB0Delta=($-G)/s,this.sustainFilterB1Delta=(U-C)/s,this.sustainFilterB2Delta=(j-A)/s;const Z=Math.abs(Math.log2(Y/p))>.01,ee=-1==this.delayIndex||Z;if(null==this.delayLine||this.delayLine.length<=J){const t=Math.ceil(2*e.samplesPerSecond/xe.frequencyFromPitch(12)),i=new Float32Array(He.fittingPowerOfTwo(Math.max(t,J)));if(!ee&&null!=this.delayLine){const e=this.delayLine.length-1>>0,t=this.delayIndex+this.delayResetOffset;this.delayIndex=this.delayLine.length-this.delayResetOffset;for(let n=0;n<this.delayLine.length;n++)i[n]=this.delayLine[t+n&e]}this.delayLine=i}const te=this.delayLine,ie=te.length-1>>0;if(ee){this.delayIndex=0,this.allPassSample=0,this.allPassPrevInput=0,this.sustainFilterSample=0,this.sustainFilterPrevOutput2=0,this.sustainFilterPrevInput1=0,this.sustainFilterPrevInput2=0,this.fractionalDelaySample=0;const i=-Y,n=Math.floor(i-_/2),s=Math.ceil(n+2*_);this.delayResetOffset=s;for(let e=n;e<=s;e++)te[e&ie]=0;const a=t.waveL,r=a.length-1,o=r/_,l=Math.min(.2*_,.003*e.samplesPerSecond),p=Math.ceil(i),h=i+_+l,u=h;let c=(p-i)*o,f=0;for(let e=p;e<=u;e++){const t=0|c,n=t%r;let s=a[n];const p=c-t;s+=(a[n+1]-s)*p;const u=(s-f)/o,d=Math.min(1,(e-i)/l)*Math.min(1,(h-e)/l),m=d*d*(3-2*d);te[e&ie]+=u*m,f=s,c+=o}}}}class Ee{constructor(){this.noteSecondsStart=[],this.noteSecondsStartUnscaled=0,this.noteSecondsEnd=[],this.noteSecondsEndUnscaled=0,this.noteTicksStart=0,this.noteTicksEnd=0,this.noteSizeStart=h.noteSizeMax,this.noteSizeEnd=h.noteSizeMax,this.prevNoteSize=h.noteSizeMax,this.nextNoteSize=h.noteSizeMax,this.J=h.noteSizeMax,this.prevNoteSecondsStart=[],this.prevNoteSecondsStartUnscaled=0,this.prevNoteSecondsEnd=[],this.prevNoteSecondsEndUnscaled=0,this.prevNoteTicksStart=0,this.prevNoteTicksEnd=0,this.Y=h.noteSizeMax,this.tickTimeEnd=[],this.drumsetFilterEnvelopeStart=0,this.drumsetFilterEnvelopeEnd=0,this.prevSlideStart=!1,this.prevSlideEnd=!1,this.nextSlideStart=!1,this.nextSlideEnd=!1,this.prevSlideRatioStart=0,this.prevSlideRatioEnd=0,this.nextSlideRatioStart=0,this.nextSlideRatioEnd=0,this.startPinTickAbsolute=null,this.envelopeStarts=[],this.envelopeEnds=[],this.X=[],this.Z=0,this.lowpassCutoffDecayVolumeCompensation=1;for(let e=0;e<50;e++)this.envelopeStarts[e]=1,this.envelopeEnds[e]=1;this.reset()}reset(){for(let e=0;e<h.maxEnvelopeCount+1;e++)this.noteSecondsEnd[e]=0,this.prevNoteSecondsEnd[e]=0;this.noteSecondsEndUnscaled=0,this.noteTicksEnd=0,this.J=h.noteSizeMax,this.prevNoteSecondsEndUnscaled=0,this.prevNoteTicksEnd=0,this.Y=h.noteSizeMax,this.Z=0,this.drumsetFilterEnvelopeStart=0,this.drumsetFilterEnvelopeEnd=0,this.startPinTickAbsolute=null}computeEnvelopes(e,t,i,n,s,a,r,o,l){const p=s,u=e.getTransition();if(null!=a&&a.atNoteStart&&!u.continues&&!a.forceContinueAtStart){this.prevNoteSecondsEndUnscaled=this.noteSecondsEndUnscaled,this.prevNoteTicksEnd=this.noteTicksEnd,this.Y=this.J,this.noteSecondsEndUnscaled=0,this.noteTicksEnd=0;for(let e=0;e<h.maxEnvelopeCount+1;e++)this.prevNoteSecondsEnd[e]=this.noteSecondsEnd[e],this.noteSecondsEnd[e]=0}null!=a&&(null!=a.note?this.J=a.note.pins[a.note.pins.length-1].size:this.J=h.noteSizeMax);const c=[],f=n+1,d=[],m=this.noteSecondsEndUnscaled,v=[],y=m+p,b=this.noteTicksEnd,g=b+1,S=[],w=[],M=this.prevNoteSecondsEndUnscaled,k=M+p,F=this.prevNoteTicksEnd,x=F+1,q=1/(h.ticksPerPart*h.partsPerBeat),I=[],P=[];let E=this.J,T=this.J,z=this.Y,D=0,H=!1,O=!1,R=!1,L=!1,G=0,C=0,A=0,N=0;if(null==a&&(this.startPinTickAbsolute=null),null!=a&&null!=a.note&&!a.passedEndOfNote){const e=a.note.getEndPinIndex(t),i=a.note.pins[e-1],s=a.note.pins[e],r=(a.note.start+i.time)*h.ticksPerPart;null!=this.startPinTickAbsolute&&(u.continues||u.slides)||(this.startPinTickAbsolute=r+l.computeTicksSinceStart(!0));const o=(a.note.start+s.time)*h.ticksPerPart,p=(n-r)/(o-r),c=(f-r)/(o-r);if(E=i.size+(s.size-i.size)*p,T=i.size+(s.size-i.size)*c,u.slides){const e=a.noteStartPart*h.ticksPerPart,t=a.noteEndPart*h.ticksPerPart,i=.5*(t-e),s=Math.min(i,u.slideTicks);null==a.prevNote||a.forceContinueAtStart||(n-e<s&&(H=!0,G=.5*(1-(n-e)/s)),f-e<s&&(O=!0,C=.5*(1-(f-e)/s))),null==a.nextNote||a.forceContinueAtEnd||(D=a.nextNote.pins[0].size,t-n<s&&(R=!0,A=.5*(1-(t-n)/s)),t-f<s&&(L=!0,N=.5*(1-(t-f)/s)))}}let B=1,W=!1;for(let t=0;t<=e.envelopeCount;t++){let n,p,u,f=!1,b=1,g=1,F=b*g,x=0,V=1,$=0,U=2,j=2,Q=0,_=this.startPinTickAbsolute||0;if(t==e.envelopeCount){if(W)break;n=h.instrumentAutomationTargets.dictionary.noteVolume,p=0,u=h.newEnvelopes.dictionary["note size"]}else{let a=e.envelopes[t];n=h.instrumentAutomationTargets[a.target],p=a.index,u=h.newEnvelopes[a.envelope],f=e.envelopes[t].inverse,b=e.envelopes[t].perEnvelopeSpeed,g=Math.pow(e.envelopeSpeed,2)/144,F=0==b||0==g?b+g:b*g;const o=e.envelopes[t].perEnvelopeLowerBound<=e.envelopes[t].perEnvelopeUpperBound;x=o?e.envelopes[t].perEnvelopeLowerBound:0,V=o?e.envelopes[t].perEnvelopeUpperBound:1,$=l.computeTicksSinceStart(),U=e.envelopes[t].steps,j=e.envelopes[t].seed,e.envelopes[t].waveform>=(u.name,4)&&(e.envelopes[t].waveform=0),Q=e.envelopes[t].waveform,r[t]||(r[t]=0);const m=s*r[t];i[t]||(i[t]=0),c[t]=i[t]?i[t]+r[t]:r[t],d[t]=this.noteSecondsEnd[t]?this.noteSecondsEnd[t]:0,S[t]=this.prevNoteSecondsEnd[t]?this.prevNoteSecondsEnd[t]:0,v[t]=d[t]?d[t]+m:m,w[t]=S[t]?S[t]+m:m,I[t]=i[t]?q*i[t]:q,P[t]=c[t]?q*c[t]:q,1==u.type&&(W=!0)}const K=this.getPitchValue(e,a,o,!1),J=this.computePitchEnvelope(e,t,K);if(null!=n.computeIndex){const i=n.computeIndex+p;let s=Ee.computeEnvelope(u,F,m,d[t],I[t],$,E,J,f,x,V,!1,U,j,Q,K,_);if(H){s+=(Ee.computeEnvelope(u,F,M,S[t],I[t],$,z,J,f,x,V,!1,U,j,Q,K,_)-s)*G}if(R){s+=(Ee.computeEnvelope(u,F,0,0,I[t],$,D,J,f,x,V,!1,U,j,Q,K,_)-s)*A}let a=s;if(0==e.discreteEnvelope){if(a=Ee.computeEnvelope(u,F,y,v[t],P[t],$,T,J,f,x,V,!1,U,j,Q,K,_),O){a+=(Ee.computeEnvelope(u,F,k,w[t],P[t],$,z,J,f,x,V,!1,U,j,Q,K,_)-a)*C}if(L){a+=(Ee.computeEnvelope(u,F,0,0,P[t],$,D,J,f,x,V,!1,U,j,Q,K,_)-a)*N}}if(this.envelopeStarts[i]*=s,this.envelopeEnds[i]*=a,this.X[this.Z++]=i,n.isFilter){const t=null!=e.tmpNoteFilterStart?e.tmpNoteFilterStart:e.noteFilter;t.controlPointCount>p&&0==t.controlPoints[p].type&&(B=Math.max(B,Ee.getLowpassCutoffDecayVolumeCompensation(u,b)))}}}this.noteSecondsStartUnscaled=m,this.noteSecondsEndUnscaled=y,this.noteTicksStart=b,this.noteTicksEnd=g,this.prevNoteSecondsStartUnscaled=M,this.prevNoteSecondsEndUnscaled=k,this.prevNoteTicksStart=F,this.prevNoteTicksEnd=x;for(let e=0;e<h.maxEnvelopeCount+1;e++)this.noteSecondsStart[e]=d[e],this.noteSecondsEnd[e]=v[e],this.prevNoteSecondsStart[e]=S[e],this.prevNoteSecondsEnd[e]=w[e];this.prevNoteSize=z,this.nextNoteSize=D,this.noteSizeStart=E,this.noteSizeEnd=T,this.prevSlideStart=H,this.prevSlideEnd=O,this.nextSlideStart=R,this.nextSlideEnd=L,this.prevSlideRatioStart=G,this.prevSlideRatioEnd=C,this.nextSlideRatioStart=A,this.nextSlideRatioEnd=N,this.lowpassCutoffDecayVolumeCompensation=B}clearEnvelopes(){for(let e=0;e<this.Z;e++){const t=this.X[e];this.envelopeStarts[t]=1,this.envelopeEnds[t]=1}this.Z=0}static computeEnvelope(e,t,i,n,s,a,r,o,l,p,h,u=!1,c,f,d,m,v){const y=u?e.speed:1,b=h-p;switch(e.type){case 0:return h;case 1:return l?h-b*He.noteSizeToVolumeMult(r):b*He.noteSizeToVolumeMult(r)+p;case 2:return o;case 3:const e=4294967295,u=c;switch(d){case 0:if(u<=1)return 1;const i=J((0==t?0:Math.floor(a*t/256))+"",f);return l?h-b*(u/(u-1))*Math.floor(i*u/(e+1))/u:b*(u/(u-1))*Math.floor(i*u/(e+1))/u+p;case 1:const n=J(m+"",f);return l?h-b*n/(e+1):b*n/(e+1)+p;case 2:const s=J(v+"",f);return l?h-b*(u/(u-1))*Math.floor(s*u/(e+1))/u:b*(u/(u-1))*Math.floor(s*u/(e+1))/u+p;case 3:if(u<=1)return 1;const r=J((0==t?0:Math.floor(a*t/256))+"",f)*(1-a*t/256%1)+J((0==t?0:Math.floor((a*t+256)/256))+"",f)*(a*t/256%1);return l?h-b*r/(e+1):b*r/(e+1)+p;default:throw new Error("Unrecognized operator envelope waveform type: "+d)}case 6:return l?h-b*(1/(1+n*y)):b/(1+n*y)+p;case 7:return l?b/(1+n*y)+p:h-b/(1+n*y);case 8:switch(d){case 0:return l?h/2+b*Math.cos(2*s*Math.PI*y)*.5+p/2:h/2-b*Math.cos(2*s*Math.PI*y)*.5+p/2;case 1:return l?Math.cos(2*s*Math.PI*y)<0?h:p:Math.cos(2*s*Math.PI*y)<0?p:h;case 2:return l?h/2-b/Math.PI*Math.asin(Math.sin(Math.PI/2+s*Math.PI*2*y))+p/2:h/2+b/Math.PI*Math.asin(Math.sin(Math.PI/2+s*Math.PI*2*y))+p/2;case 3:return l?h-s*y%1*b:s*y%1*b+p;default:throw new Error("Unrecognized operator envelope waveform type: "+d)}case 9:return l?h/4+b*Math.cos(2*s*Math.PI*y)*.25+p/4:.5+h/4-b*Math.cos(2*s*Math.PI*y)*.25-p/4;case 4:return l?Math.max(0,h+1-Math.max(1-p,1-h-i*t*10)):Math.max(1+p,1+h-i*t*10);case 5:const g=.25/Math.sqrt(y*t);return l?h-b*(i<g?i/g:1/(1+(i-g)*y*t)):b*(i<g?i/g:1/(1+(i-g)*y*t))+p;case 10:return l?h-b*Math.pow(2,-y*n):b*Math.pow(2,-y*n)+p;case 14:return l?h-b*+(i<.25/Math.sqrt(y*t)):b*+(i<.25/Math.sqrt(y*t))+p;case 11:let S=.5-.5*Math.cos(s*y);return S=1/(1+n*(y-S/(1.5/y))),S=S>0?S:0,l?h-b*S:b*S+p;case 12:{let e=1-n/(16/y);return e=e>0?e:0,l?h-b*e:b*e+p}case 13:{let e=n/(16/y);return e=e<1?e:1,l?h-b*e:b*e+p}case 15:return l?Math.min(Math.max(p,h-b*Math.sqrt(Math.max(1-y*n/2,0))),h):Math.max(p,b*Math.sqrt(Math.max(1-y*n/2,0))+p);default:throw new Error("Unrecognized operator envelope type.")}}getPitchValue(e,t,i,n=!0){if(t&&t.pitchCount>=1){const s=e.getChord().arpeggiates,a=Math.floor(i.arpTime/h.ticksPerArpeggio),r=t.pitches[s?S(t.pitchCount,e.fastTwoNoteArp,a):0];return n&&t.lastInterval!=r?r+t.lastInterval:r}return 0}computePitchEnvelope(e,t,i=0){let n=0,s=h.maxPitch,a=!1,r=0,o=1;e.isNoiseInstrument&&(s=h.drumCount-1),t<e.envelopeCount&&-2!==t&&(n=e.envelopes[t].pitchEnvelopeStart,s=e.envelopes[t].pitchEnvelopeEnd,a=e.envelopes[t].inverse,r=e.envelopes[t].perEnvelopeLowerBound,o=e.envelopes[t].perEnvelopeUpperBound),n>s&&(n=0,s=e.isNoiseInstrument?h.drumCount-1:h.maxPitch);const l=s-n+1;return a?i<=n?o:i>=s?r:o-(i-n)*(o-r)/l:i<=n?r:i>=s?o:(i-n)*(o-r)/l+r}static getLowpassCutoffDecayVolumeCompensation(e,t=1){return 10==e.type?1.25+.025*t:6==e.type?1+.02*t:1}computeDrumsetEnvelopes(e,t,i,n,s){function a(e,i,n,s){return Ee.computeEnvelope(t,1,e,i,n,0,s,1,!1,0,1,!0,2,2,0,1,0)}let r=a(this.noteSecondsStartUnscaled,this.noteSecondsStartUnscaled,i*n,this.noteSizeStart);if(this.prevSlideStart){r+=(a(this.prevNoteSecondsStartUnscaled,this.prevNoteSecondsStartUnscaled,i*n,this.prevNoteSize)-r)*this.prevSlideRatioStart}if(this.nextSlideStart){r+=(a(0,0,i*n,this.nextNoteSize)-r)*this.nextSlideRatioStart}let o=r;if(0==e.discreteEnvelope){if(o=a(this.noteSecondsEndUnscaled,this.noteSecondsEndUnscaled,i*s,this.noteSizeEnd),this.prevSlideEnd){o+=(a(this.prevNoteSecondsEndUnscaled,this.prevNoteSecondsEndUnscaled,i*s,this.prevNoteSize)-o)*this.prevSlideRatioEnd}if(this.nextSlideEnd){o+=(a(0,0,i*s,this.nextNoteSize)-o)*this.nextSlideRatioEnd}}this.drumsetFilterEnvelopeStart=r,this.drumsetFilterEnvelopeEnd=o}}class Te{constructor(){this.pitches=Array(h.maxChordSize+2).fill(0),this.pitchCount=0,this.chordSize=0,this.drumsetPitch=null,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.freshlyAllocated=!0,this.atNoteStart=!1,this.isOnLastTick=!1,this.passedEndOfNote=!1,this.forceContinueAtStart=!1,this.forceContinueAtEnd=!1,this.noteStartPart=0,this.noteEndPart=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.chipWaveStartOffset=0,this.noiseSample=0,this.noiseSampleA=0,this.noiseSampleB=0,this.stringSustainStart=0,this.stringSustainEnd=0,this.phases=[],this.operatorWaves=[],this.phaseDeltas=[],this.directions=[],this.chipWaveCompletions=[],this.chipWavePrevWavesL=[],this.chipWavePrevWavesR=[],this.chipWaveCompletionsLastWaveL=[],this.chipWaveCompletionsLastWaveR=[],this.phaseDeltaScales=[],this.expression=0,this.expressionDelta=0,this.operatorExpressions=[],this.operatorExpressionDeltas=[],this.prevPitchExpressions=Array(h.maxPitchOrOperatorCount).fill(null),this.prevVibrato=null,this.prevStringDecay=null,this.pulseWidth=0,this.pulseWidthDelta=0,this.decimalOffset=0,this.supersawDynamism=0,this.supersawDynamismDelta=0,this.supersawUnisonDetunes=[],this.supersawShape=0,this.supersawShapeDelta=0,this.supersawDelayLength=0,this.supersawDelayLengthDelta=0,this.supersawDelayLine=null,this.supersawDelayIndex=-1,this.supersawPrevPhaseDelta=null,this.pickedStrings=[],this.noteFiltersL=[],this.noteFiltersR=[],this.noteFilterCount=0,this.initialNoteFilterInputL1=0,this.initialNoteFilterInputR1=0,this.initialNoteFilterInputL2=0,this.initialNoteFilterInputR2=0,this.specialIntervalExpressionMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.stereoVolumeLStart=0,this.stereoVolumeRStart=0,this.stereoVolumeLDelta=0,this.stereoVolumeRDelta=0,this.stereoDelayStart=0,this.stereoDelayEnd=0,this.stereoDelayDelta=0,this.customVolumeStart=0,this.customVolumeEnd=0,this.filterResonanceStart=0,this.filterResonanceDelta=0,this.isFirstOrder=!1,this.envelopeComputer=new Ee,this.reset()}reset(){this.noiseSample=0,this.noiseSampleA=0,this.noiseSampleB=0;for(let e=0;e<h.maxPitchOrOperatorCount;e++)this.phases[e]=0,this.directions[e]=1,this.chipWaveCompletions[e]=0,this.chipWavePrevWavesL[e]=0,this.chipWavePrevWavesR[e]=0,this.chipWaveCompletionsLastWaveL[e]=0,this.chipWaveCompletionsLastWaveR[e]=0,this.operatorWaves[e]=h.operatorWaves[0],this.feedbackOutputs[e]=0,this.prevPitchExpressions[e]=null;for(let e=0;e<this.noteFilterCount;e++)this.noteFiltersL[e].resetOutput(),this.noteFiltersR[e].resetOutput();this.noteFilterCount=0,this.initialNoteFilterInputL1=0,this.initialNoteFilterInputR1=0,this.initialNoteFilterInputL2=0,this.initialNoteFilterInputR2=0,this.liveInputSamplesHeld=0,this.supersawDelayIndex=-1;for(const e of this.pickedStrings)e.reset();this.envelopeComputer.reset(),this.prevVibrato=null,this.prevStringDecay=null,this.supersawPrevPhaseDelta=null,this.drumsetPitch=null}}class ze{constructor(){this.awake=!1,this.computed=!1,this.tonesAddedInThisTick=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0,this.activeTones=new C,this.activeModTones=new C,this.releasedTones=new C,this.liveInputTones=new C,this.type=0,this.synthesizer=null,this.waveL=null,this.waveR=null,this.isStereo=!1,this.isUsingAdvancedLoopControls=!1,this.chipWaveLoopStart=0,this.chipWaveLoopEnd=0,this.chipWaveLoopMode=0,this.chipWavePlayBackwards=!1,this.chipWaveStartOffset=0,this.chipWaveInStereo=!1,this.noisePitchFilterMult=1,this.unison=null,this.unisonVoices=1,this.unisonSpread=0,this.unisonOffset=0,this.unisonExpression=1.4,this.unisonSign=1,this.chord=null,this.effects=0,this.effectOrder=[2,10,11,7,8,9,5,3,4,1,6,0],this.volumeScale=0,this.aliases=!1,this.arpTime=0,this.vibratoTime=0,this.nextVibratoTime=0,this.envelopeTime=[],this.eqFilterVolume=1,this.eqFilterVolumeDelta=0,this.mixVolume=1,this.mixVolumeDelta=0,this.delayInputMult=0,this.delayInputMultDelta=0,this.distortion=0,this.distortionDelta=0,this.distortionDrive=0,this.distortionDriveDelta=0,this.distortionFractionalInputL1=0,this.distortionFractionalInputL2=0,this.distortionFractionalInputL3=0,this.distortionFractionalInputR1=0,this.distortionFractionalInputR2=0,this.distortionFractionalInputR3=0,this.distortionPrevInputL=0,this.distortionPrevInputR=0,this.distortionNextOutputL=0,this.distortionNextOutputR=0,this.bitcrusherPrevInputL=0,this.bitcrusherPrevInputR=0,this.bitcrusherCurrentOutputL=0,this.bitcrusherCurrentOutputR=0,this.bitcrusherPhase=1,this.bitcrusherPhaseDelta=0,this.bitcrusherPhaseDeltaScale=1,this.bitcrusherScale=1,this.bitcrusherScaleScale=1,this.bitcrusherFoldLevel=1,this.bitcrusherFoldLevelScale=1,this.eqFiltersL=[],this.eqFiltersR=[],this.eqFilterCount=0,this.initialEqFilterInputL1=0,this.initialEqFilterInputR1=0,this.initialEqFilterInputL2=0,this.initialEqFilterInputR2=0,this.panningDelayLine=null,this.panningDelayPos=0,this.panningVolumeL=0,this.panningVolumeR=0,this.panningVolumeDeltaL=0,this.panningVolumeDeltaR=0,this.panningOffsetL=0,this.panningOffsetR=0,this.panningOffsetDeltaL=0,this.panningOffsetDeltaR=0,this.chorusDelayLineL=null,this.chorusDelayLineR=null,this.chorusDelayLineDirty=!1,this.chorusDelayPos=0,this.chorusPhase=0,this.chorusVoiceMult=0,this.chorusVoiceMultDelta=0,this.chorusCombinedMult=0,this.chorusCombinedMultDelta=0,this.echoDelayLineL=null,this.echoDelayLineR=null,this.echoDelayLineDirty=!1,this.echoDelayPos=0,this.echoDelayOffsetStart=0,this.echoDelayOffsetEnd=null,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=0,this.echoMult=0,this.echoMultDelta=0,this.echoShelfA1=0,this.echoShelfB0=0,this.echoShelfB1=0,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbDelayLine=null,this.reverbDelayLineDirty=!1,this.reverbDelayPos=0,this.reverbMult=0,this.reverbMultDelta=0,this.reverbShelfA1=0,this.reverbShelfB0=0,this.reverbShelfB1=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.spectrumWave=new ye,this.harmonicsWave=new ge,this.additiveWave=new we,this.drumsetSpectrumWaves=[],this.envelopeComputer=new Ee;for(let e=0;e<h.drumCount;e++)this.drumsetSpectrumWaves[e]=new ye}allocateNecessaryBuffers(e,t,i){if(T(t.effects)&&(null==this.panningDelayLine||this.panningDelayLine.length<e.panningDelayBufferSize)&&(this.panningDelayLine=new Float32Array(e.panningDelayBufferSize)),z(t.effects)&&((null==this.chorusDelayLineL||this.chorusDelayLineL.length<e.chorusDelayBufferSize)&&(this.chorusDelayLineL=new Float32Array(e.chorusDelayBufferSize)),(null==this.chorusDelayLineR||this.chorusDelayLineR.length<e.chorusDelayBufferSize)&&(this.chorusDelayLineR=new Float32Array(e.chorusDelayBufferSize))),D(t.effects)){const e=Math.max(h.echoDelayRange>>1,t.echoDelay+1),n=2*He.fittingPowerOfTwo(e*h.echoDelayStepTicks*i);if(null==this.echoDelayLineL||null==this.echoDelayLineR)this.echoDelayLineL=new Float32Array(n),this.echoDelayLineR=new Float32Array(n);else if(this.echoDelayLineL.length<n||this.echoDelayLineR.length<n){const e=new Float32Array(n),t=new Float32Array(n),i=this.echoDelayLineL.length-1;for(let n=0;n<this.echoDelayLineL.length;n++)e[n]=this.echoDelayLineL[this.echoDelayPos+n&i],t[n]=this.echoDelayLineL[this.echoDelayPos+n&i];this.echoDelayPos=this.echoDelayLineL.length,this.echoDelayLineL=e,this.echoDelayLineR=t}}H(t.effects)&&null==this.reverbDelayLine&&(this.reverbDelayLine=new Float32Array(h.reverbDelayBufferSize))}deactivate(){this.bitcrusherPrevInputL=0,this.bitcrusherPrevInputR=0,this.bitcrusherCurrentOutputL=0,this.bitcrusherCurrentOutputR=0,this.bitcrusherPhase=1;for(let e=0;e<this.eqFilterCount;e++)this.eqFiltersL[e].resetOutput(),this.eqFiltersR[e].resetOutput();if(this.eqFilterCount=0,this.initialEqFilterInputL1=0,this.initialEqFilterInputR1=0,this.initialEqFilterInputL2=0,this.initialEqFilterInputR2=0,this.distortionFractionalInputL1=0,this.distortionFractionalInputL2=0,this.distortionFractionalInputL3=0,this.distortionFractionalInputR1=0,this.distortionFractionalInputR2=0,this.distortionFractionalInputR3=0,this.distortionPrevInputL=0,this.distortionPrevInputR=0,this.distortionNextOutputL=0,this.distortionNextOutputR=0,this.panningDelayPos=0,null!=this.panningDelayLine)for(let e=0;e<this.panningDelayLine.length;e++)this.panningDelayLine[e]=0;this.echoDelayOffsetEnd=null,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.volumeScale=1,this.aliases=!1,this.awake=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0}resetAllEffects(){this.deactivate(),this.vibratoTime=0,this.nextVibratoTime=0,this.arpTime=0;for(let e=0;e<h.maxEnvelopeCount+1;e++)this.envelopeTime[e]=0;if(this.envelopeComputer.reset(),this.chorusDelayLineDirty){for(let e=0;e<this.chorusDelayLineL.length;e++)this.chorusDelayLineL[e]=0;for(let e=0;e<this.chorusDelayLineR.length;e++)this.chorusDelayLineR[e]=0}if(this.echoDelayLineDirty){for(let e=0;e<this.echoDelayLineL.length;e++)this.echoDelayLineL[e]=0;for(let e=0;e<this.echoDelayLineR.length;e++)this.echoDelayLineR[e]=0}if(this.reverbDelayLineDirty)for(let e=0;e<this.reverbDelayLine.length;e++)this.reverbDelayLine[e]=0;this.chorusPhase=0}compute(e,t,i,n,s,a,r){this.computed=!0,this.type=t.type,this.synthesizer=He.getInstrumentSynthFunction(t),this.unison=h.unisons[t.unison],this.chord=t.getChord(),this.noisePitchFilterMult=h.chipNoises[t.chipNoise].pitchFilterMult,this.effects=t.effects,this.effectOrder=t.effectOrder,this.aliases=t.aliases,this.volumeScale=1,this.allocateNecessaryBuffers(e,t,i);const o=e.samplesPerSecond;this.updateWaves(t,o);const l=e.getTicksIntoBar(),p=i/e.samplesPerSecond,u=e.getCurrentPart(),c=[];for(let e=0;e<h.maxEnvelopeCount;e++)c[e]=0;let f=h.arpSpeedScale[t.envelopeSpeed];e.isModActive(h.modulators.dictionary["envelope speed"].index,a,r)&&(f=Math.max(0,Math.min(h.arpSpeedScale.length-1,e.getModValue(h.modulators.dictionary["envelope speed"].index,a,r,!1))),f=Number.isInteger(f)?h.arpSpeedScale[f]:(1-f%1)*h.arpSpeedScale[Math.floor(f)]+f%1*h.arpSpeedScale[Math.ceil(f)]);for(let i=0;i<t.envelopeCount;i++){let n=t.envelopes[i].perEnvelopeSpeed;e.isModActive(h.modulators.dictionary["individual envelope speed"].index,a,r)&&null!=t.envelopes[i].tempEnvelopeSpeed&&(n=t.envelopes[i].tempEnvelopeSpeed),c[i]=f*n}this.envelopeComputer.computeEnvelopes(t,u,this.envelopeTime,l,p,s,c,this,e);const d=this.envelopeComputer.envelopeStarts,m=this.envelopeComputer.envelopeEnds,v=P(this.effects),y=E(this.effects),b=T(this.effects),g=z(this.effects),S=D(this.effects),w=H(this.effects),M=I(this.effects);if(v){let i=t.distortion,s=t.distortion;e.isModActive(h.modulators.dictionary.distortion.index,a,r)&&(i=e.getModValue(h.modulators.dictionary.distortion.index,a,r,!1),s=e.getModValue(h.modulators.dictionary.distortion.index,a,r,!0));const o=Math.min(1,d[43]*i/(h.distortionRange-1)),l=Math.min(1,m[43]*s/(h.distortionRange-1)),p=Math.pow(1-.895*(Math.pow(20,o)-1)/19,2),u=Math.pow(1-.895*(Math.pow(20,l)-1)/19,2),c=(1+2*o)/h.distortionBaseVolume,f=(1+2*l)/h.distortionBaseVolume;this.distortion=p,this.distortionDelta=(u-p)/n,this.distortionDrive=c,this.distortionDriveDelta=(f-c)/n}if(y){let i=t.bitcrusherFreq*Math.sqrt(d[45]),s=t.bitcrusherFreq*Math.sqrt(m[45]);e.isModActive(h.modulators.dictionary["freq crush"].index,a,r)&&(i=e.getModValue(h.modulators.dictionary["freq crush"].index,a,r,!1)*Math.sqrt(d[45]),s=e.getModValue(h.modulators.dictionary["freq crush"].index,a,r,!0)*Math.sqrt(m[45]));let l=t.bitcrusherQuantization*Math.sqrt(d[44]),p=t.bitcrusherQuantization*Math.sqrt(m[44]);e.isModActive(h.modulators.dictionary["bit crush"].index,a,r)&&(l=e.getModValue(h.modulators.dictionary["bit crush"].index,a,r,!1)*Math.sqrt(d[44]),p=e.getModValue(h.modulators.dictionary["bit crush"].index,a,r,!0)*Math.sqrt(m[44]));const u=h.keys[e.song.key].basePitch+h.pitchesPerOctave*e.song.octave,c=xe.frequencyFromPitch(u+60)*Math.pow(2,(h.bitcrusherFreqRange-1-i)*h.bitcrusherOctaveStep),f=xe.frequencyFromPitch(u+60)*Math.pow(2,(h.bitcrusherFreqRange-1-s)*h.bitcrusherOctaveStep),v=Math.min(1,c/o),y=Math.min(1,f/o);this.bitcrusherPhaseDelta=v,this.bitcrusherPhaseDeltaScale=Math.pow(y/v,1/n);const b=2*h.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(h.bitcrusherQuantizationRange-1-l))),g=2*h.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(h.bitcrusherQuantizationRange-1-p)));this.bitcrusherScale=b,this.bitcrusherScaleScale=Math.pow(g/b,1/n);const S=2*h.bitcrusherBaseVolume*Math.pow(1.5,h.bitcrusherQuantizationRange-1-l),w=2*h.bitcrusherBaseVolume*Math.pow(1.5,h.bitcrusherQuantizationRange-1-p);this.bitcrusherFoldLevel=S,this.bitcrusherFoldLevelScale=Math.pow(w/S,1/n)}let k=1;if(t.eqFilterType&&M){const i=t.eqFilter;null==t.eqSubFilters[1]&&(t.eqSubFilters[1]=new ke);const s=t.eqSubFilters[1];let l,p=t.eqFilterSimpleCut,u=t.eqFilterSimplePeak,c=t.eqFilterSimpleCut,f=t.eqFilterSimplePeak,d=!1;if(e.isModActive(h.modulators.dictionary["eq filt cut"].index,a,r)&&(p=e.getModValue(h.modulators.dictionary["eq filt cut"].index,a,r,!1),c=e.getModValue(h.modulators.dictionary["eq filt cut"].index,a,r,!0),d=!0),e.isModActive(h.modulators.dictionary["eq filt peak"].index,a,r)&&(u=e.getModValue(h.modulators.dictionary["eq filt peak"].index,a,r,!1),f=e.getModValue(h.modulators.dictionary["eq filt peak"].index,a,r,!0),d=!0),d){i.convertLegacySettingsForSynth(p,u),s.convertLegacySettingsForSynth(c,f),l=i.controlPoints[0];let e=s.controlPoints[0];l.toCoefficients(He.tempFilterStartCoefficients,o,1,1),e.toCoefficients(He.tempFilterEndCoefficients,o,1,1),this.eqFiltersL.length<1&&(this.eqFiltersL[0]=new W),this.eqFiltersR.length<1&&(this.eqFiltersR[0]=new W),this.eqFiltersL[0].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/n,0==l.type),this.eqFiltersR[0].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/n,0==l.type)}else i.convertLegacySettingsForSynth(p,u,!0),l=i.controlPoints[0],l.toCoefficients(He.tempFilterStartCoefficients,o,1,1),this.eqFiltersL.length<1&&(this.eqFiltersL[0]=new W),this.eqFiltersR.length<1&&(this.eqFiltersR[0]=new W),this.eqFiltersL[0].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterStartCoefficients,1/n,0==l.type),this.eqFiltersR[0].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterStartCoefficients,1/n,0==l.type);k*=l.getVolumeCompensationMult(),this.eqFilterCount=1,k=Math.min(3,k)}else{const e=null!=t.tmpEqFilterStart?t.tmpEqFilterStart:t.eqFilter;for(let i=0;i<e.controlPointCount;i++){let s=e.controlPoints[i],a=null!=t.tmpEqFilterEnd&&null!=t.tmpEqFilterEnd.controlPoints[i]?t.tmpEqFilterEnd.controlPoints[i]:e.controlPoints[i];s.type!=a.type&&(s=a),s.toCoefficients(He.tempFilterStartCoefficients,o,1,1),a.toCoefficients(He.tempFilterEndCoefficients,o,1,1),this.eqFiltersL.length<=i&&(this.eqFiltersL[i]=new W),this.eqFiltersR.length<=i&&(this.eqFiltersR[i]=new W),this.eqFiltersL[i].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/n,0==s.type),this.eqFiltersR[i].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/n,0==s.type),k*=s.getVolumeCompensationMult()}this.eqFilterCount=e.controlPointCount,k=Math.min(3,k)}const F=He.instrumentVolumeToVolumeMult(t.volume);this.mixVolume=F*d[1];let x=F*m[1];if(e.isModActive(h.modulators.dictionary["post volume"].index,a,r)){const t=e.getModValue(h.modulators.dictionary["post volume"].index,a,r,!1),i=e.getModValue(h.modulators.dictionary["post volume"].index,a,r,!0);this.mixVolume*=t<=0?(t+h.volumeRange/2)/(h.volumeRange/2):He.instrumentVolumeToVolumeMult(t),x*=i<=0?(i+h.volumeRange/2)/(h.volumeRange/2):He.instrumentVolumeToVolumeMult(i)}e.isModActive(h.modulators.dictionary["song volume"].index)&&(this.mixVolume*=e.getModValue(h.modulators.dictionary["song volume"].index,void 0,void 0,!1)/100,x*=e.getModValue(h.modulators.dictionary["song volume"].index,void 0,void 0,!0)/100),this.mixVolumeDelta=(x-this.mixVolume)/n;let q=k,O=k,R=1,L=1;if(b){const i=2*d[42]-1,s=2*m[42]-1;let l=t.pan,p=t.pan;e.isModActive(h.modulators.dictionary.pan.index,a,r)&&(l=e.getModValue(h.modulators.dictionary.pan.index,a,r,!1),p=e.getModValue(h.modulators.dictionary.pan.index,a,r,!0));let u=Math.max(-1,Math.min(1,(l-h.panCenter)/h.panCenter*i)),c=Math.max(-1,Math.min(1,(p-h.panCenter)/h.panCenter*s));const f=1.414*Math.cos((1+u)*Math.PI*.25),v=1.414*Math.cos((1-u)*Math.PI*.25),y=1.414*Math.cos((1+c)*Math.PI*.25),b=1.414*Math.cos((1-c)*Math.PI*.25),g=o*h.panDelaySecondsMax;let S=t.panDelay,w=t.panDelay;e.isModActive(h.modulators.dictionary["pan delay"].index,a,r)&&(S=e.getModValue(h.modulators.dictionary["pan delay"].index,a,r,!1),w=e.getModValue(h.modulators.dictionary["pan delay"].index,a,r,!0));const M=u*S*g/10,k=c*w*g/10,F=Math.max(0,M),x=Math.max(0,-M),q=Math.max(0,k),I=Math.max(0,-k);this.panningVolumeL=f,this.panningVolumeR=v,this.panningVolumeDeltaL=(y-f)/n,this.panningVolumeDeltaR=(b-v)/n,this.panningOffsetL=this.panningDelayPos-F+e.panningDelayBufferSize,this.panningOffsetR=this.panningDelayPos-x+e.panningDelayBufferSize,this.panningOffsetDeltaL=(q-F)/n,this.panningOffsetDeltaR=(I-x)/n}if(g){const i=d[46],s=m[46];let o=t.chorus,l=t.chorus;e.isModActive(h.modulators.dictionary.chorus.index,a,r)&&(o=e.getModValue(h.modulators.dictionary.chorus.index,a,r,!1),l=e.getModValue(h.modulators.dictionary.chorus.index,a,r,!0));let p=Math.min(1,i*o/(h.chorusRange-1)),u=Math.min(1,s*l/(h.chorusRange-1));p=.6*p+.4*Math.pow(p,6),u=.6*u+.4*Math.pow(u,6);const c=1/Math.sqrt(3*p*p+1),f=1/Math.sqrt(3*u*u+1);this.chorusVoiceMult=p,this.chorusVoiceMultDelta=(u-p)/n,this.chorusCombinedMult=c,this.chorusCombinedMultDelta=(f-c)/n}let G=0,C=0;if(S){const s=d[47],l=m[47];let p=t.echoSustain,u=t.echoSustain;e.isModActive(h.modulators.dictionary.echo.index,a,r)&&(p=Math.max(0,e.getModValue(h.modulators.dictionary.echo.index,a,r,!1)),u=Math.max(0,e.getModValue(h.modulators.dictionary.echo.index,a,r,!0)));const c=.9*Math.min(1,Math.pow(s*p/h.echoSustainRange,1.1)),f=.9*Math.min(1,Math.pow(l*u/h.echoSustainRange,1.1));this.echoMult=c,this.echoMultDelta=Math.max(0,(f-c)/n),G=Math.max(c,f);let v=t.echoDelay,y=t.echoDelay,b=!1;e.isModActive(h.modulators.dictionary["echo delay"].index,a,r)&&(v=e.getModValue(h.modulators.dictionary["echo delay"].index,a,r,!1),y=e.getModValue(h.modulators.dictionary["echo delay"].index,a,r,!0),b=!0);const g=b?(v+1)*h.echoDelayStepTicks*i:Math.round((v+1)*h.echoDelayStepTicks*i),S=b?(y+1)*h.echoDelayStepTicks*i:Math.round((y+1)*h.echoDelayStepTicks*i);null==this.echoDelayOffsetEnd||b?this.echoDelayOffsetStart=g:this.echoDelayOffsetStart=this.echoDelayOffsetEnd,this.echoDelayOffsetEnd=S,C=.5*(this.echoDelayOffsetStart+this.echoDelayOffsetEnd)/o,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=1/n;const w=2*Math.PI*h.echoShelfHz/e.samplesPerSecond;He.tempFilterStartCoefficients.highShelf1stOrder(w,h.echoShelfGain),this.echoShelfA1=He.tempFilterStartCoefficients.a[1],this.echoShelfB0=He.tempFilterStartCoefficients.b[0],this.echoShelfB1=He.tempFilterStartCoefficients.b[1]}let A=0;if(w){const i=d[48],s=m[48];let o=t.reverb,l=t.reverb;e.isModActive(h.modulators.dictionary.reverb.index,a,r)&&(o=e.getModValue(h.modulators.dictionary.reverb.index,a,r,!1),l=e.getModValue(h.modulators.dictionary.reverb.index,a,r,!0)),e.isModActive(h.modulators.dictionary["song reverb"].index,a,r)&&(o*=(e.getModValue(h.modulators.dictionary["song reverb"].index,void 0,void 0,!1)-h.modulators.dictionary["song reverb"].convertRealFactor)/h.reverbRange,l*=(e.getModValue(h.modulators.dictionary["song reverb"].index,void 0,void 0,!0)-h.modulators.dictionary["song reverb"].convertRealFactor)/h.reverbRange);const p=.425*Math.min(1,Math.pow(i*o/h.reverbRange,.667)),u=.425*Math.min(1,Math.pow(s*l/h.reverbRange,.667));this.reverbMult=p,this.reverbMultDelta=(u-p)/n,A=Math.max(p,u);const c=2*Math.PI*h.reverbShelfHz/e.samplesPerSecond;He.tempFilterStartCoefficients.highShelf1stOrder(c,h.reverbShelfGain),this.reverbShelfA1=He.tempFilterStartCoefficients.a[1],this.reverbShelfB0=He.tempFilterStartCoefficients.b[0],this.reverbShelfB1=He.tempFilterStartCoefficients.b[1]}if(this.tonesAddedInThisTick)this.attentuationProgress=0,this.flushedSamples=0,this.flushingDelayLines=!1;else if(this.flushingDelayLines){q=0,O=0,R=0,L=0;let t=0;g&&(t+=e.chorusDelayBufferSize),S&&(t+=this.echoDelayLineL.length),w&&(t+=h.reverbDelayBufferSize),this.flushedSamples+=n,this.flushedSamples>=t&&(this.deactivateAfterThisTick=!0)}else{0==this.attentuationProgress||(q=0),O=0;const e=1/256,t=-Math.log2(e);let n=0;if(g&&(n+=h.chorusMaxDelay),S){const e=Math.pow(G,1/C);n+=-1/Math.log2(e)*t}if(w){const e=2*A,i=h.reverbDelayBufferSize/4/o,s=Math.pow(e,1/i);n+=-1/Math.log2(s)*t}const s=i/o/n,a=this.attentuationProgress+s;a>=1&&(L=0),this.attentuationProgress=a,this.attentuationProgress>=1&&(this.flushingDelayLines=!0)}this.eqFilterVolume=q,this.eqFilterVolumeDelta=(O-q)/n,this.delayInputMult=R,this.delayInputMultDelta=(L-R)/n,this.envelopeComputer.clearEnvelopes()}updateWaves(e,t){if(this.volumeScale=1,0==e.type)this.waveL=this.aliases?h.rawChipWaves[e.chipWave].samples:h.chipWaves[e.chipWave].samples,this.waveR=this.aliases?h.rawChipWaves[e.chipWave].samplesR||h.rawChipWaves[e.chipWave].samples:h.chipWaves[e.chipWave].samplesR||h.chipWaves[e.chipWave].samples,this.isUsingAdvancedLoopControls=e.isUsingAdvancedLoopControls,this.chipWaveLoopStart=e.chipWaveLoopStart,this.chipWaveLoopEnd=e.chipWaveLoopEnd,this.chipWaveLoopMode=e.chipWaveLoopMode,this.chipWavePlayBackwards=e.chipWavePlayBackwards,this.chipWaveStartOffset=e.chipWaveStartOffset,this.chipWaveInStereo=e.chipWaveInStereo,this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(6==e.type)this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(9==e.type)this.waveL=this.aliases?e.customChipWave:e.customChipWaveIntegral,this.waveR=this.aliases?e.customChipWave:e.customChipWaveIntegral,this.volumeScale=.05,this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(2==e.type)this.waveL=v(e.chipNoise,G,R),this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(5==e.type)this.waveL=this.harmonicsWave.getCustomWave(e.harmonicsWave,e.type),this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(7==e.type)this.waveL=this.harmonicsWave.getCustomWave(e.harmonicsWave,e.type),this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(3==e.type)this.waveL=this.spectrumWave.getCustomWave(e.spectrumWave,8),this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(4==e.type){for(let t=0;t<h.drumCount;t++)this.drumsetSpectrumWaves[t].getCustomWave(e.drumsetSpectrumWaves[t],ze.ee(t));this.waveL=null}else 12==e.type?this.waveL=this.additiveWave.getCustomWave(e.additiveWave):this.waveL=null}getDrumsetWave(e){if(4==this.type)return this.drumsetSpectrumWaves[e].wave;throw new Error("Unhandled instrument type in getDrumsetWave")}static drumsetIndexReferenceDelta(e){return xe.frequencyFromPitch(h.spectrumBasePitch+6*e)/44100}static ee(e){return 15+Math.log2(ze.drumsetIndexReferenceDelta(e))}}class De{constructor(){this.instruments=[],this.muted=!1,this.singleSeamlessInstrument=null}}class He{syncSongState(){const e=this.song.getChannelCount();for(let t=this.channels.length;t<e;t++)this.channels[t]=new De;this.channels.length=e;for(let t=0;t<e;t++){const e=this.song.channels[t],i=this.channels[t];for(let t=i.instruments.length;t<e.instruments.length;t++)i.instruments[t]=new ze;if(i.instruments.length=e.instruments.length,i.muted!=e.muted&&(i.muted=e.muted,i.muted))for(const e of i.instruments)e.resetAllEffects()}}initModFilters(e){if(null!=e){e.tmpEqFilterStart=e.eqFilter,e.tmpEqFilterEnd=null;for(let t=0;t<e.getChannelCount();t++)for(let i=0;i<e.channels[t].instruments.length;i++){const n=e.channels[t].instruments[i];n.tmpEqFilterStart=n.eqFilter,n.tmpEqFilterEnd=null,n.tmpNoteFilterStart=n.noteFilter,n.tmpNoteFilterEnd=null}}}warmUpSynthesizer(e){if(null!=e){this.syncSongState();const t=this.getSamplesPerTick();for(let i=0;i<e.getChannelCount();i++)for(let n=0;n<e.channels[i].instruments.length;n++){const s=e.channels[i].instruments[n],a=this.channels[i].instruments[n];He.getInstrumentSynthFunction(s),a.vibratoTime=0,a.nextVibratoTime=0;for(let e=0;e<h.maxEnvelopeCount+1;e++)a.envelopeTime[e]=0;a.arpTime=0,a.updateWaves(s,this.samplesPerSecond),a.allocateNecessaryBuffers(this,s,t)}}var t=new Float32Array(1);this.isPlayingSong=!0,this.synthesize(t,t,1,!0),this.isPlayingSong=!1}computeLatestModValues(){if(null!=this.song&&this.song.modChannelCount>0){let e=[],t=[];this.modValues=[],this.nextModValues=[],this.modInsValues=[],this.nextModInsValues=[],this.heldMods=[];for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++){t[e]=[],this.modInsValues[e]=[],this.nextModInsValues[e]=[];for(let i=0;i<this.song.channels[e].instruments.length;i++)this.modInsValues[e][i]=[],this.nextModInsValues[e][i]=[],t[e][i]=[]}let i=this.beat*h.partsPerBeat+this.part;for(let n=this.song.pitchChannelCount+this.song.noiseChannelCount;n<this.song.getChannelCount();n++)if(!this.song.channels[n].muted){let s;for(let a=this.bar;a>=0;a--)if(s=this.song.getPattern(n,a),null!=s){let r=s.instruments[0],o=this.song.channels[n].instruments[r],l=[],p=[],u=a==this.bar?i:this.findPartsInBar(a);for(const e of s.notes)if(e.start<=u&&(null==l[h.modCount-1-e.pitches[0]]||e.end>l[h.modCount-1-e.pitches[0]]))if(e.start==u&&(l[h.modCount-1-e.pitches[0]]=e.start,p[h.modCount-1-e.pitches[0]]=e.pins[0].size),e.end<=u)l[h.modCount-1-e.pitches[0]]=e.end,p[h.modCount-1-e.pitches[0]]=e.pins[e.pins.length-1].size;else{l[h.modCount-1-e.pitches[0]]=u;for(let t=0;t<e.pins.length;t++)if(e.pins[t].time+e.start>u){const i=e.pins[t].time-e.pins[t-1].time,n=u-e.start-e.pins[t-1].time,s=e.pins[t].size-e.pins[t-1].size;p[h.modCount-1-e.pitches[0]]=Math.round(e.pins[t-1].size+s*n/i),t=e.pins.length}}for(let i=0;i<h.modCount;i++)if(null!=l[i])if(h.modulators[o.modulators[i]].forSong)(null==e[o.modulators[i]]||a*h.partsPerBeat*this.song.beatsPerBar+l[i]>e[o.modulators[i]])&&(this.setModValue(p[i],p[i],o.modChannels[i],o.modInstruments[i],o.modulators[i]),e[o.modulators[i]]=a*h.partsPerBeat*this.song.beatsPerBar+l[i]);else{let e=[];if(o.modInstruments[i]==this.song.channels[o.modChannels[i]].instruments.length)for(let t=0;t<this.song.channels[o.modChannels[i]].instruments.length;t++)e.push(t);else if(o.modInstruments[i]>this.song.channels[o.modChannels[i]].instruments.length){const t=this.song.getPattern(o.modChannels[i],a);null!=t&&(e=t.instruments)}else e.push(o.modInstruments[i]);for(let n=0;n<e.length;n++){const s=o.modulators[i]==h.modulators.dictionary["eq filter"].index,r=o.modulators[i]==h.modulators.dictionary["note filter"].index,u=o.modulators[i]==h.modulators.dictionary["song eq"].index;let c=o.modulators[i];if(s||u?c=h.modulators.length+(0|o.modFilterTypes[i]):r&&(c=h.modulators.length+1+2*h.filterMaxPoints+(0|o.modFilterTypes[i])),null==t[o.modChannels[i]][e[n]][c]||a*h.partsPerBeat*this.song.beatsPerBar+l[i]>t[o.modChannels[i]][e[n]][c]){if(u){let e=this.song;if(0==o.modFilterTypes[i])e.tmpEqFilterStart=e.eqSubFilters[p[i]];else{for(let t=0;t<h.filterMorphCount;t++)null!=e.tmpEqFilterStart&&e.tmpEqFilterStart==e.eqSubFilters[t]&&(e.tmpEqFilterStart=new ke,e.tmpEqFilterStart.fromJsonObject(e.eqSubFilters[t].toJsonObject()),t=h.filterMorphCount);null!=e.tmpEqFilterStart&&Math.floor((o.modFilterTypes[i]-1)/2)<e.tmpEqFilterStart.controlPointCount&&(o.modFilterTypes[i]%2?e.tmpEqFilterStart.controlPoints[Math.floor((o.modFilterTypes[i]-1)/2)].freq=p[i]:e.tmpEqFilterStart.controlPoints[Math.floor((o.modFilterTypes[i]-1)/2)].gain=p[i])}e.tmpEqFilterEnd=e.tmpEqFilterStart}else if(s){let t=this.song.channels[o.modChannels[i]].instruments[e[n]];if(0==o.modFilterTypes[i])t.tmpEqFilterStart=t.eqSubFilters[p[i]];else{for(let e=0;e<h.filterMorphCount;e++)null!=t.tmpEqFilterStart&&t.tmpEqFilterStart==t.eqSubFilters[e]&&(t.tmpEqFilterStart=new ke,t.tmpEqFilterStart.fromJsonObject(t.eqSubFilters[e].toJsonObject()),e=h.filterMorphCount);null!=t.tmpEqFilterStart&&Math.floor((o.modFilterTypes[i]-1)/2)<t.tmpEqFilterStart.controlPointCount&&(o.modFilterTypes[i]%2?t.tmpEqFilterStart.controlPoints[Math.floor((o.modFilterTypes[i]-1)/2)].freq=p[i]:t.tmpEqFilterStart.controlPoints[Math.floor((o.modFilterTypes[i]-1)/2)].gain=p[i])}t.tmpEqFilterEnd=t.tmpEqFilterStart}else if(r){let t=this.song.channels[o.modChannels[i]].instruments[e[n]];if(0==o.modFilterTypes[i])t.tmpNoteFilterStart=t.noteSubFilters[p[i]];else{for(let e=0;e<h.filterMorphCount;e++)null!=t.tmpNoteFilterStart&&t.tmpNoteFilterStart==t.noteSubFilters[e]&&(t.tmpNoteFilterStart=new ke,t.tmpNoteFilterStart.fromJsonObject(t.noteSubFilters[e].toJsonObject()),e=h.filterMorphCount);null!=t.tmpNoteFilterStart&&Math.floor((o.modFilterTypes[i]-1)/2)<t.tmpNoteFilterStart.controlPointCount&&(o.modFilterTypes[i]%2?t.tmpNoteFilterStart.controlPoints[Math.floor((o.modFilterTypes[i]-1)/2)].freq=p[i]:t.tmpNoteFilterStart.controlPoints[Math.floor((o.modFilterTypes[i]-1)/2)].gain=p[i])}t.tmpNoteFilterEnd=t.tmpNoteFilterStart}else this.setModValue(p[i],p[i],o.modChannels[i],e[n],c);t[o.modChannels[i]][e[n]][c]=a*h.partsPerBeat*this.song.beatsPerBar+l[i]}}}}}}}determineInvalidModulators(e){if(null!=this.song)for(let t=0;t<h.modCount;t++){if(e.invalidModulators[t]=!0,-1==e.modChannels[t]){0!=e.modulators[t]&&(e.invalidModulators[t]=!1);continue}const i=this.song.channels[e.modChannels[t]];if(null==i)continue;let n=[];n=e.modInstruments[t]>=i.instruments.length?i.instruments:[i.instruments[e.modInstruments[t]]];for(let i=0;i<n.length;i++){const s=n[i];if(null==s)continue;const a=h.modulators[e.modulators[t]].name;12!=h.modulators[e.modulators[t]].associatedEffect&&!(s.effects&1<<h.modulators[e.modulators[t]].associatedEffect)||1!=s.type&&11!=s.type&&("fm slider 1"==a||"fm slider 2"==a||"fm slider 3"==a||"fm slider 4"==a||"fm feedback"==a)||11!=s.type&&("fm slider 5"==a||"fm slider 6"==a)||6!=s.type&&8!=s.type&&("pulse width"==a||"decimal offset"==a)||8!=s.type&&("dynamism"==a||"spread"==a||"saw shape"==a)||!s.getChord().arpeggiates&&("arp speed"==a||"reset arp"==a)||s.eqFilterType&&"eq filter"==a||!s.eqFilterType&&("eq filt cut"==a||"eq filt peak"==a)||"eq filter"==a&&Math.floor((e.modFilterTypes[t]+1)/2)>s.getLargestControlPointCount(!1)||s.noteFilterType&&"note filter"==a||!s.noteFilterType&&("note filt cut"==a||"note filt peak"==a)||"note filter"==a&&Math.floor((e.modFilterTypes[t]+1)/2)>s.getLargestControlPointCount(!0)||(e.invalidModulators[t]=!1,i=n.length)}}}static operatorAmplitudeCurve(e){return(Math.pow(16,e/15)-1)/15}get playing(){return this.isPlayingSong}get recording(){return this.isRecording}get playhead(){return this.playheadInternal}set playhead(e){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,e));let t=this.playheadInternal;this.bar=Math.floor(t),t=this.song.beatsPerBar*(t-this.bar),this.beat=Math.floor(t),t=h.partsPerBeat*(t-this.beat),this.part=Math.floor(t),t=h.ticksPerPart*(t-this.part),this.tick=Math.floor(t),this.tickSampleCountdown=0,this.isAtStartOfTick=!0,this.prevBar=null}}getSamplesPerBar(){if(null==this.song)throw new Error;return this.getSamplesPerTick()*h.ticksPerPart*h.partsPerBeat*this.song.beatsPerBar}getTicksIntoBar(){return(this.beat*h.partsPerBeat+this.part)*h.ticksPerPart+this.tick}getCurrentPart(){return this.beat*h.partsPerBeat+this.part}findPartsInBar(e){if(null==this.song)return 0;let t=h.partsPerBeat*this.song.beatsPerBar;for(let i=this.song.pitchChannelCount+this.song.noiseChannelCount;i<this.song.getChannelCount();i++){let n=this.song.getPattern(i,e);if(null!=n){let e=this.song.channels[i].instruments[n.instruments[0]];for(let i=0;i<h.modCount;i++)if(e.modulators[i]==h.modulators.dictionary["next bar"].index)for(const e of n.notes)e.pitches[0]==h.modCount-1-i&&t>e.start&&(t=e.start)}}return t}getTotalSamples(e,t,i){if(null==this.song)return-1;let n=e?0:this.song.loopStart,s=t?this.song.barCount:this.song.loopStart+this.song.loopLength,a=!1,r=!1,o=this.song.tempo;for(let e=this.song.getChannelCount()-1;e>=this.song.pitchChannelCount+this.song.noiseChannelCount;e--)for(let t=n;t<s;t++){let i=this.song.getPattern(e,t);if(null!=i){let t=this.song.channels[e].instruments[i.instruments[0]];for(let e=0;e<h.modCount;e++)t.modulators[e]==h.modulators.dictionary.tempo.index&&(a=!0),t.modulators[e]==h.modulators.dictionary["next bar"].index&&(r=!0)}}if(n>0){let e=null,t=0;for(let i=n-1;i>=0;i--){for(let n=this.song.getChannelCount()-1;n>=this.song.pitchChannelCount+this.song.noiseChannelCount;n--){let s=this.song.getPattern(n,i);if(null!=s){let a=s.instruments[0],r=this.song.channels[n].instruments[a],o=this.findPartsInBar(i);for(const i of s.notes)if(r.modulators[h.modCount-1-i.pitches[0]]==h.modulators.dictionary.tempo.index&&i.start<o&&(null==e||i.end>e))if(i.end<=o)e=i.end,t=i.pins[i.pins.length-1].size;else{e=o;for(let e=0;e<i.pins.length;e++)if(i.pins[e].time+i.start>o){const n=i.pins[e].time-i.pins[e-1].time,s=o-i.start-i.pins[e-1].time,a=i.pins[e].size-i.pins[e-1].size;t=Math.round(i.pins[e-1].size+a*s/n),e=i.pins.length}}}}null!=e&&(o=t+h.modulators.dictionary.tempo.convertRealFactor,i=-1)}}if(a||r){let e=n,t=!1,l=0;for(;!t;){let n=h.partsPerBeat*this.song.beatsPerBar,p=0;if(r&&(n=this.findPartsInBar(e)),a){let t=!1;for(let i=this.song.getChannelCount()-1;i>=this.song.pitchChannelCount+this.song.noiseChannelCount;i--)if(0==t){let s=this.song.getPattern(i,e);if(null!=s){let e=this.song.channels[i].instruments[s.instruments[0]];for(let i=0;i<h.modCount;i++)if(0==t&&e.modulators[i]==h.modulators.dictionary.tempo.index&&s.notes.find((e=>e.pitches[0]==h.modCount-1-i))){t=!0,s.notes.sort((function(e,t){return e.start==t.start?e.pitches[0]-t.pitches[0]:e.start-t.start}));for(const e of s.notes)if(e.pitches[0]==h.modCount-1-i&&(l+=Math.min(n-p,e.start-p)*h.ticksPerPart*this.getSamplesPerTickSpecificBPM(o),e.start<n))for(let t=1;t<e.pins.length;t++){if(e.pins[t-1].time+e.start<=n){const i=h.ticksPerPart*Math.min(n-(e.start+e.pins[t-1].time),e.pins[t].time-e.pins[t-1].time),s=e.pins[t-1].size+h.modulators.dictionary.tempo.convertRealFactor;let a=e.pins[t].size+h.modulators.dictionary.tempo.convertRealFactor;e.pins[t].time+e.start>n&&(a=e.pins[t-1].size+(e.pins[t].size-e.pins[t-1].size)*(n-(e.start+e.pins[t-1].time))/(e.pins[t].time-e.pins[t-1].time)+h.modulators.dictionary.tempo.convertRealFactor);let r=h.partsPerBeat*h.ticksPerPart/60;l+=a!=s?-this.samplesPerSecond*i*(Math.log(r*a*i)-Math.log(r*s*i))/(r*(s-a)):i*this.getSamplesPerTickSpecificBPM(a),o=a}p=Math.min(e.start+e.pins[t].time,n)}}}}}l+=(n-p)*h.ticksPerPart*this.getSamplesPerTickSpecificBPM(o),e++,0!=i&&e==this.song.loopStart+this.song.loopLength&&(e=this.song.loopStart,i>0&&i--),e>=s&&(t=!0)}return Math.ceil(l)}return this.getSamplesPerBar()*this.getTotalBars(e,t,i)}getTotalBars(e,t,i=this.loopRepeatCount){if(null==this.song)throw new Error;let n=this.song.loopLength*(i+1);return e&&(n+=this.song.loopStart),t&&(n+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),n}constructor(e=null){this.samplesPerSecond=44100,this.song=null,this.preferLowerLatency=!1,this.anticipatePoorPerformance=!1,this.liveInputDuration=0,this.liveBassInputDuration=0,this.liveInputStarted=!1,this.liveBassInputStarted=!1,this.liveInputPitches=[],this.liveBassInputPitches=[],this.liveInputChannel=0,this.liveBassInputChannel=0,this.liveInputInstruments=[],this.liveBassInputInstruments=[],this.loopRepeatCount=-1,this.volume=1,this.oscRefreshEventTimer=0,this.oscEnabled=!0,this.enableMetronome=!1,this.countInMetronome=!1,this.renderingSong=!1,this.heldMods=[],this.wantToSkip=!1,this.playheadInternal=0,this.bar=0,this.prevBar=null,this.nextBar=null,this.beat=0,this.part=0,this.tick=0,this.isAtStartOfTick=!0,this.isAtEndOfTick=!0,this.tickSampleCountdown=0,this.modValues=[],this.modInsValues=[],this.nextModValues=[],this.nextModInsValues=[],this.isPlayingSong=!1,this.isRecording=!1,this.liveInputEndTime=0,this.browserAutomaticallyClearsAudioBuffer=!0,this.tempDrumSetControlPoint=new Me,this.tempFrequencyResponse=new B,this.loopBarStart=-1,this.loopBarEnd=-1,this.channels=[],this.tonePool=new C,this.tempMatchedPitchTones=Array(h.maxChordSize).fill(null),this.startedMetronome=!1,this.metronomeSamplesRemaining=-1,this.metronomeAmplitude=0,this.metronomePrevAmplitude=0,this.metronomeFilter=0,this.limit=0,this.songEqFilterVolume=1,this.songEqFilterVolumeDelta=0,this.songEqFiltersL=[],this.songEqFiltersR=[],this.songEqFilterCount=0,this.initialSongEqFilterInput1L=0,this.initialSongEqFilterInput2L=0,this.initialSongEqFilterInput1R=0,this.initialSongEqFilterInput2R=0,this.tempInstrumentSampleBufferL=null,this.tempInstrumentSampleBufferR=null,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=e=>{const t=e.outputBuffer,i=t.getChannelData(0),n=t.getChannelData(1);if(!this.browserAutomaticallyClearsAudioBuffer||0==i[0]&&0==n[0]&&0==i[t.length-1]&&0==n[t.length-1]||(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const e=t.length;for(let t=0;t<e;t++)i[t]=0,n[t]=0}!this.isPlayingSong&&performance.now()>=this.liveInputEndTime?this.deactivateAudio():(this.synthesize(i,n,t.length,this.isPlayingSong),this.oscEnabled&&(this.oscRefreshEventTimer<=0?(A.raise("oscilloscopeUpdate",i,n),this.oscRefreshEventTimer=2):this.oscRefreshEventTimer--))},this.computeDelayBufferSizes(),null!=e&&this.setSong(e)}setSong(e){"string"==typeof e?this.song=new Ie(e):e instanceof Ie&&(this.song=e),this.prevBar=null}computeDelayBufferSizes(){this.panningDelayBufferSize=He.fittingPowerOfTwo(this.samplesPerSecond*h.panDelaySecondsMax),this.panningDelayBufferMask=this.panningDelayBufferSize-1,this.chorusDelayBufferSize=He.fittingPowerOfTwo(this.samplesPerSecond*h.chorusMaxDelay),this.chorusDelayBufferMask=this.chorusDelayBufferSize-1}activateAudio(){const e=this.anticipatePoorPerformance?this.preferLowerLatency?2048:4096:this.preferLowerLatency?512:2048;if(null==this.audioCtx||null==this.scriptNode||this.scriptNode.bufferSize!=e){null!=this.scriptNode&&this.deactivateAudio();const t=this.anticipatePoorPerformance?this.preferLowerLatency?"balanced":"playback":this.preferLowerLatency?"interactive":"balanced";this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext)({latencyHint:t}),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(e,0,2):this.audioCtx.createJavaScriptNode(e,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination),this.computeDelayBufferSizes()}this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.initModFilters(this.song),this.computeLatestModValues(),this.activateAudio(),this.warmUpSynthesizer(this.song),this.isPlayingSong=!0)}pause(){if(this.isPlayingSong&&(this.isPlayingSong=!1,this.isRecording=!1,this.preferLowerLatency=!1,this.modValues=[],this.nextModValues=[],this.heldMods=[],null!=this.song)){this.song.inVolumeCap=0,this.song.outVolumeCap=0,this.song.tmpEqFilterStart=null,this.song.tmpEqFilterEnd=null;for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)this.modInsValues[e]=[],this.nextModInsValues[e]=[]}}startRecording(){this.preferLowerLatency=!0,this.isRecording=!0,this.play()}resetEffects(){if(this.limit=0,this.freeAllTones(),null!=this.song)for(const e of this.channels)for(const t of e.instruments)t.resetAllEffects()}setModValue(e,t,i,n,s){let a=e+h.modulators[s].convertRealFactor,r=t+h.modulators[s].convertRealFactor;return h.modulators[s].forSong?null!=this.modValues[s]&&this.modValues[s]==a&&this.nextModValues[s]==r||(this.modValues[s]=a,this.nextModValues[s]=r):null!=this.modInsValues[i][n][s]&&this.modInsValues[i][n][s]==a&&this.nextModInsValues[i][n][s]==r||(this.modInsValues[i][n][s]=a,this.nextModInsValues[i][n][s]=r),a}getModValue(e,t,i,n){if(h.modulators[e].forSong){if(null!=this.modValues[e]&&null!=this.nextModValues[e])return n?this.nextModValues[e]:this.modValues[e]}else if(null!=t&&null!=i&&null!=this.modInsValues[t][i][e]&&null!=this.nextModInsValues[t][i][e])return n?this.nextModInsValues[t][i][e]:this.modInsValues[t][i][e];return-1}isAnyModActive(e,t){for(let i=0;i<h.modulators.length;i++)if(null!=this.modValues&&null!=this.modValues[i]||null!=this.modInsValues&&null!=this.modInsValues[e]&&null!=this.modInsValues[e][t]&&null!=this.modInsValues[e][t][i])return!0;return!1}unsetMod(e,t,i){if(this.isModActive(e)||null!=t&&null!=i&&this.isModActive(e,t,i)){this.modValues[e]=null,this.nextModValues[e]=null;for(let n=0;n<this.heldMods.length;n++)null!=t&&null!=i?this.heldMods[n].channelIndex==t&&this.heldMods[n].instrumentIndex==i&&this.heldMods[n].setting==e&&this.heldMods.splice(n,1):this.heldMods[n].setting==e&&this.heldMods.splice(n,1);null!=t&&null!=i&&(this.modInsValues[t][i][e]=null,this.nextModInsValues[t][i][e]=null)}}isFilterModActive(e,t,i,n){var s;const a=this.song.channels[t].instruments[i];if(e){if(a.noteFilterType)return!1;if(null!=a.tmpNoteFilterEnd)return!0}else if(n){if(null!=(null===(s=null==this?void 0:this.song)||void 0===s?void 0:s.tmpEqFilterEnd))return!0}else{if(a.eqFilterType)return!1;if(null!=a.tmpEqFilterEnd)return!0}return!1}isModActive(e,t,i){return h.modulators[e].forSong?null!=this.modValues&&null!=this.modValues[e]:null!=t&&null!=i&&null!=this.modInsValues&&null!=this.modInsValues[t]&&null!=this.modInsValues[t][i]&&null!=this.modInsValues[t][i][e]}forceHoldMods(e,t,i,n){let s=!1;for(let a=0;a<this.heldMods.length;a++)this.heldMods[a].channelIndex==t&&this.heldMods[a].instrumentIndex==i&&this.heldMods[a].setting==n&&(this.heldMods[a].volume=e,this.heldMods[a].holdFor=24,s=!0);s||this.heldMods.push({volume:e,channelIndex:t,instrumentIndex:i,setting:n,holdFor:24})}snapToStart(){this.bar=0,this.resetEffects(),this.snapToBar()}goToBar(e){this.bar=e,this.resetEffects(),this.playheadInternal=this.bar}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const e=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}}goToNextBar(){if(!this.song)return;this.prevBar=this.bar;const e=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}goToPrevBar(){if(!this.song)return;this.prevBar=null;const e=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}getNextBar(){let e=this.bar+1;return this.isRecording?e>=this.song.barCount&&(e=this.song.barCount-1):this.bar!=this.loopBarEnd||this.renderingSong?0!=this.loopRepeatCount&&e==Math.max(this.loopBarEnd+1,this.song.loopStart+this.song.loopLength)&&(e=this.song.loopStart):e=this.loopBarStart,e}skipBar(){if(!this.song)return;const e=this.getSamplesPerTick();this.prevBar=this.bar,this.loopBarEnd!=this.bar?this.bar++:this.bar=this.loopBarStart,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=e,this.isAtStartOfTick=!0,0!=this.loopRepeatCount&&this.bar==Math.max(this.song.loopStart+this.song.loopLength,this.loopBarEnd)&&(this.bar=this.song.loopStart,-1!=this.loopBarStart&&(this.bar=this.loopBarStart),this.loopRepeatCount>0&&this.loopRepeatCount--)}computeSongState(e){if(null==this.song)return;const t=Math.ceil(e),i=this.samplesPerSecond;let n=1;if(this.song.eqFilterType){const e=this.song.eqFilter;null==this.song.eqSubFilters[1]&&(this.song.eqSubFilters[1]=new ke),this.song.eqSubFilters[1];let s,a=this.song.eqFilterSimpleCut,r=this.song.eqFilterSimplePeak;this.song.eqFilterSimpleCut,this.song.eqFilterSimplePeak,e.convertLegacySettingsForSynth(a,r,!0),s=e.controlPoints[0],s.toCoefficients(He.tempFilterStartCoefficients,i,1,1),this.songEqFiltersL.length<1&&(this.songEqFiltersL[0]=new W),this.songEqFiltersL[0].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterStartCoefficients,1/t,0==s.type),this.songEqFiltersR.length<1&&(this.songEqFiltersR[0]=new W),this.songEqFiltersR[0].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterStartCoefficients,1/t,0==s.type),n*=s.getVolumeCompensationMult(),this.songEqFilterCount=1,n=Math.min(3,n)}else{const e=null!=this.song.tmpEqFilterStart?this.song.tmpEqFilterStart:this.song.eqFilter;for(let s=0;s<e.controlPointCount;s++){let a=e.controlPoints[s],r=null!=this.song.tmpEqFilterEnd&&null!=this.song.tmpEqFilterEnd.controlPoints[s]?this.song.tmpEqFilterEnd.controlPoints[s]:e.controlPoints[s];a.type!=r.type&&(a=r),a.toCoefficients(He.tempFilterStartCoefficients,i,1,1),r.toCoefficients(He.tempFilterEndCoefficients,i,1,1),this.songEqFiltersL.length<=s&&(this.songEqFiltersL[s]=new W),this.songEqFiltersL[s].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/t,0==a.type),this.songEqFiltersR.length<=s&&(this.songEqFiltersR[s]=new W),this.songEqFiltersR[s].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/t,0==a.type),n*=a.getVolumeCompensationMult()}this.songEqFilterCount=e.controlPointCount,n=Math.min(3,n)}let s=n,a=n;this.songEqFilterVolume=s,this.songEqFilterVolumeDelta=(a-s)/t}synthesize(e,t,i,n=!0){if(null==this.song){for(let n=0;n<i;n++)e[n]=0,t[n]=0;return void this.deactivateAudio()}const s=this.song;this.song.inVolumeCap=0,this.song.outVolumeCap=0;let a=this.getSamplesPerTick(),r=!1;(this.tickSampleCountdown<=0||this.tickSampleCountdown>a)&&(this.tickSampleCountdown=a,this.isAtStartOfTick=!0),n&&(this.beat>=s.beatsPerBar&&(this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=a,this.isAtStartOfTick=!0,this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=s.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(r=!0,this.pause()))),this.syncSongState(),(null==this.tempInstrumentSampleBufferL||this.tempInstrumentSampleBufferL.length<i||null==this.tempInstrumentSampleBufferR||this.tempInstrumentSampleBufferR.length<i)&&(this.tempInstrumentSampleBufferL=new Float32Array(i),this.tempInstrumentSampleBufferR=new Float32Array(i));const o=+this.volume,l=1-Math.pow(.5,this.song.limitDecay/this.samplesPerSecond),p=1-Math.pow(.5,this.song.limitRise/this.samplesPerSecond);let u=+this.limit,c=[],f=-1,d=0;for(;d<i&&!r;){this.nextBar=this.getNextBar(),this.nextBar>=s.barCount&&(this.nextBar=null);const m=i-d,v=Math.ceil(this.tickSampleCountdown),y=Math.min(v,m),b=d+y;if(this.isPlayingSong||this.renderingSong){for(let e=s.pitchChannelCount+s.noiseChannelCount;e<s.getChannelCount();e++){const t=s.channels[e],i=this.channels[e];this.determineCurrentActiveTones(s,e,a,n);for(let n=0;n<t.instruments.length;n++){const t=i.instruments[n];for(let i=0;i<t.activeModTones.count();i++){const n=t.activeModTones.get(i),r=s.channels[e].instruments[n.instrumentIndex];let o=h.modCount-1-n.pitches[0];(r.modulators[o]==h.modulators.dictionary["note filter"].index||r.modulators[o]==h.modulators.dictionary["eq filter"].index)&&null!=r.modFilterTypes[o]&&r.modFilterTypes[o]>0||this.playModTone(s,e,a,d,y,n,!1,!1)}}}for(let e=s.pitchChannelCount+s.noiseChannelCount;e<s.getChannelCount();e++){const t=s.channels[e],i=this.channels[e];for(let n=0;n<t.instruments.length;n++){const t=i.instruments[n];for(let i=0;i<t.activeModTones.count();i++){const n=t.activeModTones.get(i),r=s.channels[e].instruments[n.instrumentIndex];let o=h.modCount-1-n.pitches[0];(r.modulators[o]==h.modulators.dictionary["note filter"].index||r.modulators[o]==h.modulators.dictionary["eq filter"].index)&&null!=r.modFilterTypes[o]&&r.modFilterTypes[o]>0&&this.playModTone(s,e,a,d,y,n,!1,!1)}}}}if(this.wantToSkip){let e=c.includes(this.bar);if(e&&d==f)return void this.pause();-1==f&&(f=d),e||c.push(this.bar),this.wantToSkip=!1,this.skipBar()}else{this.computeSongState(a);for(let i=0;i<s.pitchChannelCount+s.noiseChannelCount;i++){const r=s.channels[i],o=this.channels[i];this.isAtStartOfTick&&(this.determineCurrentActiveTones(s,i,a,n&&!this.countInMetronome),this.determineLiveInputTones(s,i,a));for(let n=0;n<r.instruments.length;n++){const l=r.instruments[n],p=o.instruments[n];if(this.isAtStartOfTick){let e=p.activeTones.count()+p.liveInputTones.count();for(let t=0;t<p.releasedTones.count();t++){const n=p.releasedTones.get(t);if(n.ticksSinceReleased>=Math.abs(l.getFadeOutTicks())){this.freeReleasedTone(p,t),t--;continue}const r=e>=h.maximumTonesPerChannel;this.computeTone(s,i,a,n,!0,r),e++}p.awake&&(p.computed||p.compute(this,l,a,Math.ceil(a),null,i,n),p.computed=!1,p.envelopeComputer.clearEnvelopes())}for(let e=0;e<p.activeTones.count();e++){const t=p.activeTones.get(e);this.playTone(i,d,y,t)}for(let e=0;e<p.liveInputTones.count();e++){const t=p.liveInputTones.get(e);this.playTone(i,d,y,t)}for(let e=0;e<p.releasedTones.count();e++){const t=p.releasedTones.get(e);this.playTone(i,d,y,t)}p.awake&&He.effectsSynth(this,e,t,d,y,p);const u=this.tickSampleCountdown,c=1-u/a,f=1-(u-y)/a,m=(this.beat*h.partsPerBeat+this.part)*h.ticksPerPart+this.tick,v=m/h.ticksPerPart,b=(m+1)/h.ticksPerPart,g=v+(b-v)*c,S=v+(b-v)*f;let w=l.vibratoSpeed;p.vibratoTime=p.nextVibratoTime,this.isModActive(h.modulators.dictionary["vibrato speed"].index,i,n)&&(w=this.getModValue(h.modulators.dictionary["vibrato speed"].index,i,n)),0==w?(p.vibratoTime=0,p.nextVibratoTime=0):p.nextVibratoTime+=.1*w*(S-g)}}if(this.enableMetronome||this.countInMetronome)if(0==this.part){if(!this.startedMetronome){const e=s.beatsPerBar>4&&s.beatsPerBar%2==0&&this.beat==s.beatsPerBar/2,t=0==this.beat?8:e?6:4,i=0==this.beat?1600:e?1200:800,n=0==this.beat?.06:e?.05:.04,a=this.samplesPerSecond/i,r=2*Math.PI/a;this.metronomeSamplesRemaining=Math.floor(a*t),this.metronomeFilter=2*Math.cos(r),this.metronomeAmplitude=n*Math.sin(r),this.metronomePrevAmplitude=0,this.startedMetronome=!0}if(this.metronomeSamplesRemaining>0){const i=Math.min(b,d+this.metronomeSamplesRemaining);this.metronomeSamplesRemaining-=i-d;for(let n=d;n<i;n++){e[n]+=this.metronomeAmplitude,t[n]+=this.metronomeAmplitude;const i=this.metronomeFilter*this.metronomeAmplitude-this.metronomePrevAmplitude;this.metronomePrevAmplitude=this.metronomeAmplitude,this.metronomeAmplitude=i}}}else this.startedMetronome=!1;for(let i=d;i<b;i++){{let n=this.songEqFiltersL,s=this.songEqFiltersR;const a=0|this.songEqFilterCount;let r=+this.initialSongEqFilterInput1L,o=+this.initialSongEqFilterInput2L,l=+this.initialSongEqFilterInput1R,p=+this.initialSongEqFilterInput2R;const h=He.applyFilters;let u=+this.songEqFilterVolume;const c=+this.songEqFilterVolumeDelta,f=e[i];let d=f;d=h(d,r,o,a,n),o=r,r=f,d*=u,e[i]=d;const m=t[i];let v=m;v=h(v,l,p,a,s),p=l,l=m,v*=u,t[i]=v,u+=c,this.sanitizeFilters(n),r<100&&o<100||(r=0,o=0),Math.abs(r)<Y&&(r=0),Math.abs(o)<Y&&(o=0),this.initialSongEqFilterInput1L=r,this.initialSongEqFilterInput2L=o,this.sanitizeFilters(s),l<100&&p<100||(l=0,p=0),Math.abs(l)<Y&&(l=0),Math.abs(p)<Y&&(p=0),this.initialSongEqFilterInput1R=l,this.initialSongEqFilterInput2R=p}const n=e[i]*s.masterGain*s.masterGain,a=t[i]*s.masterGain*s.masterGain,r=n<0?-n:n,h=a<0?-a:a,c=r>h?r:h;this.song.inVolumeCap=this.song.inVolumeCap>c?this.song.inVolumeCap:c;const f=+(c>s.compressionThreshold)+ +(c>s.limitThreshold),d=+(0==f)*((.8*(c+1-s.compressionThreshold)+.25)*s.compressionRatio+1.05*(1-s.compressionRatio))+1.05*+(1==f)+ +(2==f)*(1.05*((c+1-s.limitThreshold)*s.limitRatio+(1-s.limitThreshold)));u+=(d-u)*(u<d?p:l);const m=o/(u>=1?1.05*u:.8*u+.25);e[i]=n*m,t[i]=a*m,this.song.outVolumeCap=this.song.outVolumeCap>c*m?this.song.outVolumeCap:c*m}if(d+=y,this.isAtStartOfTick=!1,this.tickSampleCountdown-=y,this.tickSampleCountdown<=0){this.isAtStartOfTick=!0;for(const e of this.channels)for(const t of e.instruments){for(let e=0;e<t.releasedTones.count();e++){const i=t.releasedTones.get(e);i.isOnLastTick?(this.freeReleasedTone(t,e),e--):i.ticksSinceReleased++}t.deactivateAfterThisTick&&t.deactivate(),t.tonesAddedInThisTick=!1}const e=this.getTicksIntoBar(),t=a/this.samplesPerSecond,i=this.getCurrentPart();for(let n=0;n<this.song.pitchChannelCount+this.song.noiseChannelCount;n++)for(let s=0;s<this.song.channels[n].instruments.length;s++){let a=this.song.channels[n].instruments[s],r=this.channels[n].instruments[s];const o=r.envelopeComputer,l=[];for(let e=0;e<h.maxEnvelopeCount;e++)l[e]=0;for(let e=0;e<a.envelopeCount;e++){let t=a.envelopeSpeed,i=a.envelopes[e].perEnvelopeSpeed;this.isModActive(h.modulators.dictionary["individual envelope speed"].index,n,s)&&null!=a.envelopes[e].tempEnvelopeSpeed&&(i=a.envelopes[e].tempEnvelopeSpeed),this.isModActive(h.modulators.dictionary["envelope speed"].index,n,s)?(t=Math.max(0,Math.min(h.arpSpeedScale.length-1,this.getModValue(h.modulators.dictionary["envelope speed"].index,n,s,!1))),Number.isInteger(t)?r.envelopeTime[e]+=h.arpSpeedScale[t]*i:r.envelopeTime[e]+=((1-t%1)*h.arpSpeedScale[Math.floor(t)]+t%1*h.arpSpeedScale[Math.ceil(t)])*i):r.envelopeTime[e]+=h.arpSpeedScale[t]*i}let p=new Te;p=r.activeTones.count()>0?r.activeTones.peakBack():new Te,o.computeEnvelopes(a,i,r.envelopeTime,e,t,p,l,r,this);const u=o.envelopeStarts;let c=a.arpeggioSpeed;if(this.isModActive(h.modulators.dictionary["arp speed"].index,n,s))c=X(0,h.arpSpeedScale.length,this.getModValue(h.modulators.dictionary["arp speed"].index,n,s,!1)),Number.isInteger(c)?r.arpTime+=h.arpSpeedScale[c]:r.arpTime+=(1-c%1)*h.arpSpeedScale[Math.floor(c)]+c%1*h.arpSpeedScale[Math.ceil(c)];else{const e=u[49];c=X(0,h.arpSpeedScale.length,e*c),Number.isInteger(c)?r.arpTime+=h.arpSpeedScale[c]:r.arpTime+=(1-c%1)*h.arpSpeedScale[Math.floor(c)]+c%1*h.arpSpeedScale[Math.ceil(c)]}o.clearEnvelopes()}for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let t=0;t<this.song.channels[e].instruments.length;t++){let i=this.song.channels[e].instruments[t];null!=i.tmpEqFilterEnd?i.tmpEqFilterStart=i.tmpEqFilterEnd:i.tmpEqFilterStart=i.eqFilter,null!=i.tmpNoteFilterEnd?i.tmpNoteFilterStart=i.tmpNoteFilterEnd:i.tmpNoteFilterStart=i.noteFilter}if(null!=s.tmpEqFilterEnd?s.tmpEqFilterStart=s.tmpEqFilterEnd:s.tmpEqFilterStart=s.eqFilter,this.tick++,this.tickSampleCountdown+=a,this.tick==h.ticksPerPart){this.tick=0,this.part++,this.liveInputDuration--,this.liveBassInputDuration--;for(let e=0;e<this.heldMods.length;e++)this.heldMods[e].holdFor--,this.heldMods[e].holdFor<=0&&this.heldMods.splice(e,1);this.part==h.partsPerBeat&&(this.part=0,n&&(this.beat++,this.beat==s.beatsPerBar&&(this.beat=0,this.countInMetronome?this.countInMetronome=!1:(this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--,this.bar>=s.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(r=!0,this.resetEffects(),this.pause()))))))}}for(let e=0;e<h.modulators.length;e++)null!=this.nextModValues&&null!=this.nextModValues[e]&&(this.modValues[e]=this.nextModValues[e]);this.isModActive(h.modulators.dictionary.tempo.index)&&(a=this.getSamplesPerTick(),this.tickSampleCountdown=Math.min(this.tickSampleCountdown,a));for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let t=0;t<this.channels[e].instruments.length;t++){const i=this.channels[e].instruments[t],n=this.song.channels[e].instruments[t];i.nextVibratoTime=i.nextVibratoTime%(h.vibratoTypes[n.vibratoType].period/(h.ticksPerPart*a/this.samplesPerSecond)),i.arpTime=i.arpTime%(2520*h.ticksPerArpeggio);for(let e=0;e<n.envelopeCount;e++)i.envelopeTime[e]=i.envelopeTime[e]%(h.partsPerBeat*h.ticksPerPart*this.song.beatsPerBar)}for(let e=0;e<h.modulators.length;e++)for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)for(let i=0;i<this.song.getMaxInstrumentsPerChannel();i++)null!=this.nextModInsValues&&null!=this.nextModInsValues[t]&&null!=this.nextModInsValues[t][i]&&null!=this.nextModInsValues[t][i][e]&&(this.modInsValues[t][i][e]=this.nextModInsValues[t][i][e])}}(!Number.isFinite(u)||Math.abs(u)<Y)&&(u=0),this.limit=u,n&&!this.countInMetronome&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/a)/2+this.part)/h.partsPerBeat+this.beat)/s.beatsPerBar+this.bar)}freeTone(e){this.tonePool.pushBack(e)}newTone(){if(this.tonePool.count()>0){const e=this.tonePool.popBack();return e.freshlyAllocated=!0,e}return new Te}releaseTone(e,t){e.releasedTones.pushFront(t),t.atNoteStart=!1,t.passedEndOfNote=!0}freeReleasedTone(e,t){this.freeTone(e.releasedTones.get(t)),e.releasedTones.remove(t)}freeAllTones(){for(const e of this.channels)for(const t of e.instruments){for(;t.activeTones.count()>0;)this.freeTone(t.activeTones.popBack());for(;t.activeModTones.count()>0;)this.freeTone(t.activeModTones.popBack());for(;t.releasedTones.count()>0;)this.freeTone(t.releasedTones.popBack());for(;t.liveInputTones.count()>0;)this.freeTone(t.liveInputTones.popBack())}}determineLiveInputTones(e,t,i){const n=e.channels[t],s=this.channels[t],a=this.liveInputPitches,r=this.liveBassInputPitches;for(let o=0;o<n.instruments.length;o++){const l=s.instruments[o],p=l.liveInputTones;let h=0;if(this.liveInputDuration>0&&t==this.liveInputChannel&&a.length>0&&-1!=this.liveInputInstruments.indexOf(o)){const s=n.instruments[o];if(s.getChord().singleTone){let n;p.count()<=h?(n=this.newTone(),p.pushBack(n)):!s.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(l,p.get(h)),n=this.newTone(),p.set(h,n)):n=p.get(h),h++;for(let e=0;e<a.length;e++)n.pitches[e]=a[e];n.pitchCount=a.length,n.chordSize=1,n.instrumentIndex=o,n.note=n.prevNote=n.nextNote=null,n.atNoteStart=this.liveInputStarted,n.forceContinueAtStart=!1,n.forceContinueAtEnd=!1,this.computeTone(e,t,i,n,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(p,a);for(let n=0;n<a.length;n++){let s;null!=this.tempMatchedPitchTones[h]?(s=this.tempMatchedPitchTones[h],this.tempMatchedPitchTones[h]=null,1==s.pitchCount&&s.pitches[0]==a[n]||(this.releaseTone(l,s),s=this.newTone()),p.pushBack(s)):(s=this.newTone(),p.pushBack(s)),h++,s.pitches[0]=a[n],s.pitchCount=1,s.chordSize=a.length,s.instrumentIndex=o,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1,this.computeTone(e,t,i,s,!1,!1)}}}if(this.liveBassInputDuration>0&&t==this.liveBassInputChannel&&r.length>0&&-1!=this.liveBassInputInstruments.indexOf(o)){const s=n.instruments[o];if(s.getChord().singleTone){let n;p.count()<=h?(n=this.newTone(),p.pushBack(n)):!s.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(l,p.get(h)),n=this.newTone(),p.set(h,n)):n=p.get(h),h++;for(let e=0;e<r.length;e++)n.pitches[e]=r[e];n.pitchCount=r.length,n.chordSize=1,n.instrumentIndex=o,n.note=n.prevNote=n.nextNote=null,n.atNoteStart=this.liveBassInputStarted,n.forceContinueAtStart=!1,n.forceContinueAtEnd=!1,this.computeTone(e,t,i,n,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(p,r);for(let n=0;n<r.length;n++){let s;null!=this.tempMatchedPitchTones[h]?(s=this.tempMatchedPitchTones[h],this.tempMatchedPitchTones[h]=null,1==s.pitchCount&&s.pitches[0]==r[n]||(this.releaseTone(l,s),s=this.newTone()),p.pushBack(s)):(s=this.newTone(),p.pushBack(s)),h++,s.pitches[0]=r[n],s.pitchCount=1,s.chordSize=r.length,s.instrumentIndex=o,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveBassInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1,this.computeTone(e,t,i,s,!1,!1)}}}for(;p.count()>h;)this.releaseTone(l,p.popBack());this.clearTempMatchedPitchTones(h,l)}this.liveInputStarted=!1,this.liveBassInputStarted=!1}adjacentPatternHasCompatibleInstrumentTransition(e,t,i,n,s,a,r,o,l,p){if(e.patternInstruments&&-1==n.instruments.indexOf(s)){if(i.instruments.length>1||n.instruments.length>1)return null;const e=t.instruments[n.instruments[0]];if(p)return e.getChord();const s=e.getTransition();return a.includeAdjacentPatterns&&s.includeAdjacentPatterns&&s.slides==a.slides?e.getChord():null}return p||a.includeAdjacentPatterns?r:null}static adjacentNotesHaveMatchingPitches(e,t){if(e.pitches.length!=t.pitches.length)return!1;const i=e.pins[e.pins.length-1].interval;for(const n of e.pitches)if(-1==t.pitches.indexOf(n+i))return!1;return!0}moveTonesIntoOrderedTempMatchedList(e,t){for(let i=0;i<e.count();i++){const n=e.get(i),s=n.pitches[0]+n.lastInterval;for(let a=0;a<t.length;a++)if(t[a]==s){this.tempMatchedPitchTones[a]=n,e.remove(i),i--;break}}for(;e.count()>0;){const t=e.popFront();for(let e=0;e<this.tempMatchedPitchTones.length;e++)if(null==this.tempMatchedPitchTones[e]){this.tempMatchedPitchTones[e]=t;break}}}determineCurrentActiveTones(e,t,i,n){const s=e.channels[t],a=this.channels[t],r=e.getPattern(t,this.bar),o=this.getCurrentPart(),l=this.tick+h.ticksPerPart*o;if(n&&e.getChannelIsMod(t)){let i=[],n=[],p=[],u=h.modCount;for(;u--;)i.push(null),n.push(null),p.push(null);if(null!=r&&!s.muted)for(let e=0;e<r.notes.length;e++)r.notes[e].end<=o?(null==n[r.notes[e].pitches[0]]||r.notes[e].end>n[r.notes[e].pitches[0]].start)&&(n[r.notes[e].pitches[0]]=r.notes[e]):r.notes[e].start<=o&&r.notes[e].end>o?i[r.notes[e].pitches[0]]=r.notes[e]:r.notes[e].start>o&&(null==p[r.notes[e].pitches[0]]||r.notes[e].start<p[r.notes[e].pitches[0]].start)&&(p[r.notes[e].pitches[0]]=r.notes[e]);let c=0;const f=e.patternInstruments&&null!=r?r.instruments[0]:0,d=a.instruments[f],m=d.activeModTones;for(let e=0;e<h.modCount;e++){if(null!=i[e]&&(null!=n[e]&&n[e].end!=i[e].start&&(n[e]=null),null!=p[e]&&p[e].start!=i[e].end&&(p[e]=null)),null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=f&&a.singleSeamlessInstrument<a.instruments.length){const e=a.instruments[a.singleSeamlessInstrument],t=a.instruments[f];for(;e.activeModTones.count()>0;)t.activeModTones.pushFront(e.activeModTones.popBack())}if(a.singleSeamlessInstrument=f,null!=i[e]){let t=n[e],s=p[e],a=!1,r=!1;const o=h.ticksPerPart*i[e].start==l&&this.isAtStartOfTick;let u;if(m.count()<=c)u=this.newTone(),m.pushBack(u);else if(o&&null==t){const e=m.get(c);e.isOnLastTick?this.freeTone(e):this.releaseTone(d,e),u=this.newTone(),m.set(c,u)}else u=m.get(c);c++;for(let t=0;t<i[e].pitches.length;t++)u.pitches[t]=i[e].pitches[t];u.pitchCount=i[e].pitches.length,u.chordSize=1,u.instrumentIndex=f,u.note=i[e],u.noteStartPart=i[e].start,u.noteEndPart=i[e].end,u.prevNote=t,u.nextNote=s,u.prevNotePitchIndex=0,u.nextNotePitchIndex=0,u.atNoteStart=o,u.passedEndOfNote=!1,u.forceContinueAtStart=a,u.forceContinueAtEnd=r}}for(;m.count()>c;){const i=m.popBack(),n=e.channels[t];if(i.instrumentIndex<n.instruments.length&&!i.isOnLastTick){const e=this.channels[t].instruments[i.instrumentIndex];this.releaseTone(e,i)}else this.freeTone(i)}}else if(!e.getChannelIsMod(t)){let p=null,u=null,c=null;if(n&&null!=r&&!s.muted&&(!this.isRecording||this.liveInputChannel!=t)){for(let e=0;e<r.notes.length;e++)if(r.notes[e].end<=o)u=r.notes[e];else if(r.notes[e].start<=o&&r.notes[e].end>o)p=r.notes[e];else if(r.notes[e].start>o){c=r.notes[e];break}null!=p&&(null!=u&&u.end!=p.start&&(u=null),null!=c&&c.start!=p.end&&(c=null))}if(null!=r&&(!e.layeredInstruments||1==s.instruments.length||e.patternInstruments&&1==r.instruments.length)){const t=e.patternInstruments?r.instruments[0]:0;if(null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=t&&a.singleSeamlessInstrument<a.instruments.length){const e=a.instruments[a.singleSeamlessInstrument],i=a.instruments[t];for(;e.activeTones.count()>0;)i.activeTones.pushFront(e.activeTones.popBack())}a.singleSeamlessInstrument=t}else a.singleSeamlessInstrument=null;for(let n=0;n<s.instruments.length;n++){const f=a.instruments[n],d=f.activeTones;let m=0;if(null!=p&&(!e.patternInstruments||-1!=r.instruments.indexOf(n))){const a=s.instruments[n];let v=u,y=c;const b=h.partsPerBeat*e.beatsPerBar,g=a.getTransition(),S=a.getChord();let w=!1,M=!1,k=0,F=0;if(0==p.start){let i=null==this.prevBar?null:e.getPattern(t,this.prevBar);if(null!=i){const t=i.notes.length<=0?null:i.notes[i.notes.length-1];if(null!=t&&t.end==b){const a=p.continuesLastPattern&&He.adjacentNotesHaveMatchingPitches(t,p),o=this.adjacentPatternHasCompatibleInstrumentTransition(e,s,r,i,n,g,S,p,t,a);null!=o&&(v=t,k=o.singleTone?1:v.pitches.length,w=a)}}}else null!=v&&(k=S.singleTone?1:v.pitches.length);if(p.end==b){let i=null==this.nextBar?null:e.getPattern(t,this.nextBar);if(null!=i){const t=i.notes.length<=0?null:i.notes[0];if(null!=t&&0==t.start){const a=t.continuesLastPattern&&He.adjacentNotesHaveMatchingPitches(p,t),o=this.adjacentPatternHasCompatibleInstrumentTransition(e,s,r,i,n,g,S,p,t,a);null!=o&&(y=t,F=o.singleTone?1:y.pitches.length,M=a)}}}else null!=y&&(F=S.singleTone?1:y.pitches.length);if(S.singleTone){const s=h.ticksPerPart*p.start==l;let r;if(d.count()<=m)r=this.newTone(),d.pushBack(r);else if(!s||(g.isSeamless||a.clicklessTransition||w)&&null!=v)r=d.get(m);else{const e=d.get(m);e.isOnLastTick?this.freeTone(e):this.releaseTone(f,e),r=this.newTone(),d.set(m,r)}m++;for(let e=0;e<p.pitches.length;e++)r.pitches[e]=p.pitches[e];r.pitchCount=p.pitches.length,r.chordSize=1,r.instrumentIndex=n,r.note=p,r.noteStartPart=p.start,r.noteEndPart=p.end,r.prevNote=v,r.nextNote=y,r.prevNotePitchIndex=0,r.nextNotePitchIndex=0,r.atNoteStart=s,r.passedEndOfNote=!1,r.forceContinueAtStart=w,r.forceContinueAtEnd=M,this.computeTone(e,t,i,r,!1,!1)}else{const s=a.getTransition();(s.isSeamless&&!s.slides&&0==S.strumParts||w)&&h.ticksPerPart*p.start==l&&null!=v&&this.moveTonesIntoOrderedTempMatchedList(d,p.pitches);let r=0;for(let a=0;a<p.pitches.length;a++){let u=k>a?v:null,c=p,b=F>a?y:null,g=c.start+r,x=!1;if(g>o){if(!(d.count()>a&&(s.isSeamless||w)&&null!=u))break;b=c,c=u,u=null,g=c.start+r,x=!0}let q=c.end;(s.isSeamless||w)&&null!=b&&(q=Math.min(h.partsPerBeat*this.song.beatsPerBar,q+r)),(s.continues||w)&&null!=u||(r+=S.strumParts);const I=h.ticksPerPart*g==l;let P;if(null!=this.tempMatchedPitchTones[m])P=this.tempMatchedPitchTones[m],this.tempMatchedPitchTones[m]=null,d.pushBack(P);else if(d.count()<=m)P=this.newTone(),d.pushBack(P);else if(!I||(s.isSeamless||w)&&null!=u)P=d.get(m);else{const e=d.get(m);e.isOnLastTick?this.freeTone(e):this.releaseTone(f,e),P=this.newTone(),d.set(m,P)}m++,P.pitches[0]=c.pitches[a],P.pitchCount=1,P.chordSize=c.pitches.length,P.instrumentIndex=n,P.note=c,P.noteStartPart=g,P.noteEndPart=q,P.prevNote=u,P.nextNote=b,P.prevNotePitchIndex=a,P.nextNotePitchIndex=a,P.atNoteStart=I,P.passedEndOfNote=x,P.forceContinueAtStart=w&&null!=u,P.forceContinueAtEnd=M&&null!=b,this.computeTone(e,t,i,P,!1,!1)}}(g.continues&&d.count()<=0||p.pitches.length<=0)&&f.envelopeComputer.reset()}for(;d.count()>m;){const i=d.popBack(),n=e.channels[t];if(i.instrumentIndex<n.instruments.length&&!i.isOnLastTick){const e=a.instruments[i.instrumentIndex];this.releaseTone(e,i)}else this.freeTone(i)}this.clearTempMatchedPitchTones(m,f)}}}clearTempMatchedPitchTones(e,t){for(let i=e;i<this.tempMatchedPitchTones.length;i++){const e=this.tempMatchedPitchTones[i];null!=e&&(e.isOnLastTick?this.freeTone(e):this.releaseTone(t,e),this.tempMatchedPitchTones[i]=null)}}playTone(e,t,i,n){const s=this.channels[e].instruments[n.instrumentIndex];null!=s.synthesizer&&s.synthesizer(this,t,i,n,s),n.envelopeComputer.clearEnvelopes(),s.envelopeComputer.clearEnvelopes()}playModTone(e,t,i,n,s,a,r,o){const l=e.channels[t].instruments[a.instrumentIndex];if(null!=a.note){const e=this.getTicksIntoBar(),t=e/h.ticksPerPart,r=(e+1)/h.ticksPerPart,o=this.tickSampleCountdown,p=t+(r-t)*(1-o/i),u=t+(r-t)*(1-(o-s)/i),c=h.ticksPerPart*p,f=h.ticksPerPart*u,d=a.note.getEndPinIndex(this.getCurrentPart()),m=a.note.pins[d-1],v=a.note.pins[d],y=(a.note.start+m.time)*h.ticksPerPart,b=(a.note.start+v.time)*h.ticksPerPart,g=(c-y)/(b-y),S=(f-y)/(b-y);a.expression=m.size+(v.size-m.size)*g,a.expressionDelta=m.size+(v.size-m.size)*S-a.expression,He.modSynth(this,n,s,a,l)}}static computeChordExpression(e){return 1/(.25*(e-1)+1)}computeTone(e,t,i,n,s,a){const r=Math.ceil(i),o=e.channels[t],l=this.channels[t],p=o.instruments[n.instrumentIndex],u=l.instruments[n.instrumentIndex];u.awake=!0,u.tonesAddedInThisTick=!0,u.computed||u.compute(this,p,i,r,n,t,n.instrumentIndex);const c=p.getTransition(),f=p.getChord(),d=f.singleTone?1:He.computeChordExpression(n.chordSize),v=e.getChannelIsNoise(t),y=v?h.noiseInterval:1,b=h.ticksPerPart*i/this.samplesPerSecond,g=1/this.samplesPerSecond,w=1/h.partsPerBeat,M=this.getTicksIntoBar(),k=M/h.ticksPerPart,I=(M+1)/h.ticksPerPart,P=this.getCurrentPart();let E=1;n.specialIntervalExpressionMult=1;let T=a,z=0,D=0,H=1,O=1,R=d,L=d,G=16,C=h.keys[e.key].basePitch+h.pitchesPerOctave*e.octave,A=1,N=48;if(3==p.type)A=h.spectrumBaseExpression,v&&(C=h.spectrumBasePitch,A*=2),G=h.spectrumBasePitch,N=28;else if(4==p.type)C=h.spectrumBasePitch,A=h.drumsetBaseExpression,G=C;else if(2==p.type)C=v?h.chipNoises[p.chipNoise].basePitch:C+h.chipNoises[p.chipNoise].basePitch-12,A=h.noiseBaseExpression,G=C,N=h.chipNoises[p.chipNoise].isSoft?24:60;else if(1==p.type||11==p.type)A=h.fmBaseExpression;else if(0==p.type)A=h.chipBaseExpression,h.chipWaves[p.chipWave].isCustomSampled?h.chipWaves[p.chipWave].isPercussion?C=-12*Math.log2(h.chipWaves[p.chipWave].samples.length/h.chipWaves[p.chipWave].sampleRate)-84.37-(-60+h.chipWaves[p.chipWave].rootKey):C+=-12*Math.log2(h.chipWaves[p.chipWave].samples.length/h.chipWaves[p.chipWave].sampleRate)-96.37-(-60+h.chipWaves[p.chipWave].rootKey):h.chipWaves[p.chipWave].isSampled&&!h.chipWaves[p.chipWave].isPercussion?C=C-63+h.chipWaves[p.chipWave].extraSampleDetune:h.chipWaves[p.chipWave].isSampled&&h.chipWaves[p.chipWave].isPercussion&&(C=-51+h.chipWaves[p.chipWave].extraSampleDetune);else if(9==p.type)A=h.chipBaseExpression;else if(5==p.type)A=h.harmonicsBaseExpression;else if(12==p.type)A=h.additiveBaseExpression;else if(6==p.type)A=h.pwmBaseExpression;else if(8==p.type)A=h.supersawBaseExpression;else if(7==p.type)A=h.pickedStringBaseExpression;else{if(10!=p.type)throw new Error("Unknown instrument type in computeTone.");A=1,G=0,N=1,C=0}if((n.atNoteStart&&!c.isSeamless&&!n.forceContinueAtStart||n.freshlyAllocated)&&(n.reset(),null!=n.note&&(n.chipWaveStartOffset=n.note.chipWaveStartOffset),u.envelopeComputer.reset(),0==p.type&&p.isUsingAdvancedLoopControls)){const e=h.rawRawChipWaves[p.chipWave].samples.length-1,t=(n.chipWaveStartOffset+p.chipWaveStartOffset)/e,i=.999999999999999;for(let e=0;e<h.maxPitchOrOperatorCount;e++)n.phases[e]=p.chipWavePlayBackwards?Math.max(0,Math.min(i,t)):Math.max(0,t),n.directions[e]=p.chipWavePlayBackwards?-1:1,n.chipWaveCompletions[e]=0,n.chipWavePrevWavesL[e]=0,n.chipWavePrevWavesR[e]=0,n.chipWaveCompletionsLastWaveL[e]=0,n.chipWaveCompletionsLastWaveR[e]=0}n.freshlyAllocated=!1;for(let e=0;e<h.maxPitchOrOperatorCount;e++)n.phaseDeltas[e]=0,n.phaseDeltaScales[e]=0,n.operatorExpressions[e]=0,n.operatorExpressionDeltas[e]=0;n.expression=0,n.expressionDelta=0;for(let e=0;e<(11==p.type?6:h.operatorCount);e++)n.operatorWaves[e]=He.getOperatorWave(p.operators[e].waveform,p.operators[e].pulseWidth);if(s){const e=n.ticksSinceReleased,t=n.ticksSinceReleased+1;z=D=n.lastInterval;const i=Math.abs(p.getFadeOutTicks());H=He.noteSizeToVolumeMult((1-e/i)*h.noteSizeMax),O=He.noteSizeToVolumeMult((1-t/i)*h.noteSizeMax),a&&(O=0),n.ticksSinceReleased+1>=i&&(T=!0)}else if(null==n.note)H=O=1,n.lastInterval=0,n.ticksSinceReleased=0,n.liveInputSamplesHeld+=r;else{const e=n.note,t=n.nextNote,i=n.noteStartPart,s=n.noteEndPart,a=e.getEndPinIndex(P),r=e.pins[a-1],o=e.pins[a],l=i*h.ticksPerPart,u=s*h.ticksPerPart,f=(e.start+r.time)*h.ticksPerPart,d=(e.start+o.time)*h.ticksPerPart;n.ticksSinceReleased=0;const m=P*h.ticksPerPart+this.tick,v=m+1,y=m-l,b=v-l,g=Math.min(1,(m-f)/(d-f)),S=Math.min(1,(v-f)/(d-f));if(H=1,O=1,z=r.interval+(o.interval-r.interval)*g,D=r.interval+(o.interval-r.interval)*S,n.lastInterval=D,!c.isSeamless&&!n.forceContinueAtEnd||null==t){const e=-p.getFadeOutTicks();if(e>0){const t=u-l;H*=Math.min(1,(t-y)/e),O*=Math.min(1,(t-b)/e),v>=l+t&&(T=!0)}}}n.isOnLastTick=T;let B,V,$=p.noteFilter;if(p.noteFilterType){const e=p.noteFilter;null==p.noteSubFilters[1]&&(p.noteSubFilters[1]=new ke);const i=p.noteSubFilters[1];let s=p.noteFilterSimpleCut,a=p.noteFilterSimplePeak,r=p.noteFilterSimpleCut,o=p.noteFilterSimplePeak,l=!1;this.isModActive(h.modulators.dictionary["note filt cut"].index,t,n.instrumentIndex)&&(s=this.getModValue(h.modulators.dictionary["note filt cut"].index,t,n.instrumentIndex,!1),r=this.getModValue(h.modulators.dictionary["note filt cut"].index,t,n.instrumentIndex,!0),l=!0),this.isModActive(h.modulators.dictionary["note filt peak"].index,t,n.instrumentIndex)&&(a=this.getModValue(h.modulators.dictionary["note filt peak"].index,t,n.instrumentIndex,!1),o=this.getModValue(h.modulators.dictionary["note filt peak"].index,t,n.instrumentIndex,!0),l=!0),e.convertLegacySettingsForSynth(s,a,!l),i.convertLegacySettingsForSynth(r,o,!l),B=e.controlPoints[0],V=i.controlPoints[0],p.noteFilter=e,p.tmpNoteFilterStart=e}const U=n.envelopeComputer,j=[];for(let e=0;e<h.maxEnvelopeCount;e++)j[e]=0;for(let e=0;e<p.envelopeCount;e++){let i=p.envelopes[e].perEnvelopeSpeed;this.isModActive(h.modulators.dictionary["individual envelope speed"].index,t,n.instrumentIndex)&&null!=p.envelopes[e].tempEnvelopeSpeed&&(i=p.envelopes[e].tempEnvelopeSpeed);let s=h.arpSpeedScale[p.envelopeSpeed]*i;this.isModActive(h.modulators.dictionary["envelope speed"].index,t,n.instrumentIndex)&&(s=Math.max(0,Math.min(h.arpSpeedScale.length-1,this.getModValue(h.modulators.dictionary["envelope speed"].index,t,n.instrumentIndex,!1))),s=Number.isInteger(s)?h.arpSpeedScale[s]*i:(1-s%1)*h.arpSpeedScale[Math.floor(s)]+s%1*h.arpSpeedScale[Math.ceil(s)]*i),j[e]=s}U.computeEnvelopes(p,P,u.envelopeTime,h.ticksPerPart*k,i/this.samplesPerSecond,n,j,u,this);const Q=n.envelopeComputer.envelopeStarts,_=n.envelopeComputer.envelopeEnds;if(p.noteFilter=$,!c.continues||null!=n.prevNote&&null!=n.note||u.envelopeComputer.reset(),null!=n.note&&c.slides){const e=n.prevNote,t=n.nextNote;if(null!=e){const t=e.pitches[n.prevNotePitchIndex]+e.pins[e.pins.length-1].interval-n.pitches[0];if(U.prevSlideStart&&(z+=t*U.prevSlideRatioStart),U.prevSlideEnd&&(D+=t*U.prevSlideRatioEnd),!f.singleTone){const t=e.pitches.length-n.chordSize;U.prevSlideStart&&(R=He.computeChordExpression(n.chordSize+t*U.prevSlideRatioStart)),U.prevSlideEnd&&(L=He.computeChordExpression(n.chordSize+t*U.prevSlideRatioEnd))}}if(null!=t){const e=t.pitches[n.nextNotePitchIndex]-(n.pitches[0]+n.note.pins[n.note.pins.length-1].interval);if(U.nextSlideStart&&(z+=e*U.nextSlideRatioStart),U.nextSlideEnd&&(D+=e*U.nextSlideRatioEnd),!f.singleTone){const e=t.pitches.length-n.chordSize;U.nextSlideStart&&(R=He.computeChordExpression(n.chordSize+e*U.nextSlideRatioStart)),U.nextSlideEnd&&(L=He.computeChordExpression(n.chordSize+e*U.nextSlideRatioEnd))}}}if(F(p.effects)){let e=h.justIntonationSemitones[p.pitchShift]/y,i=1,s=1;this.isModActive(h.modulators.dictionary["pitch shift"].index,t,n.instrumentIndex)&&(e=h.justIntonationSemitones[h.justIntonationSemitones.length-1],i=this.getModValue(h.modulators.dictionary["pitch shift"].index,t,n.instrumentIndex,!1)/h.pitchShiftCenter,s=this.getModValue(h.modulators.dictionary["pitch shift"].index,t,n.instrumentIndex,!0)/h.pitchShiftCenter);z+=e*Q[19]*i,D+=e*_[19]*s}if(x(p.effects)||this.isModActive(h.modulators.dictionary["song detune"].index,t,n.instrumentIndex)){const e=Q[20],i=_[20];let s=p.detune,a=p.detune;this.isModActive(h.modulators.dictionary.detune.index,t,n.instrumentIndex)&&(s=this.getModValue(h.modulators.dictionary.detune.index,t,n.instrumentIndex,!1)+h.detuneCenter,a=this.getModValue(h.modulators.dictionary.detune.index,t,n.instrumentIndex,!0)+h.detuneCenter),this.isModActive(h.modulators.dictionary["song detune"].index,t,n.instrumentIndex)&&(s+=4*this.getModValue(h.modulators.dictionary["song detune"].index,t,n.instrumentIndex,!1),a+=4*this.getModValue(h.modulators.dictionary["song detune"].index,t,n.instrumentIndex,!0)),z+=He.detuneToCents(s)*e*h.pitchesPerOctave/1200,D+=He.detuneToCents(a)*i*h.pitchesPerOctave/1200}if(q(p.effects)){let e,i,s,a;if(p.vibrato==h.vibratos.length?(e=2*p.vibratoDelay,p.vibratoDelay==h.modulators.dictionary["vibrato delay"].maxRawVol&&(e=Number.POSITIVE_INFINITY),i=p.vibratoDepth,s=i):(e=h.vibratos[p.vibrato].delayTicks,i=h.vibratos[p.vibrato].amplitude,s=i),this.isModActive(h.modulators.dictionary["vibrato delay"].index,t,n.instrumentIndex)&&(e=2*this.getModValue(h.modulators.dictionary["vibrato delay"].index,t,n.instrumentIndex,!1),e==2*h.modulators.dictionary["vibrato delay"].maxRawVol&&(e=Number.POSITIVE_INFINITY)),this.isModActive(h.modulators.dictionary["vibrato depth"].index,t,n.instrumentIndex)&&(i=this.getModValue(h.modulators.dictionary["vibrato depth"].index,t,n.instrumentIndex,!1)/25,s=this.getModValue(h.modulators.dictionary["vibrato depth"].index,t,n.instrumentIndex,!0)/25),null!=n.prevVibrato)a=n.prevVibrato;else{if(a=i*He.getLFOAmplitude(p,b*u.vibratoTime)*Q[21],e>0){const t=e-U.noteTicksStart;a*=Math.max(0,Math.min(1,1-t/2))}}let r=He.getLFOAmplitude(p,b*u.nextVibratoTime);const o=_[21];if(10!=p.type){let t=s*r*o;if(e>0){const i=e-U.noteTicksEnd;t*=Math.max(0,Math.min(1,1-i/2))}n.prevVibrato=t,z+=a,D+=t}}if(!c.isSeamless&&!n.forceContinueAtStart||null==n.prevNote){const e=p.getFadeInSeconds();e>0&&(H*=Math.min(1,U.noteSecondsStartUnscaled/e),O*=Math.min(1,U.noteSecondsEndUnscaled/e))}4==p.type&&null==n.drumsetPitch&&(n.drumsetPitch=n.pitches[0],null!=n.note&&(n.drumsetPitch+=n.note.pickMainInterval()),n.drumsetPitch=Math.max(0,Math.min(h.drumCount-1,n.drumsetPitch)));let K=U.lowpassCutoffDecayVolumeCompensation;const J=Q[2],Y=_[2];if(p.noteFilterType){const e=Q[22],t=_[22],i=Q[30],s=_[30];B.toCoefficients(He.tempFilterStartCoefficients,this.samplesPerSecond,J*e,i),V.toCoefficients(He.tempFilterEndCoefficients,this.samplesPerSecond,Y*t,s),n.noteFiltersL.length<1&&(n.noteFiltersL[0]=new W),n.noteFiltersR.length<1&&(n.noteFiltersR[0]=new W),n.noteFiltersL[0].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/r,0==B.type),n.noteFiltersR[0].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/r,0==B.type),K*=B.getVolumeCompensationMult(),n.noteFilterCount=1}else{const e=null!=p.tmpNoteFilterStart?p.tmpNoteFilterStart:p.noteFilter;for(let t=0;t<e.controlPointCount;t++){const i=Q[22+t],s=_[22+t],a=Q[30+t],o=_[30+t];let l=e.controlPoints[t];const h=null!=p.tmpNoteFilterEnd&&null!=p.tmpNoteFilterEnd.controlPoints[t]?p.tmpNoteFilterEnd.controlPoints[t]:e.controlPoints[t];l.type!=h.type&&(l=h),l.toCoefficients(He.tempFilterStartCoefficients,this.samplesPerSecond,J*i,a),h.toCoefficients(He.tempFilterEndCoefficients,this.samplesPerSecond,Y*s,o),n.noteFiltersL.length<=t&&(n.noteFiltersL[t]=new W),n.noteFiltersR.length<=t&&(n.noteFiltersR[t]=new W),n.noteFiltersL[t].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/r,0==l.type),n.noteFiltersR[t].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/r,0==l.type),K*=l.getVolumeCompensationMult()}n.noteFilterCount=e.controlPointCount}if(4==p.type){const e=n.envelopeComputer,t=p.getDrumsetEnvelope(n.drumsetPitch);K*=Ee.getLowpassCutoffDecayVolumeCompensation(t),e.computeDrumsetEnvelopes(p,t,w,k,I);const i=e.drumsetFilterEnvelopeStart,s=e.drumsetFilterEnvelopeEnd,a=this.tempDrumSetControlPoint;a.type=0,a.gain=Me.getRoundedSettingValueFromLinearGain(.5),a.freq=Me.getRoundedSettingValueFromHz(8e3),a.toCoefficients(He.tempFilterStartCoefficients,this.samplesPerSecond,i*(1+i),1),a.toCoefficients(He.tempFilterEndCoefficients,this.samplesPerSecond,s*(1+s),1),n.noteFiltersL.length==n.noteFilterCount&&(n.noteFiltersL[n.noteFilterCount]=new W),n.noteFiltersR.length==n.noteFilterCount&&(n.noteFiltersR[n.noteFilterCount]=new W),n.noteFiltersL[n.noteFilterCount].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/r,!0),n.noteFiltersR[n.noteFilterCount].loadCoefficientsWithGradient(He.tempFilterStartCoefficients,He.tempFilterEndCoefficients,1/r,!0),n.noteFilterCount++}if(K=Math.min(3,K),1==p.type||11==p.type){let e=1,i=0,s=0;const a=f.arpeggiates;if(n.pitchCount>1&&a){const e=Math.floor(u.arpTime/h.ticksPerArpeggio);s=n.pitches[S(n.pitchCount,p.fastTwoNoteArp,e)]-n.pitches[0]}const o=11==p.type?p.customAlgorithm.carrierCount:h.algorithms[p.algorithm].carrierCount;for(let l=0;l<(11==p.type?6:h.operatorCount);l++){const u=11==p.type?p.customAlgorithm.associatedCarrier[l]-1:h.algorithms[p.algorithm].associatedCarrier[l]-1,c=n.pitches[a?0:l<n.pitchCount?l:u<n.pitchCount?u:0],f=h.operatorFrequencies[p.operators[l].frequency].mult,d=h.operatorCarrierInterval[u]+s,m=C+(c+z)*y+d,v=C+(c+D)*y+d,b=xe.frequencyFromPitch(m),S=xe.frequencyFromPitch(v),w=h.operatorFrequencies[p.operators[l].frequency].hzOffset,M=f*b+w,k=f*S+w,F=Q[6+l],x=_[6+l];let q,I;1!=F||1!=x?(q=Math.pow(2,Math.log2(M/b)*F)*b,I=Math.pow(2,Math.log2(k/S)*x)*S):(q=M,I=k),n.phaseDeltas[l]=q*g,n.phaseDeltaScales[l]=Math.pow(I/q,1/r);let P=p.operators[l].amplitude,E=p.operators[l].amplitude;l<4?this.isModActive(h.modulators.dictionary["fm slider 1"].index+l,t,n.instrumentIndex)&&(P*=this.getModValue(h.modulators.dictionary["fm slider 1"].index+l,t,n.instrumentIndex,!1)/15,E*=this.getModValue(h.modulators.dictionary["fm slider 1"].index+l,t,n.instrumentIndex,!0)/15):this.isModActive(h.modulators.dictionary["fm slider 5"].index+l-4,t,n.instrumentIndex)&&(P*=this.getModValue(h.modulators.dictionary["fm slider 5"].index+l-4,t,n.instrumentIndex,!1)/15,E*=this.getModValue(h.modulators.dictionary["fm slider 5"].index+l-4,t,n.instrumentIndex,!0)/15);const T=He.operatorAmplitudeCurve(P),H=He.operatorAmplitudeCurve(E);let O=T*h.operatorFrequencies[p.operators[l].frequency].amplitudeSign,R=H*h.operatorFrequencies[p.operators[l].frequency].amplitudeSign;if(l<o){let e;e=null!=n.prevPitchExpressions[l]?n.prevPitchExpressions[l]:Math.pow(2,-(m-G)/N);const t=Math.pow(2,-(v-G)/N);n.prevPitchExpressions[l]=t,O*=e,R*=t,i+=H}else O*=1.5*h.sineWaveLength,R*=1.5*h.sineWaveLength,e*=1-Math.min(1,p.operators[l].amplitude/15);if(O*=Q[12+l],R*=_[12+l],this.isModActive(h.modulators.dictionary["pre volume"].index,t,n.instrumentIndex)){const e=this.getModValue(h.modulators.dictionary["pre volume"].index,t,n.instrumentIndex,!1),i=this.getModValue(h.modulators.dictionary["pre volume"].index,t,n.instrumentIndex,!0);O*=e<=0?(e+h.volumeRange/2)/(h.volumeRange/2):He.instrumentVolumeToVolumeMult(e),R*=i<=0?(i+h.volumeRange/2)/(h.volumeRange/2):He.instrumentVolumeToVolumeMult(i)}n.operatorExpressions[l]=O,n.operatorExpressionDeltas[l]=(R-O)/r}e*=(Math.pow(2,2-1.4*p.feedbackAmplitude/15)-1)/3,e*=1-Math.min(1,Math.max(0,i-1)/2),e=1+3*e;const l=A*e*K*H*R*Q[0],c=A*e*K*O*L*_[0];n.expression=l,n.expressionDelta=(c-l)/r;let d=p.feedbackAmplitude,m=p.feedbackAmplitude;this.isModActive(h.modulators.dictionary["fm feedback"].index,t,n.instrumentIndex)&&(d*=this.getModValue(h.modulators.dictionary["fm feedback"].index,t,n.instrumentIndex,!1)/15,m*=this.getModValue(h.modulators.dictionary["fm feedback"].index,t,n.instrumentIndex,!0)/15);let v=.3*h.sineWaveLength*d/15;const b=.3*h.sineWaveLength*m/15;let w=v*Q[18],M=b*_[18];n.feedbackMult=w,n.feedbackDelta=(M-w)/r}else{const e=Math.pow(2,(D-z)*y/12),i=Math.pow(e,1/r);let s=n.pitches[0];if(n.pitchCount>1&&(f.arpeggiates||f.customInterval)){const e=Math.floor(u.arpTime/h.ticksPerArpeggio);if(f.customInterval){const t=n.pitches[1+S(n.pitchCount-1,p.fastTwoNoteArp,e)]-n.pitches[0];E=Math.pow(2,t/12),n.specialIntervalExpressionMult=Math.pow(2,-t/N)}else s=n.pitches[S(n.pitchCount,p.fastTwoNoteArp,e)]}const a=C+(s+z)*y,o=C+(s+D)*y;let l;l=null!=n.prevPitchExpressions[0]?n.prevPitchExpressions[0]:Math.pow(2,-(a-G)/N);const d=Math.pow(2,-(o-G)/N);n.prevPitchExpressions[0]=d;let v=A*K;if(2==p.type&&(v*=h.chipNoises[p.chipNoise].expression),0==p.type&&(v*=h.chipWaves[p.chipWave].expression),6==p.type){const e=m(p.pulseWidth);let i=e,s=e;this.isModActive(h.modulators.dictionary["pulse width"].index,t,n.instrumentIndex)&&(i=this.getModValue(h.modulators.dictionary["pulse width"].index,t,n.instrumentIndex,!1)/(2*h.pulseWidthRange),s=this.getModValue(h.modulators.dictionary["pulse width"].index,t,n.instrumentIndex,!0)/(2*h.pulseWidthRange));const a=i*Q[3],o=s*_[3];n.pulseWidth=a,n.pulseWidthDelta=(o-a)/r;let l=p.decimalOffset;this.isModActive(h.modulators.dictionary["decimal offset"].index,t,n.instrumentIndex)&&(l=this.getModValue(h.modulators.dictionary["decimal offset"].index,t,n.instrumentIndex,!1));const u=l*Q[38];n.decimalOffset=u,n.pulseWidth-=n.decimalOffset/1e4}if(7==p.type){let e=p.stringSustain,i=p.stringSustain;this.isModActive(h.modulators.dictionary.sustain.index,t,n.instrumentIndex)&&(e=this.getModValue(h.modulators.dictionary.sustain.index,t,n.instrumentIndex,!1),i=this.getModValue(h.modulators.dictionary.sustain.index,t,n.instrumentIndex,!0)),n.stringSustainStart=e,n.stringSustainEnd=i,v*=Math.pow(2,.7*(1-e/(h.stringSustainRange-1)))}const b=xe.frequencyFromPitch(a);if(0==p.type||9==p.type||5==p.type||7==p.type||3==p.type||6==p.type||2==p.type){const e=p.unisonVoices,t=p.unisonSpread,s=p.unisonOffset;v*=p.unisonExpression*(7==p.type?1:e/2);const a=Q[5],o=_[5],l=Math.pow(2,(s+t)*a/12),h=Math.pow(2,(s+t)*o/12),u=Math.pow(2,(s-t)*a/12)*E,c=Math.pow(2,(s-t)*o/12)*E;n.phaseDeltas[0]=b*g*l,n.phaseDeltas[1]=b*g*u,n.phaseDeltaScales[0]=i*Math.pow(h/l,1/r),n.phaseDeltaScales[1]=i*Math.pow(c/u,1/r)}else n.phaseDeltas[0]=b*g,n.phaseDeltaScales[0]=i;let w=1,M=1;if(8==p.type){const i=1/Math.sqrt(h.supersawVoiceCount);let s=p.supersawDynamism/h.supersawDynamismMax,a=p.supersawDynamism/h.supersawDynamismMax;this.isModActive(h.modulators.dictionary.dynamism.index,t,n.instrumentIndex)&&(s=this.getModValue(h.modulators.dictionary.dynamism.index,t,n.instrumentIndex,!1)/h.supersawDynamismMax,a=this.getModValue(h.modulators.dictionary.dynamism.index,t,n.instrumentIndex,!0)/h.supersawDynamismMax);const o=1-Math.pow(Math.max(0,1-s*Q[39]),.2),l=1-Math.pow(Math.max(0,1-a*_[39]),.2),u=Math.pow(2,Math.log2(i)*o),c=Math.pow(2,Math.log2(i)*l),f=Math.sqrt((1/Math.pow(u,2)-1)/(h.supersawVoiceCount-1)),d=Math.sqrt((1/Math.pow(c,2)-1)/(h.supersawVoiceCount-1));n.supersawDynamism=f,n.supersawDynamismDelta=(d-f)/r;const v=-1==n.supersawDelayIndex;if(v){let e=0;for(let t=0;t<h.supersawVoiceCount;t++)n.phases[t]=e,e+=-Math.log(Math.random());const t=1+(h.supersawVoiceCount-1)*f;let i=0;for(let t=0;t<h.supersawVoiceCount;t++){const s=0==t?1:f,a=n.phases[t]/e;n.phases[t]=a,i+=(a-.5)*s}let s=1,a=0;for(let e=h.supersawVoiceCount-1;e>=0;e--){const r=1-n.phases[e],o=r-a;if(i<0){const e=-i/t;if(e<o){s=a+e;break}}i+=o*t-(0==e?1:f),a=r}for(let e=0;e<h.supersawVoiceCount;e++)n.phases[e]+=s;for(let e=1;e<h.supersawVoiceCount-1;e++){const t=e+Math.floor(Math.random()*(h.supersawVoiceCount-e)),i=n.phases[e];n.phases[e]=n.phases[t],n.phases[t]=i}}const y=p.supersawSpread/h.supersawSpreadMax;let S=y,k=y;this.isModActive(h.modulators.dictionary.spread.index,t,n.instrumentIndex)&&(S=this.getModValue(h.modulators.dictionary.spread.index,t,n.instrumentIndex,!1)/h.supersawSpreadMax,k=this.getModValue(h.modulators.dictionary.spread.index,t,n.instrumentIndex,!0)/h.supersawSpreadMax);const F=.5*(S*Q[40]+k*_[40]),x=Math.pow(1-Math.sqrt(Math.max(0,1-F)),1.75);for(let e=0;e<h.supersawVoiceCount;e++){const t=0==e?0:Math.pow(((e+1>>1)-.5+.025*((2&e)-1))/(h.supersawVoiceCount>>1),1.1)*(2*(1&e)-1);n.supersawUnisonDetunes[e]=Math.pow(2,x*t/12)}const q=p.supersawShape/h.supersawShapeMax;let I=q*Q[41],P=q*_[41];this.isModActive(h.modulators.dictionary["saw shape"].index,t,n.instrumentIndex)&&(I=this.getModValue(h.modulators.dictionary["saw shape"].index,t,n.instrumentIndex,!1)/h.supersawShapeMax,P=this.getModValue(h.modulators.dictionary["saw shape"].index,t,n.instrumentIndex,!0)/h.supersawShapeMax);const E=I*Q[41],T=P*_[41];n.supersawShape=E,n.supersawShapeDelta=(T-E)/r;let z=p.decimalOffset;this.isModActive(h.modulators.dictionary["decimal offset"].index,t,n.instrumentIndex)&&(z=this.getModValue(h.modulators.dictionary["decimal offset"].index,t,n.instrumentIndex,!1));const D=z*Q[38];n.decimalOffset=D;const H=m(p.pulseWidth);let O=H,R=H;this.isModActive(h.modulators.dictionary["pulse width"].index,t,n.instrumentIndex)&&(O=this.getModValue(h.modulators.dictionary["pulse width"].index,t,n.instrumentIndex,!1)/(2*h.pulseWidthRange),R=this.getModValue(h.modulators.dictionary["pulse width"].index,t,n.instrumentIndex,!0)/(2*h.pulseWidthRange));let L=O*Q[3],G=R*_[3];L-=D/1e4,G-=D/1e4;const C=null!=n.supersawPrevPhaseDelta?n.supersawPrevPhaseDelta:b*g,A=b*g*e;n.supersawPrevPhaseDelta=A;const N=L/C,B=G/A;n.supersawDelayLength=N,n.supersawDelayLengthDelta=(B-N)/r;const W=Math.ceil(Math.max(N,B))+2;if(null==n.supersawDelayLine||n.supersawDelayLine.length<=W){const e=Math.ceil(.5*this.samplesPerSecond/xe.frequencyFromPitch(24)),t=new Float32Array(He.fittingPowerOfTwo(Math.max(e,W)));if(!v&&null!=n.supersawDelayLine){const e=n.supersawDelayLine.length-1>>0,i=n.supersawDelayIndex;for(let s=0;s<n.supersawDelayLine.length;s++)t[s]=n.supersawDelayLine[i+s&e]}n.supersawDelayLine=t,n.supersawDelayIndex=n.supersawDelayLine.length}else v&&(n.supersawDelayLine.fill(0),n.supersawDelayIndex=n.supersawDelayLine.length);const V=h.pwmBaseExpression/h.supersawBaseExpression;w*=(1+(V-1)*E)/Math.sqrt(1+(h.supersawVoiceCount-1)*f*f),M*=(1+(V-1)*T)/Math.sqrt(1+(h.supersawVoiceCount-1)*d*d)}let k=v*H*R*l*Q[0]*w,F=v*O*L*d*_[0]*M;if(this.isModActive(h.modulators.dictionary["pre volume"].index,t,n.instrumentIndex)){const e=this.getModValue(h.modulators.dictionary["pre volume"].index,t,n.instrumentIndex,!1),i=this.getModValue(h.modulators.dictionary["pre volume"].index,t,n.instrumentIndex,!0);k*=e<=0?(e+h.volumeRange/2)/(h.volumeRange/2):He.instrumentVolumeToVolumeMult(e),F*=i<=0?(i+h.volumeRange/2)/(h.volumeRange/2):He.instrumentVolumeToVolumeMult(i)}if(n.expression=k,n.expressionDelta=(F-k)/r,7==p.type){let e;if(null!=n.prevStringDecay)e=n.prevStringDecay;else{const t=n.envelopeComputer.envelopeStarts[4];e=1-Math.min(1,t*n.stringSustainStart/(h.stringSustainRange-1))}const t=n.envelopeComputer.envelopeEnds[4];let i=1-Math.min(1,t*n.stringSustainEnd/(h.stringSustainRange-1));n.prevStringDecay=i;const s=p.unisonVoices;for(let e=n.pickedStrings.length;e<s;e++)n.pickedStrings[e]=new Pe;if(n.atNoteStart&&!c.continues&&!n.forceContinueAtStart)for(const e of n.pickedStrings)e.delayIndex=-1;for(let t=0;t<s;t++)n.pickedStrings[t].update(this,u,n,t,r,e,i,p.stringSustainType)}}}static getLFOAmplitude(e,t){let i=0;for(const n of h.vibratoTypes[e.vibratoType].periodsSeconds)i+=Math.sin(2*Math.PI*t/n);return i}static getInstrumentSynthFunction(e){if(1==e.type){const t=e.algorithm+"_"+e.feedbackType;if(null==He.fmSynthFunctionCache[t]){const i=[];for(const t of He.fmSourceTemplate)if(-1!=t.indexOf("// CARRIER OUTPUTS")){const n=[];for(let t=0;t<h.algorithms[e.algorithm].carrierCount;t++)n.push("operator"+t+"Scaled");i.push(t.replace("/*operator#Scaled*/",n.join(" + ")))}else if(-1!=t.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let t=h.operatorCount-1;t>=0;t--)for(const n of He.operatorSourceTemplate)if(-1!=n.indexOf("/* + operator@Scaled*/")){let s="";for(const i of h.algorithms[e.algorithm].modulatedBy[t])s+=" + operator"+(i-1)+"Scaled";const a=h.feedbacks[e.feedbackType].indices[t];if(a.length>0){s+=" + feedbackMult * (";const e=[];for(const t of a)e.push("operator"+(t-1)+"Output");s+=e.join(" + ")+")"}i.push(n.replace(/\#/g,t+"").replace("/* + operator@Scaled*/",s))}else i.push(n.replace(/\#/g,t+""));else if(-1!=t.indexOf("#"))for(let e=0;e<h.operatorCount;e++)i.push(t.replace(/\#/g,e+""));else i.push(t);const n="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {"+i.join("\n")+"}";He.fmSynthFunctionCache[t]=new Function("Config","Synth",n)(h,He)}return He.fmSynthFunctionCache[t]}if(0==e.type)return e.isUsingAdvancedLoopControls?He.loopableChipSynth:He.chipSynth;if(9==e.type)return He.chipSynth;if(5==e.type)return He.harmonicsSynth;if(12==e.type)return He.additiveSynth;if(6==e.type)return He.pulseWidthSynth;if(8==e.type)return He.supersawSynth;if(7==e.type)return He.pickedStringSynth;if(2==e.type)return He.noiseSynth;if(3==e.type)return He.spectrumSynth;if(4==e.type)return He.drumsetSynth;if(10==e.type)return He.modSynth;if(11==e.type){const t=e.customAlgorithm.name+"_"+e.customFeedbackType.name;if(null==He.fm6SynthFunctionCache[t]){const i=[];for(const t of He.fmSourceTemplate)if(-1!=t.indexOf("// CARRIER OUTPUTS")){const n=[];for(let t=0;t<e.customAlgorithm.carrierCount;t++)n.push("operator"+t+"Scaled");i.push(t.replace("/*operator#Scaled*/",n.join(" + ")))}else if(-1!=t.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let t=h.operatorCount+2-1;t>=0;t--)for(const n of He.operatorSourceTemplate)if(-1!=n.indexOf("/* + operator@Scaled*/")){let s="";for(const i of e.customAlgorithm.modulatedBy[t])s+=" + operator"+(i-1)+"Scaled";const a=e.customFeedbackType.indices[t];if(a.length>0){s+=" + feedbackMult * (";const e=[];for(const t of a)e.push("operator"+(t-1)+"Output");s+=e.join(" + ")+")"}i.push(n.replace(/\#/g,t+"").replace("/* + operator@Scaled*/",s))}else i.push(n.replace(/\#/g,t+""));else if(-1!=t.indexOf("#"))for(let e=0;e<h.operatorCount+2;e++)i.push(t.replace(/\#/g,e+""));else i.push(t);const n="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {"+i.join("\n")+"}";He.fm6SynthFunctionCache[t]=new Function("Config","Synth",n)(h,He)}return He.fm6SynthFunctionCache[t]}throw new Error("Unrecognized instrument type: "+e.type)}static wrap(e,t){return(e%t+t)%t}static loopableChipSynth(e,t,i,n,s){const a=P(s.effects)&&s.aliases,r=e.tempInstrumentSampleBufferL,o=e.tempInstrumentSampleBufferR,l=s.waveL,p=s.waveR,h=s.volumeScale,u=a&&8==s.type?l.length:l.length-1;let c=Math.max(0,Math.min(u,s.chipWaveLoopEnd)),f=Math.max(0,Math.min(c-1,s.chipWaveLoopStart)),d=c-f;d<2&&(f=0,c=u,d=u);const m=s.chipWaveLoopMode,v=s.chipWavePlayBackwards,y=n.specialIntervalExpressionMult*s.unisonSign;1!=s.unisonVoices||0!=s.unisonSpread||s.chord.customInterval||(n.phases[1]=n.phases[0]);let b=n.phaseDeltas[0]*u,g=n.phaseDeltas[1]*u,S=n.directions[0],w=n.directions[1],M=n.chipWaveCompletions[0],k=n.chipWaveCompletions[1];3!==m&&2!==m&&0!==m||(v?(S=-1,w=-1):(S=1,w=1)),0!==m&&1!==m||(M=0,k=0);let F=n.chipWaveCompletionsLastWaveL[0],x=n.chipWaveCompletionsLastWaveL[1],q=n.chipWaveCompletionsLastWaveR[0],I=n.chipWaveCompletionsLastWaveR[1];const E=1e3,T=+n.phaseDeltaScales[0],z=+n.phaseDeltaScales[1];let D=+n.expression;const H=+n.expressionDelta;let O=He.wrap(n.phases[0],1)*u,R=He.wrap(n.phases[1],1)*u,L=0,G=0,C=0,A=0;if(!a){const e=Math.floor(O),t=Math.floor(R),i=He.wrap(e,u),n=He.wrap(t,u),s=O-e,a=R-t;L=+l[i],G=+l[n],C=+p[i],A=+p[n],L+=(l[He.wrap(i+1,u)]-L)*s,G+=(l[He.wrap(n+1,u)]-G)*a,C+=(p[He.wrap(i+1,u)]-C)*s,A+=(p[He.wrap(n+1,u)]-A)*a}const N=n.noteFiltersL,B=n.noteFiltersR,W=0|n.noteFilterCount;let V=+n.initialNoteFilterInputL1,$=+n.initialNoteFilterInputR1,U=+n.initialNoteFilterInputL2,j=+n.initialNoteFilterInputR2;const Q=He.applyFilters,_=t+i;let K=n.chipWavePrevWavesL[0],J=n.chipWavePrevWavesL[1],Y=n.chipWavePrevWavesR[0],X=n.chipWavePrevWavesR[1];for(let e=t;e<_;e++){M>0&&M<E&&M++,k>0&&k<E&&k++;let t=0;O+=b*S,R+=g*w,2===m?(1===S?O>u&&(M<=0&&(F=K,q=Y,M++),t=1):-1===S&&O<0&&(M<=0&&(F=K,q=Y,M++),t=1),1===w?R>u&&(k<=0&&(x=J,I=X,k++),t=1):-1===S&&R<0&&(k<=0&&(x=J,I=X,k++),t=1)):3===m?(1===S?O>c&&(M<=0&&(F=K,q=Y,M++),t=1):-1===S&&O<f&&(M<=0&&(F=K,q=Y,M++),t=1),1===w?R>c&&(k<=0&&(x=J,I=X,k++),t=1):-1===S&&R<f&&(k<=0&&(x=J,I=X,k++),t=1)):0===m?(1===S?O>c&&(O=f+He.wrap(O-c,d),t=1):-1===S&&O<f&&(O=c-He.wrap(f-O,d),t=1),1===w?R>c&&(R=f+He.wrap(R-c,d),t=1):-1===w&&R<f&&(R=c-He.wrap(f-R,d),t=1)):1===m&&(1===S?O>c&&(O=c-He.wrap(O-c,d),S=-1,t=1):-1===S&&O<f&&(O=f+He.wrap(f-O,d),S=1,t=1),1===w?R>c&&(R=c-He.wrap(R-c,d),w=-1,t=1):-1===w&&R<f&&(R=f+He.wrap(f-R,d),w=1,t=1));let i=0,n=0,s=0,v=0,P=0,_=0;if(a){i=l[He.wrap(Math.floor(O),u)],n=l[He.wrap(Math.floor(R),u)],s=p[He.wrap(Math.floor(O),u)],v=p[He.wrap(Math.floor(R),u)],K=i,J=n,Y=s,X=v;const e=M>0?(E-Math.min(M,E))/E:1,t=k>0?(E-Math.min(k,E))/E:1;P=0,M>0?(P+=F*e,_+=F*e):(P+=i,_+=s),k>0?(P+=x*t,_+=I*t):(P+=n,_+=v)}else{const e=Math.floor(O),a=Math.floor(R),r=He.wrap(e,u),o=He.wrap(a,u);let h=l[r],d=l[o],T=p[r],z=p[o];const D=O-e,H=R-a;if(h+=(l[He.wrap(r+1,u)]-h)*D,d+=(l[He.wrap(o+1,u)]-d)*H,T+=(p[He.wrap(r+1,u)]-T)*D,z+=(p[He.wrap(o+1,u)]-z)*H,(0!==m||0!==f||c!==u)&&0!==t){let e=0,t=0,i=0,n=0;const s=Math.max(0,O-b*S),a=Math.max(0,R-g*w),r=Math.floor(s),o=Math.floor(a),h=He.wrap(r,u),c=He.wrap(o,u);e=l[h],t=l[c],i=p[h],n=p[c],e+=(l[He.wrap(h+1,u)]-e)*(s-r)*S,t+=(l[He.wrap(c+1,u)]-t)*(a-o)*w,i+=(p[He.wrap(h+1,u)]-i)*(s-r)*S,n+=(p[He.wrap(c+1,u)]-n)*(a-o)*w,L=e,G=t,C=i,A=n}1===m&&0!==t?(i=K,n=J,s=Y,v=X):(i=(h-L)/(b*S),n=(d-G)/(g*w),s=(T-C)/(b*S),v=(z-A)/(g*w)),K=i,J=n,Y=s,X=v,L=h,G=d,C=T,A=z;const N=M>0?(E-Math.min(M,E))/E:1,B=k>0?(E-Math.min(k,E))/E:1;M>0?(P+=F*N,_+=q*N):(P+=i,_+=s),k>0?(P+=x*B,_+=I*B):(P+=n*y,_+=v*y)}const Z=Q(P*h,V,U,W,N),ee=Q(_*h,$,j,W,B);U=V,j=$,V=P*h,$=_*h,b*=T,g*=z;const te=Z*D,ie=ee*D;D+=H,r[e]+=te,o[e]+=ie}n.phases[0]=O/u,n.phases[1]=R/u,n.phaseDeltas[0]=b/u,n.phaseDeltas[1]=g/u,n.directions[0]=S,n.directions[1]=w,n.chipWaveCompletions[0]=M,n.chipWaveCompletions[1]=k,n.chipWavePrevWavesL[0]=K,n.chipWavePrevWavesL[1]=J,n.chipWavePrevWavesR[0]=Y,n.chipWavePrevWavesR[1]=X,n.chipWaveCompletionsLastWaveL[0]=F,n.chipWaveCompletionsLastWaveL[1]=x,n.chipWaveCompletionsLastWaveR[0]=q,n.chipWaveCompletionsLastWaveR[1]=I,n.expression=D,e.sanitizeFilters(N),e.sanitizeFilters(B),n.initialNoteFilterInputL1=V,n.initialNoteFilterInputR1=$,n.initialNoteFilterInputL2=U,n.initialNoteFilterInputR2=j}static chipSynth(e,t,i,n,s){const a=P(s.effects)&&s.aliases,r=e.tempInstrumentSampleBufferL,o=e.tempInstrumentSampleBufferR,l=s.waveL,p=s.waveR,h=s.volumeScale,u=a&&8==s.type?l.length:l.length-1,c=n.specialIntervalExpressionMult*s.unisonSign;1!=s.unisonVoices||0!=s.unisonSpread||s.chord.customInterval||(n.phases[1]=n.phases[0]);let f=n.phaseDeltas[0]*u,d=n.phaseDeltas[1]*u;const m=+n.phaseDeltaScales[0],v=+n.phaseDeltaScales[1];let y=+n.expression;const b=+n.expressionDelta;let g=n.phases[0]%1*u,S=n.phases[1]%1*u;const w=n.noteFiltersL,M=n.noteFiltersR,k=0|n.noteFilterCount;let F=+n.initialNoteFilterInputL1,x=+n.initialNoteFilterInputR1,q=+n.initialNoteFilterInputL2,I=+n.initialNoteFilterInputR2;const E=He.applyFilters;let T=0,z=0,D=0,H=0;if(!a){const e=0|g,t=0|S,i=e%u,n=t%u,s=g-e,a=S-t;T=+l[i],z=+l[n],D=+p[i],H=+p[n],T+=(l[i+1]-T)*s,z+=(l[n+1]-z)*a,D+=(p[i+1]-D)*s,H+=(p[n+1]-H)*a}const O=t+i;for(let e=t;e<O;e++){let t,i,n,s,P,O;if(g+=f,S+=d,a)t=l[(0|g)%u],i=l[(0|S)%u],n=p[(0|g)%u],s=p[(0|S)%u],P=t+i,O=n+s;else{const e=0|g,a=0|S,r=e%u,o=a%u;let h=l[r],m=l[o],v=p[r],y=p[o];const b=g-e,w=S-a;h+=(l[r+1]-h)*b,m+=(l[o+1]-m)*w,v+=(p[r+1]-v)*b,y+=(p[o+1]-y)*w,t=(h-T)/f,i=(m-z)/d,n=(v-D)/f,s=(y-H)/d,T=h,z=m,D=v,H=y,P=t+i*c,O=n+s*c}const R=E(P*h,F,q,k,w),L=E(O*h,x,I,k,M);q=F,I=x,F=P*h,x=O*h,f*=m,d*=v;const G=R*y,C=L*y;y+=b,r[e]+=G,o[e]+=C}n.phases[0]=g/u,n.phases[1]=S/u,n.phaseDeltas[0]=f/u,n.phaseDeltas[1]=d/u,n.expression=y,e.sanitizeFilters(w),e.sanitizeFilters(M),n.initialNoteFilterInputL1=F,n.initialNoteFilterInputR1=x,n.initialNoteFilterInputL2=q,n.initialNoteFilterInputR2=I}static harmonicsSynth(e,t,i,n,s){const a=e.tempInstrumentSampleBufferL,r=s.waveL,o=r.length-1,l=n.specialIntervalExpressionMult*s.unisonSign;1!=s.unisonVoices||0!=s.unisonSpread||s.chord.customInterval||(n.phases[1]=n.phases[0]);let p=n.phaseDeltas[0]*o,h=n.phaseDeltas[1]*o;const u=+n.phaseDeltaScales[0],c=+n.phaseDeltaScales[1];let f=+n.expression;const d=+n.expressionDelta;let m=n.phases[0]%1*o,v=n.phases[1]%1*o;const y=n.noteFiltersL,b=0|n.noteFilterCount;let g=+n.initialNoteFilterInputL1,S=+n.initialNoteFilterInputL2;const w=He.applyFilters,M=0|m,k=0|v,F=M%o,x=k%o,q=m-M,I=v-k;let P=+r[F],E=+r[x];P+=(r[F+1]-P)*q,E+=(r[x+1]-E)*I;const T=t+i;for(let e=t;e<T;e++){m+=p,v+=h;const t=0|m,i=0|v,n=t%o,s=i%o;let M=r[n],k=r[s];const F=m-t,x=v-i;M+=(r[n+1]-M)*F,k+=(r[s+1]-k)*x;const q=(M-P)/p,I=(k-E)/h;P=M,E=k;const T=q+I*l,z=w(T,g,S,b,y);S=g,g=T,p*=u,h*=c;const D=z*f;f+=d,a[e]+=D}n.phases[0]=m/o,n.phases[1]=v/o,n.phaseDeltas[0]=p/o,n.phaseDeltas[1]=h/o,n.expression=f,e.sanitizeFilters(y),n.initialNoteFilterInputL1=g,n.initialNoteFilterInputL2=S}static pickedStringSynth(e,t,i,n,s){const a=s.unisonVoices;let r=He.pickedStringFunctionCache[a];if(null==r){let e="return (synth, bufferIndex, runLength, tone, instrumentState) => {";e+="\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n                const data = synth.tempInstrumentSampleBufferL;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFiltersL;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInputL1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInputL2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (";const t=[];for(let e=0;e<a;e++)t.push("fractionalDelaySample"+e+(1==e?" * unisonSign":""));e+=t.join(" + "),e+=") * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n                    data[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t\t\t}",e=e.replace(/^.*\#.*$/gm,(e=>{const t=[];for(let i=0;i<a;i++)t.push(e.replace(/\#/g,String(i)));return t.join("\n")})),r=new Function("Config","Synth",e)(h,He),He.pickedStringFunctionCache[a]=r}r(e,t,i,n,s)}static additiveSynth(e,t,i,n,s){const a=e.tempInstrumentSampleBufferL,r=s.waveL,o=r.length-1;s.chord.customInterval||(n.phases[1]=n.phases[0]);let l=n.phaseDeltas[0]*o;const p=+n.phaseDeltaScales[0];let h=+n.expression;const u=+n.expressionDelta;let c=n.phases[0]%1*o;const f=n.noteFiltersL,d=0|n.noteFilterCount;let m=+n.initialNoteFilterInputL1,v=+n.initialNoteFilterInputL2;const y=He.applyFilters,b=0|c,g=b%o,S=c-b;let w=+r[g];w+=(r[g+1]-w)*S;const M=t+i;for(let e=t;e<M;e++){c+=l;const t=0|c,i=t%o;let n=r[i];const s=c-t;n+=(r[i+1]-n)*s;const b=(n-w)/l;w=n;const g=b,S=y(g,m,v,d,f);v=m,m=g,l*=p;const M=S*h;h+=u,a[e]+=M}n.phases[0]=c/o,n.phaseDeltas[0]=l/o,n.expression=h,e.sanitizeFilters(f),n.initialNoteFilterInputL1=m,n.initialNoteFilterInputL2=v}static effectsSynth(e,t,i,n,s,a){const r=P(a.effects),o=E(a.effects),l=I(a.effects),p=T(a.effects),u=z(a.effects),c=D(a.effects),f=H(a.effects),d=a.chipWaveInStereo&&(a.synthesizer==He.loopableChipSynth||a.synthesizer==He.chipSynth);let m="";m=r?m+"1":m+"0",m=o?m+"1":m+"0",m=l?m+"1":m+"0",m=p?m+"1":m+"0",m=u?m+"1":m+"0",m=c?m+"1":m+"0",m=f?m+"1":m+"0",m=d?m+"1":m+"0";for(let e of a.effectOrder)m+=a.effectOrder[e].toString();let v=He.effectsFunctionCache[m];if(null==v){let e="return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {";const t=u||f||c;e+="\n                const tempInstrumentSampleBufferL = synth.tempInstrumentSampleBufferL;\n                const tempInstrumentSampleBufferR = synth.tempInstrumentSampleBufferR;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;",t&&(e+="\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;"),r&&(e+="\n\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\n\t\t\t\tlet distortionFractionalInputL1 = +instrumentState.distortionFractionalInputL1;\n\t\t\t\tlet distortionFractionalInputL2 = +instrumentState.distortionFractionalInputL2;\n                let distortionFractionalInputL3 = +instrumentState.distortionFractionalInputL3;\n                let distortionFractionalInputR1 = +instrumentState.distortionFractionalInputR1;\n                let distortionFractionalInputR2 = +instrumentState.distortionFractionalInputR2;\n                let distortionFractionalInputR3 = +instrumentState.distortionFractionalInputR3;\n                let distortionPrevInputL = +instrumentState.distortionPrevInputL;\n                let distortionPrevInputR = +instrumentState.distortionPrevInputR;\n                let distortionNextOutputL = +instrumentState.distortionNextOutputL;\n                let distortionNextOutputR = +instrumentState.distortionNextOutputR;"),o&&(e+="\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInputL = +instrumentState.bitcrusherPrevInputL;\n                let bitcrusherPrevInputR = +instrumentState.bitcrusherPrevInputR;\n                let bitcrusherCurrentOutputL = +instrumentState.bitcrusherCurrentOutputL;\n                let bitcrusherCurrentOutputR = +instrumentState.bitcrusherCurrentOutputR;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;"),l&&(e+="\n\t\t\t\t\n\t\t\t\tlet filtersL = instrumentState.eqFiltersL;\n                let filtersR = instrumentState.eqFiltersR;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n                let initialFilterInputL1 = +instrumentState.initialEqFilterInputL1;\n                let initialFilterInputR1 = +instrumentState.initialEqFilterInputR1;\n                let initialFilterInputL2 = +instrumentState.initialEqFilterInputL2;\n                let initialFilterInputR2 = +instrumentState.initialEqFilterInputR2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;"),e+="\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;",p&&(e+="\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;"),u&&(e+="\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;"),c&&(e+="\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;"),f&&(e+="\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;"),e+=d?"\n\n                const stopIndex = bufferIndex + runLength;\n                for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                let sample = 0.0;\n                let sampleL = tempInstrumentSampleBufferL[sampleIndex];\n                let sampleR = tempInstrumentSampleBufferR[sampleIndex];\n                tempInstrumentSampleBufferL[sampleIndex] = 0.0;\n                tempInstrumentSampleBufferR[sampleIndex] = 0.0;":"\n\n                const stopIndex = bufferIndex + runLength;\n                for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                let sampleL = tempInstrumentSampleBufferL[sampleIndex];\n                let sampleR = tempInstrumentSampleBufferL[sampleIndex];\n                tempInstrumentSampleBufferL[sampleIndex] = 0.0;\n                tempInstrumentSampleBufferR[sampleIndex] = 0.0;",e+="\n\n            sampleL *= eqFilterVolume;\n            sampleR *= eqFilterVolume;\n            eqFilterVolume += eqFilterVolumeDelta;";for(let t of a.effectOrder)o&&4==t?e+="\n\n                    bitcrusherPhase += bitcrusherPhaseDelta;\n                    if (bitcrusherPhase < 1.0) {\n                        bitcrusherPrevInputL = sampleL;\n                        bitcrusherPrevInputR = sampleR;\n                        sampleL = bitcrusherCurrentOutputL;\n                        sampleR = bitcrusherCurrentOutputR;\n                    } else {\n                        bitcrusherPhase = bitcrusherPhase % 1.0;\n                        const ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\n                        const lerpedInputL = sampleL + (bitcrusherPrevInputL - sampleL) * ratio;\n                        const lerpedInputR = sampleR + (bitcrusherPrevInputR - sampleR) * ratio;\n                        bitcrusherPrevInputL = sampleL;\n                        bitcrusherPrevInputR = sampleR;\n\n                        const bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n                        const wrappedSampleL = (((lerpedInputL + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n                        const wrappedSampleR = (((lerpedInputR + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n                        const foldedSampleL = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSampleL);\n                        const foldedSampleR = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSampleR);\n                        const scaledSampleL = foldedSampleL / bitcrusherScale;\n                        const scaledSampleR = foldedSampleR / bitcrusherScale;\n                        const oldValueL = bitcrusherCurrentOutputL;\n                        const oldValueR = bitcrusherCurrentOutputR;\n                        const newValueL = (((scaledSampleL > 0 ? scaledSampleL + 1 : scaledSampleL)|0)-.5) * bitcrusherScale;\n                        const newValueR = (((scaledSampleR > 0 ? scaledSampleR + 1 : scaledSampleR)|0)-.5) * bitcrusherScale;\n\n                        sampleL = oldValueL + (newValueL - oldValueL) * ratio;\n                        sampleR = oldValueR + (newValueR - oldValueR) * ratio;\n                        bitcrusherCurrentOutputL = newValueL;\n                        bitcrusherCurrentOutputR = newValueR;\n                    }\n                    bitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n                    bitcrusherScale *= bitcrusherScaleScale;\n                    bitcrusherFoldLevel *= bitcrusherFoldLevelScale;":r&&3==t?e+="\n\n                    const distortionReverse = 1.0 - distortion;\n                    const distortionNextInputL = sampleL * distortionDrive;\n                    const distortionNextInputR = sampleR * distortionDrive;\n                    sampleL = distortionNextOutputL;\n                    sampleR = distortionNextOutputR;\n                    distortionNextOutputL = distortionNextInputL / (distortionReverse * Math.abs(distortionNextInputL) + distortion);\n                    distortionNextOutputR = distortionNextInputR / (distortionReverse * Math.abs(distortionNextInputR) + distortion);\n                    distortionFractionalInputL1 = distortionFractionalDelayG1 * distortionNextInputL + distortionPrevInputL - distortionFractionalDelayG1 * distortionFractionalInputL1;\n                    distortionFractionalInputL2 = distortionFractionalDelayG2 * distortionNextInputL + distortionPrevInputL - distortionFractionalDelayG2 * distortionFractionalInputL2;\n                    distortionFractionalInputL3 = distortionFractionalDelayG3 * distortionNextInputL + distortionPrevInputL - distortionFractionalDelayG3 * distortionFractionalInputL3;\n                    distortionFractionalInputR1 = distortionFractionalDelayG1 * distortionNextInputR + distortionPrevInputR - distortionFractionalDelayG1 * distortionFractionalInputR1;\n                    distortionFractionalInputR2 = distortionFractionalDelayG2 * distortionNextInputR + distortionPrevInputR - distortionFractionalDelayG2 * distortionFractionalInputR2;\n                    distortionFractionalInputR3 = distortionFractionalDelayG3 * distortionNextInputR + distortionPrevInputR - distortionFractionalDelayG3 * distortionFractionalInputR3;\n                    const distortionOutputL1 = distortionFractionalInputL1 / (distortionReverse * Math.abs(distortionFractionalInputL1) + distortion);\n                    const distortionOutputL2 = distortionFractionalInputL2 / (distortionReverse * Math.abs(distortionFractionalInputL2) + distortion);\n                    const distortionOutputL3 = distortionFractionalInputL3 / (distortionReverse * Math.abs(distortionFractionalInputL3) + distortion);\n                    const distortionOutputR1 = distortionFractionalInputR1 / (distortionReverse * Math.abs(distortionFractionalInputR1) + distortion);\n                    const distortionOutputR2 = distortionFractionalInputR2 / (distortionReverse * Math.abs(distortionFractionalInputR2) + distortion);\n                    const distortionOutputR3 = distortionFractionalInputR3 / (distortionReverse * Math.abs(distortionFractionalInputR3) + distortion);\n                    distortionNextOutputL += distortionOutputL1 * distortionNextOutputWeight1 + distortionOutputL2 * distortionNextOutputWeight2 + distortionOutputL3 * distortionNextOutputWeight3;\n                    distortionNextOutputR += distortionOutputR1 * distortionNextOutputWeight1 + distortionOutputR2 * distortionNextOutputWeight2 + distortionOutputR3 * distortionNextOutputWeight3;\n                    sampleL += distortionOutputL1 * distortionPrevOutputWeight1 + distortionOutputL2 * distortionPrevOutputWeight2 + distortionOutputL3 * distortionPrevOutputWeight3;\n                    sampleR += distortionOutputR1 * distortionPrevOutputWeight1 + distortionOutputR2 * distortionPrevOutputWeight2 + distortionOutputR3 * distortionPrevOutputWeight3;\n                    sampleL *= distortionOversampleCompensation;\n                    sampleR *= distortionOversampleCompensation;\n                    distortionPrevInputL = distortionNextInputL;\n                    distortionPrevInputR = distortionNextInputR;\n                    distortion += distortionDelta;\n                    distortionDrive += distortionDriveDelta;":p&&2==t?e+="\n\n                    sampleL *= panningVolumeL;\n                    sampleR *= panningVolumeR;\n                    panningVolumeL += panningVolumeDeltaL;\n                    panningVolumeR += panningVolumeDeltaR;":u&&1==t?e+="\n\n                    const chorusTap0Ratio = chorusTap0Index % 1;\n                    const chorusTap1Ratio = chorusTap1Index % 1;\n                    const chorusTap2Ratio = chorusTap2Index % 1;\n                    const chorusTap3Ratio = chorusTap3Index % 1;\n                    const chorusTap4Ratio = chorusTap4Index % 1;\n                    const chorusTap5Ratio = chorusTap5Index % 1;\n                    const chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n                    const chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n                    const chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n                    const chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n                    const chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n                    const chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n                    const chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n                    const chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n                    const chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n                    const chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n                    const chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n                    const chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n                    const chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n                    const chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n                    const chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n                    const chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n                    const chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n                    const chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n                    chorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n                    chorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n                    sampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n                    sampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n                    chorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n                    chorusTap0Index += chorusTap0Delta;\n                    chorusTap1Index += chorusTap1Delta;\n                    chorusTap2Index += chorusTap2Delta;\n                    chorusTap3Index += chorusTap3Delta;\n                    chorusTap4Index += chorusTap4Delta;\n                    chorusTap5Index += chorusTap5Delta;\n                    chorusVoiceMult += chorusVoiceMultDelta;\n                    chorusCombinedMult += chorusCombinedMultDelta;":c&&6==t?e+="\n\n                    const echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n                    const echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n                    const echoTapStartL = echoDelayLineL[echoTapStartIndex];\n                    const echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n                    const echoTapStartR = echoDelayLineR[echoTapStartIndex];\n                    const echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n                    const echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n                    const echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\n                    echoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n                    echoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n                    echoShelfPrevInputL = echoTapL;\n                    echoShelfPrevInputR = echoTapR;\n                    sampleL += echoShelfSampleL;\n                    sampleR += echoShelfSampleR;\n\n                    echoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n                    echoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n                    echoDelayPos = (echoDelayPos + 1) & echoMask;\n                    echoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n                    echoMult += echoMultDelta;\n                    ":f&&0==t?e+="\n\n                    // Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n                    // good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n                    // Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n                    // Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n                    const reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n                    const reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n                    const reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n                    const reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n                    const reverbSample1 = reverbDelayLine[reverbDelayPos1];\n                    const reverbSample2 = reverbDelayLine[reverbDelayPos2];\n                    const reverbSample3 = reverbDelayLine[reverbDelayPos3];\n                    const reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n                    const reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n                    const reverbTemp2 = -reverbSample2 + reverbSample3;\n                    const reverbTemp3 = -reverbSample2 - reverbSample3;\n                    const reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n                    const reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n                    const reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n                    const reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n                    reverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n                    reverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n                    reverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n                    reverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n                    reverbShelfPrevInput0 = reverbShelfInput0;\n                    reverbShelfPrevInput1 = reverbShelfInput1;\n                    reverbShelfPrevInput2 = reverbShelfInput2;\n                    reverbShelfPrevInput3 = reverbShelfInput3;\n                    reverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n                    reverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n                    reverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n                    reverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n                    reverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n                    sampleL += reverbSample1 + reverbSample2 + reverbSample3;\n                    sampleR += reverbSample0 + reverbSample2 - reverbSample3;\n                    reverb += reverbDelta;":l&&5==t&&(e+="\n\n                    const inputSampleL = sampleL;\n                    const inputSampleR = sampleR;\n                    sampleL = applyFilters(inputSampleL, initialFilterInputL1, initialFilterInputL2, filterCount, filtersL);\n                    sampleR = applyFilters(inputSampleR, initialFilterInputR1, initialFilterInputR2, filterCount, filtersR);\n                    initialFilterInputL2 = initialFilterInputL1;\n                    initialFilterInputR2 = initialFilterInputR1;\n                    initialFilterInputL1 = inputSampleL;\n                    initialFilterInputR1 = inputSampleR;");e+="\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;",t&&(e+="\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;"),e+="\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);",t&&(e+="\n\t\t\t\t\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;"),r&&(e+="\n\t\t\t\t\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInputL1) || Math.abs(distortionFractionalInputL1) < epsilon) distortionFractionalInputL1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInputL2) || Math.abs(distortionFractionalInputL2) < epsilon) distortionFractionalInputL2 = 0.0;\n                if (!Number.isFinite(distortionFractionalInputL3) || Math.abs(distortionFractionalInputL3) < epsilon) distortionFractionalInputL3 = 0.0;\n                if (!Number.isFinite(distortionFractionalInputR1) || Math.abs(distortionFractionalInputR1) < epsilon) distortionFractionalInputR1 = 0.0;\n                if (!Number.isFinite(distortionFractionalInputR2) || Math.abs(distortionFractionalInputR2) < epsilon) distortionFractionalInputR2 = 0.0;\n                if (!Number.isFinite(distortionFractionalInputR3) || Math.abs(distortionFractionalInputR3) < epsilon) distortionFractionalInputR3 = 0.0;\n                if (!Number.isFinite(distortionPrevInputL) || Math.abs(distortionPrevInputL) < epsilon) distortionPrevInputL = 0.0;\n                if (!Number.isFinite(distortionPrevInputR) || Math.abs(distortionPrevInputR) < epsilon) distortionPrevInputR = 0.0;\n                if (!Number.isFinite(distortionNextOutputL) || Math.abs(distortionNextOutputL) < epsilon) distortionNextOutputL = 0.0;\n                if (!Number.isFinite(distortionNextOutputR) || Math.abs(distortionNextOutputR) < epsilon) distortionNextOutputR = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInputL1 = distortionFractionalInputL1;\n\t\t\t\tinstrumentState.distortionFractionalInputL2 = distortionFractionalInputL2;\n                instrumentState.distortionFractionalInputL3 = distortionFractionalInputL3;\n                instrumentState.distortionFractionalInputR1 = distortionFractionalInputR1;\n                instrumentState.distortionFractionalInputR2 = distortionFractionalInputR2;\n                instrumentState.distortionFractionalInputR3 = distortionFractionalInputR3;\n                instrumentState.distortionPrevInputL = distortionPrevInputL;\n                instrumentState.distortionPrevInputR = distortionPrevInputR;\n                instrumentState.distortionNextOutputL = distortionNextOutputL;\n                instrumentState.distortionNextOutputR = distortionNextOutputR;"),o&&(e+="\n\t\t\t\t\t\n                if (Math.abs(bitcrusherPrevInputL) < epsilon) bitcrusherPrevInputL = 0.0;\n                if (Math.abs(bitcrusherPrevInputR) < epsilon) bitcrusherPrevInputR = 0.0;\n                if (Math.abs(bitcrusherCurrentOutputL) < epsilon) bitcrusherCurrentOutputL = 0.0;\n                if (Math.abs(bitcrusherCurrentOutputR) < epsilon) bitcrusherCurrentOutputR = 0.0;\n                instrumentState.bitcrusherPrevInputL = bitcrusherPrevInputL;\n                instrumentState.bitcrusherPrevInputR = bitcrusherPrevInputR;\n                instrumentState.bitcrusherCurrentOutputL = bitcrusherCurrentOutputL;\n                instrumentState.bitcrusherCurrentOutputR = bitcrusherCurrentOutputR;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;"),l&&(e+="\n\t\t\t\t\t\n\t\t\t\t\tsynth.sanitizeFilters(filtersL);\n                    synth.sanitizeFilters(filtersR);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInputL1 < 100) || !(initialFilterInputL2 < 100) || !(initialFilterInputR1 < 100) || !(initialFilterInputR2 < 100)) {\n\t\t\t\t\tinitialFilterInputL1 = 0.0;\n                    initialFilterInputR2 = 0.0;\n                    initialFilterInputL1 = 0.0;\n                    initialFilterInputR2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInputL1) < epsilon) initialFilterInputL1 = 0.0;\n                if (Math.abs(initialFilterInputL2) < epsilon) initialFilterInputL2 = 0.0;\n                if (Math.abs(initialFilterInputR1) < epsilon) initialFilterInputR1 = 0.0;\n                if (Math.abs(initialFilterInputR2) < epsilon) initialFilterInputR2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInputL1 = initialFilterInputL1;\n                instrumentState.initialEqFilterInputL2 = initialFilterInputL2;\n                instrumentState.initialEqFilterInputR1 = initialFilterInputR1;\n                instrumentState.initialEqFilterInputR2 = initialFilterInputR2;"),p&&(e+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;"),u&&(e+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;"),c&&(e+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;"),f&&(e+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;"),e+="}",v=new Function("Config","Synth",e)(h,He),He.effectsFunctionCache[m]=v}v(e,t,i,n,s,a)}static pulseWidthSynth(e,t,i,n,s){const a=e.tempInstrumentSampleBufferL,r=n.specialIntervalExpressionMult*s.unisonSign;1!=s.unisonVoices||0!=s.unisonSpread||s.chord.customInterval||(n.phases[1]=n.phases[0]);let o=n.phaseDeltas[0],l=n.phaseDeltas[1];const p=+n.phaseDeltaScales[0],h=+n.phaseDeltaScales[1];let u=+n.expression;const c=+n.expressionDelta;let f=n.phases[0]%1,d=n.phases[1]%1,m=n.pulseWidth;const v=n.pulseWidthDelta,y=n.noteFiltersL,b=0|n.noteFilterCount;let g=+n.initialNoteFilterInputL1,S=+n.initialNoteFilterInputL2;const w=He.applyFilters,M=t+i;for(let e=t;e<M;e++){const t=f%1,i=(f+m)%1,n=d%1,M=(d+m)%1;let F=i-t,x=M-n;if(!s.aliases){if(t<o)F+=.5*((k=t/o)+k-k*k-1);else if(t>1-o){F+=.5*((k=(t-1)/o)+k+k*k+1)}if(i<o)F-=.5*((k=i/o)+k-k*k-1);else if(i>1-o){F-=.5*((k=(i-1)/o)+k+k*k+1)}if(n<l)x+=.5*((k=n/l)+k-k*k-1);else if(n>1-l){x+=.5*((k=(n-1)/l)+k+k*k+1)}if(M<l)x-=.5*((k=M/l)+k-k*k-1);else if(M>1-l){var k;x-=.5*((k=(M-1)/l)+k+k*k+1)}}const q=F+x*r,I=w(q,g,S,b,y);S=g,g=q,f+=o,d+=l,o*=p,l*=h,m+=v;const P=I*u;u+=c,a[e]+=P}n.phases[0]=f,n.phases[1]=d,n.phaseDeltas[0]=o,n.phaseDeltas[1]=l,n.expression=u,n.pulseWidth=m,e.sanitizeFilters(y),n.initialNoteFilterInputL1=g,n.initialNoteFilterInputL2=S}static supersawSynth(e,t,i,n,s){const a=e.tempInstrumentSampleBufferL,r=0|h.supersawVoiceCount;let o=n.phaseDeltas[0];const l=+n.phaseDeltaScales[0];let p=+n.expression;const u=+n.expressionDelta;let c=n.phases,f=+n.supersawDynamism;const d=+n.supersawDynamismDelta,m=n.supersawUnisonDetunes;let v=+n.supersawShape;const y=+n.supersawShapeDelta;let b=+n.supersawDelayLength;const g=+n.supersawDelayLengthDelta,S=n.supersawDelayLine,w=S.length-1>>0;let M=0|n.supersawDelayIndex;M=(M&w)+S.length;const k=n.noteFiltersL,F=0|n.noteFilterCount;let x=+n.initialNoteFilterInputL1,q=+n.initialNoteFilterInputL2;const I=He.applyFilters,P=t+i;for(let e=t;e<P;e++){let t=(c[0]+o)%1,i=t-.5*(1+(r-1)*f);if(!s.aliases)if(t<o)i-=.5*((E=t/o)+E-E*E-1);else if(t>1-o){var E;i-=.5*((E=(t-1)/o)+E+E*E+1)}c[0]=t;for(let e=1;e<r;e++){const t=o*m[e];let n=(c[e]+t)%1;if(i+=n*f,!s.aliases)if(n<t){const e=n/t;i-=.5*(e+e-e*e-1)*f}else if(n>1-t){const e=(n-1)/t;i-=.5*(e+e+e*e+1)*f}c[e]=n}S[M&w]=i;const n=M-b,h=0|n,P=h+1,T=n-h,z=S[h&w];M++;const D=i-(z+(S[P&w]-z)*T)*v,H=I(D,x,q,F,k);q=x,x=D,o*=l,f+=d,v+=y,b+=g;const O=H*p;p+=u,a[e]+=O}n.phaseDeltas[0]=o,n.expression=p,n.supersawDynamism=f,n.supersawShape=v,n.supersawDelayLength=b,n.supersawDelayIndex=M,e.sanitizeFilters(k),n.initialNoteFilterInputL1=x,n.initialNoteFilterInputL2=q}static noiseSynth(e,t,i,n,s){const a=e.tempInstrumentSampleBufferL,r=s.waveL,o=n.specialIntervalExpressionMult*s.unisonSign;1!=s.unisonVoices||0!=s.unisonSpread||s.chord.customInterval||(n.phases[1]=n.phases[0]);let l=n.phaseDeltas[0],p=n.phaseDeltas[1];const u=+n.phaseDeltaScales[0],c=+n.phaseDeltaScales[1];let f=+n.expression;const d=+n.expressionDelta;let m=n.phases[0]%1*h.chipNoiseLength,v=n.phases[1]%1*h.chipNoiseLength;0==n.phases[0]&&(m=Math.random()*h.chipNoiseLength,1!=s.unisonVoices||0!=s.unisonSpread||s.chord.customInterval||(v=m)),0!=n.phases[1]||1==s.unisonVoices&&0==s.unisonSpread&&!s.chord.customInterval||(v=Math.random()*h.chipNoiseLength);const y=h.chipNoiseLength-1;let b=+n.noiseSampleA,g=+n.noiseSampleB;const S=n.noteFiltersL,w=0|n.noteFilterCount;let M=+n.initialNoteFilterInputL1,k=+n.initialNoteFilterInputL2;const F=He.applyFilters,x=Math.min(1,l*s.noisePitchFilterMult),q=Math.min(1,p*s.noisePitchFilterMult),I=t+i;for(let e=t;e<I;e++){b+=(r[m&y]-b)*x,g+=(r[v&y]-g)*q;const t=b+g*o,i=F(t,M,k,w,S);k=M,M=t,m+=l,v+=p,l*=u,p*=c;const n=i*f;f+=d,a[e]+=n}n.phases[0]=m/h.chipNoiseLength,n.phases[1]=v/h.chipNoiseLength,n.phaseDeltas[0]=l,n.phaseDeltas[1]=p,n.expression=f,n.noiseSampleA=b,n.noiseSampleB=g,e.sanitizeFilters(S),n.initialNoteFilterInputL1=M,n.initialNoteFilterInputL2=k}static spectrumSynth(e,t,i,n,s){const a=e.tempInstrumentSampleBufferL,r=s.waveL,o=128,l=n.specialIntervalExpressionMult*s.unisonSign;1!=s.unisonVoices||0!=s.unisonSpread||s.chord.customInterval||(n.phases[1]=n.phases[0]);let p=n.phaseDeltas[0]*o,u=n.phaseDeltas[1]*o;const c=+n.phaseDeltaScales[0],f=+n.phaseDeltaScales[1];let d=+n.expression;const m=+n.expressionDelta;let v=+n.noiseSampleA,y=+n.noiseSampleB;const b=n.noteFiltersL,g=0|n.noteFilterCount;let S=+n.initialNoteFilterInputL1,w=+n.initialNoteFilterInputL2;const M=He.applyFilters;let k=n.phases[0]%1*h.spectrumNoiseLength,F=n.phases[1]%1*h.spectrumNoiseLength;0==n.phases[0]&&(k=He.findRandomZeroCrossing(r,h.spectrumNoiseLength)+p,1!=s.unisonVoices||0!=s.unisonSpread||s.chord.customInterval||(F=k)),0!=n.phases[1]||1==s.unisonVoices&&0==s.unisonSpread&&!s.chord.customInterval||(F=He.findRandomZeroCrossing(r,h.spectrumNoiseLength)+u);const x=h.spectrumNoiseLength-1,q=Math.min(1,p),I=Math.min(1,u),P=t+i;for(let e=t;e<P;e++){const t=0|k,i=0|F,n=t&x,s=i&x;let o=r[n],h=r[s];const P=k-t,E=F-i;o+=(r[n+1]-o)*P,h+=(r[s+1]-h)*E,v+=(o-v)*q,y+=(h-y)*I;const T=v+y*l,z=M(T,S,w,g,b);w=S,S=T,k+=p,F+=u,p*=c,u*=f;const D=z*d;d+=m,a[e]+=D}n.phases[0]=k/h.spectrumNoiseLength,n.phases[1]=F/h.spectrumNoiseLength,n.phaseDeltas[0]=p/o,n.phaseDeltas[1]=u/o,n.expression=d,n.noiseSampleA=v,n.noiseSampleB=y,e.sanitizeFilters(b),n.initialNoteFilterInputL1=S,n.initialNoteFilterInputL2=w}static drumsetSynth(e,t,i,n,s){const a=e.tempInstrumentSampleBufferL;let r=s.getDrumsetWave(n.drumsetPitch);const o=ze.drumsetIndexReferenceDelta(n.drumsetPitch);let l=n.phaseDeltas[0]/o;const p=+n.phaseDeltaScales[0];let u=+n.expression;const c=+n.expressionDelta,f=n.noteFiltersL,d=0|n.noteFilterCount;let m=+n.initialNoteFilterInputL1,v=+n.initialNoteFilterInputL2;const y=He.applyFilters;let b=n.phases[0]%1*h.spectrumNoiseLength;0==n.phases[0]&&(b=He.findRandomZeroCrossing(r,h.spectrumNoiseLength)+l);const g=h.spectrumNoiseLength-1,S=t+i;for(let e=t;e<S;e++){const t=0|b,i=t&g;let n=r[i];const s=b-t;n+=(r[i+1]-n)*s;const o=n,h=y(o,m,v,d,f);v=m,m=o,b+=l,l*=p;const S=h*u;u+=c,a[e]+=S}n.phases[0]=b/h.spectrumNoiseLength,n.phaseDeltas[0]=l*o,n.expression=u,e.sanitizeFilters(f),n.initialNoteFilterInputL1=m,n.initialNoteFilterInputL2=v}static modSynth(e,t,i,n,s){if(!e.song)return;let a=h.modCount-1-n.pitches[0];if(s.invalidModulators[a])return;let r=s.modulators[a],o=[];if(h.modulators[s.modulators[a]].forSong)o.push(0);else if(s.modInstruments[a]==e.song.channels[s.modChannels[a]].instruments.length)for(let t=0;t<e.song.channels[s.modChannels[a]].instruments.length;t++)o.push(t);else s.modInstruments[a]>e.song.channels[s.modChannels[a]].instruments.length?null!=e.song.getPattern(s.modChannels[a],e.bar)&&(o=e.song.getPattern(s.modChannels[a],e.bar).instruments):o.push(s.modInstruments[a]);for(let t=0;t<o.length;t++){e.setModValue(n.expression,n.expression+n.expressionDelta,s.modChannels[a],o[t],r);for(let i=0;i<e.heldMods.length;i++)h.modulators[s.modulators[a]].forSong?e.heldMods[i].setting==r&&e.setModValue(e.heldMods[i].volume,e.heldMods[i].volume,s.modChannels[a],o[t],r):e.heldMods[i].channelIndex==s.modChannels[a]&&e.heldMods[i].instrumentIndex==o[t]&&e.heldMods[i].setting==r&&e.setModValue(e.heldMods[i].volume,e.heldMods[i].volume,s.modChannels[a],o[t],r);if(r==h.modulators.dictionary["reset arp"].index&&0==e.tick&&n.noteStartPart==e.beat*h.partsPerBeat+e.part)e.channels[s.modChannels[a]].instruments[o[t]].arpTime=0;else if(r==h.modulators.dictionary["next bar"].index)e.wantToSkip=!0;else if(r==h.modulators.dictionary["song eq"].index){const t=e.song;let r=0|s.modFilterTypes[a];if(0==r){let s=0;const a=e.getTicksIntoBar()/h.ticksPerPart;for(;n.note.start+n.note.pins[s].time<=a;)s++;let r=(a-n.note.start+i/(e.getSamplesPerTick()*h.ticksPerPart)*h.ticksPerPart-n.note.pins[s-1].time)/(n.note.pins[s].time-n.note.pins[s-1].time);null!=t.eqSubFilters[n.note.pins[s-1].size]||null!=t.eqSubFilters[n.note.pins[s].size]?t.tmpEqFilterEnd=ke.lerpFilters(t.eqSubFilters[n.note.pins[s-1].size],t.eqSubFilters[n.note.pins[s].size],r):t.tmpEqFilterEnd=t.eqFilter}else{for(let e=0;e<h.filterMorphCount;e++)t.tmpEqFilterEnd==t.eqSubFilters[e]&&null!=t.tmpEqFilterEnd&&(t.tmpEqFilterEnd=new ke,t.tmpEqFilterEnd.fromJsonObject(t.eqSubFilters[e].toJsonObject()));null==t.tmpEqFilterEnd&&(t.tmpEqFilterEnd=new ke,t.tmpEqFilterEnd.fromJsonObject(t.eqFilter.toJsonObject())),t.tmpEqFilterEnd.controlPointCount>Math.floor((r-1)/2)&&(r%2?t.tmpEqFilterEnd.controlPoints[Math.floor((r-1)/2)].freq=n.expression+n.expressionDelta:t.tmpEqFilterEnd.controlPoints[Math.floor((r-1)/2)].gain=n.expression+n.expressionDelta)}}else if(r==h.modulators.dictionary["eq filter"].index){const r=e.song.channels[s.modChannels[a]].instruments[o[t]];if(!r.eqFilterType){let t=0|s.modFilterTypes[a];if(0==t){let t=0;const s=e.getTicksIntoBar()/h.ticksPerPart;for(;n.note.start+n.note.pins[t].time<=s;)t++;let a=(s-n.note.start+i/(e.getSamplesPerTick()*h.ticksPerPart)*h.ticksPerPart-n.note.pins[t-1].time)/(n.note.pins[t].time-n.note.pins[t-1].time);null!=r.eqSubFilters[n.note.pins[t-1].size]||null!=r.eqSubFilters[n.note.pins[t].size]?r.tmpEqFilterEnd=ke.lerpFilters(r.eqSubFilters[n.note.pins[t-1].size],r.eqSubFilters[n.note.pins[t].size],a):r.tmpEqFilterEnd=r.eqFilter}else{for(let e=0;e<h.filterMorphCount;e++)r.tmpEqFilterEnd==r.eqSubFilters[e]&&null!=r.tmpEqFilterEnd&&(r.tmpEqFilterEnd=new ke,r.tmpEqFilterEnd.fromJsonObject(r.eqSubFilters[e].toJsonObject()));null==r.tmpEqFilterEnd&&(r.tmpEqFilterEnd=new ke,r.tmpEqFilterEnd.fromJsonObject(r.eqFilter.toJsonObject())),r.tmpEqFilterEnd.controlPointCount>Math.floor((t-1)/2)&&(t%2?r.tmpEqFilterEnd.controlPoints[Math.floor((t-1)/2)].freq=n.expression+n.expressionDelta:r.tmpEqFilterEnd.controlPoints[Math.floor((t-1)/2)].gain=n.expression+n.expressionDelta)}}}else if(r==h.modulators.dictionary["note filter"].index){const r=e.song.channels[s.modChannels[a]].instruments[o[t]];if(!r.noteFilterType){let t=0|s.modFilterTypes[a];if(0==t){let t=0;const s=e.getTicksIntoBar()/h.ticksPerPart;for(;n.note.start+n.note.pins[t].time<=s;)t++;let a=(s-n.note.start+i/(e.getSamplesPerTick()*h.ticksPerPart)*h.ticksPerPart-n.note.pins[t-1].time)/(n.note.pins[t].time-n.note.pins[t-1].time);null!=r.noteSubFilters[n.note.pins[t-1].size]||null!=r.noteSubFilters[n.note.pins[t].size]?r.tmpNoteFilterEnd=ke.lerpFilters(r.noteSubFilters[n.note.pins[t-1].size],r.noteSubFilters[n.note.pins[t].size],a):r.tmpNoteFilterEnd=r.noteFilter}else{for(let e=0;e<h.filterMorphCount;e++)r.tmpNoteFilterEnd==r.noteSubFilters[e]&&null!=r.tmpNoteFilterEnd&&(r.tmpNoteFilterEnd=new ke,r.tmpNoteFilterEnd.fromJsonObject(r.noteSubFilters[e].toJsonObject()));null==r.tmpNoteFilterEnd&&(r.tmpNoteFilterEnd=new ke,r.tmpNoteFilterEnd.fromJsonObject(r.noteFilter.toJsonObject())),r.tmpNoteFilterEnd.controlPointCount>Math.floor((t-1)/2)&&(t%2?r.tmpNoteFilterEnd.controlPoints[Math.floor((t-1)/2)].freq=n.expression+n.expressionDelta:r.tmpNoteFilterEnd.controlPoints[Math.floor((t-1)/2)].gain=n.expression+n.expressionDelta)}}}else if(r==h.modulators.dictionary["individual envelope speed"].index){const i=e.song.channels[s.modChannels[a]].instruments[o[t]];let r=s.modEnvelopeNumbers[a],l=n.expression+n.expressionDelta;Number.isInteger(l)?i.envelopes[r].tempEnvelopeSpeed=h.perEnvelopeSpeedIndices[l]:(l=(1-l%1)*h.perEnvelopeSpeedIndices[Math.floor(l)]+l%1*h.perEnvelopeSpeedIndices[Math.ceil(l)],i.envelopes[r].tempEnvelopeSpeed=l)}}}static findRandomZeroCrossing(e,t){let i=Math.random()*t;const n=t-1;let s=i&n,a=e[s];for(let r=128;r>0;r--){const r=s+16&n,o=e[r];if(a*o<=0){for(let r=0;r<16;r++){const r=s+1&n,o=e[r];if(a*o<=0){const e=o-a;i=s,Math.abs(e)>1e-8&&(i+=-a/e),i=Math.max(0,i)%t;break}s=r,a=o}break}s=r,a=o}return i}static instrumentVolumeToVolumeMult(e){return e==-h.volumeRange/2?0:Math.pow(2,h.volumeLogScale*e)}static volumeMultToInstrumentVolume(e){return e<=0?-h.volumeRange/2:Math.min(h.volumeRange,Math.log(e)/Math.LN2/h.volumeLogScale)}static noteSizeToVolumeMult(e){return Math.pow(Math.max(0,e)/h.noteSizeMax,1.5)}static volumeMultToNoteSize(e){return Math.pow(Math.max(0,e),1/1.5)*h.noteSizeMax}static fadeInSettingToSeconds(e){return.0125*(.95*e+.05*e*e)}static secondsToFadeInSetting(e){return X(0,h.fadeInRange,Math.round((-.95+Math.sqrt(.9025+.2*e/.0125))/.1))}static fadeOutSettingToTicks(e){return h.fadeOutTicks[e]}static ticksToFadeOutSetting(e){let t=h.fadeOutTicks[0];if(e<=t)return 0;for(let i=1;i<h.fadeOutTicks.length;i++){let n=h.fadeOutTicks[i];if(e<=n)return e<(t+n)/2?i-1:i;t=n}return h.fadeOutTicks.length-1}static detuneToCents(e){return e-h.detuneCenter}static centsToDetune(e){return e+h.detuneCenter}static getOperatorWave(e,t){return 2!=e?h.operatorWaves[e]:h.pwmOperatorWaves[t]}getSamplesPerTick(){if(null==this.song)return 0;let e=this.song.getBeatsPerMinute();return this.isModActive(h.modulators.dictionary.tempo.index)&&(e=this.getModValue(h.modulators.dictionary.tempo.index)),this.getSamplesPerTickSpecificBPM(e)}getSamplesPerTickSpecificBPM(e){const t=e/60,i=h.partsPerBeat*t,n=h.ticksPerPart*i;return this.samplesPerSecond/n}static fittingPowerOfTwo(e){return 1<<32-Math.clz32(Math.ceil(e)-1)}sanitizeFilters(e){let t=!1;for(const i of e){const e=Math.abs(i.output1),n=Math.abs(i.output2);if(!(e<100&&n<100)){t=!0;break}e<Y&&(i.output1=0),n<Y&&(i.output2=0)}if(t)for(const t of e)t.output1=0,t.output2=0}static sanitizeDelayLine(e,t,i){for(;;){const n=--t&i,s=Math.abs(e[n]);if(Number.isFinite(s)&&(0==s||s>=Y))break;e[n]=0}}static applyFilters(e,t,i,n,s){for(let a=0;a<n;a++){const n=s[a],r=n.output1,o=n.output2,l=n.a1,p=n.a2,h=n.b0,u=n.b1,c=n.b2;e=h*e+u*t+c*i-l*r-p*o,n.a1=l+n.a1Delta,n.a2=p+n.a2Delta,n.useMultiplicativeInputCoefficients?(n.b0=h*n.b0Delta,n.b1=u*n.b1Delta,n.b2=c*n.b2Delta):(n.b0=h+n.b0Delta,n.b1=u+n.b1Delta,n.b2=c+n.b2Delta),n.output2=r,n.output1=e,i=o,t=r}return e}computeTicksSinceStart(e=!1){var t,i;const n=(null===(t=this.song)||void 0===t?void 0:t.beatsPerBar)?null===(i=this.song)||void 0===i?void 0:i.beatsPerBar:8;return e?h.ticksPerPart*h.partsPerBeat*n*this.bar:this.tick+h.ticksPerPart*(this.part+h.partsPerBeat*(this.beat+n*this.bar))}}return He.tempFilterStartCoefficients=new N,He.tempFilterEndCoefficients=new N,He.fmSynthFunctionCache={},He.fm6SynthFunctionCache={},He.effectsFunctionCache={},He.pickedStringFunctionCache=Array(3).fill(void 0),He.fmSourceTemplate=("\n\t\tconst data = synth.tempInstrumentSampleBufferL;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * "+h.sineWaveLength+";\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * "+h.sineWaveLength+";\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFiltersL;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / "+h.sineWaveLength+";\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / "+h.sineWaveLength+";\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t\t").split("\n"),He.operatorSourceTemplate=("\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & "+h.sineWaveMask+";\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t").split("\n"),e.AdditiveWave=Se,e.Channel=qe,e.Config=h,e.CustomAlgorithm=de,e.CustomFeedBack=me,e.EnvelopeSettings=Fe,e.FilterControlPoint=Me,e.FilterSettings=ke,e.HarmonicsWave=be,e.Instrument=xe,e.Note=ue,e.Operator=fe,e.Pattern=ce,e.Song=Ie,e.SpectrumWave=ve,e.Synth=He,e.clamp=X,e.makeNotePin=he,e.parseFloatWithDefault=ee,e.parseIntWithDefault=te,Object.defineProperty(e,"te",{value:!0}),e}({});
//# sourceMappingURL=beepbox_synth.min.js.map